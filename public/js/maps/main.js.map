{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","util","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","sizes","gesture","changedPointers","console","log","pointer","center","point","Point","x","y","path","CompoundPath","children","Path","name","strokeColor","fillColor","add","visible","panMove","preventDefault","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","threshold","cumSize","j","avgSize","Math","round","atan2","cos","PI","sin","insert","smooth","view","draw","push","panEnd","elasticity","simplify","closed","lastChild","intersections","getCrossings","intersection","location","getLocationOf","index","curve","_i","segments","tap","hitResult","project","hitTest","hitOptions","item","selected","setup","$canvas","stroke","fill","tolerance","hammer","data","get","set","direction","Hammer","DIRECTION_ALL","newPressed","activeLayer","removeChildren","undoPressed","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","deg","radians","p1","p2","sqrt","pow","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var path = void 0;\n    var past = void 0;\n    var pasts = [];\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      sizes = [];\n\n      if (!(event.gesture.changedPointers && event.gesture.changedPointers.length > 0)) return;\n      if (event.gesture.changedPointers.length > 1) {\n        console.log('event.gesture.changedPointers > 1');\n      }\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      // the first path is what is actually drawn, the second path keeps track of center points\n      path = new CompoundPath({\n        children: [new Path({\n          name: 'bounds'\n        }), new Path({\n          name: 'middle'\n        })],\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor\n      });\n\n      path.children['bounds'].add(point);\n\n      path.children['middle'].add(point);\n      path.children['middle'].visible = false; // second path is only for internal use, hide it\n    }\n\n    var threshold = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        path.children['bounds'].add(top);\n        path.children['bounds'].insert(0, bottom);\n        path.children['bounds'].smooth();\n\n        path.children['middle'].add(point);\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      path.children['bounds'].add(point);\n      path.children['bounds'].smooth();\n      path.children['bounds'].simplify(0);\n      path.children['bounds'].closed = true;\n\n      path.children['middle'].add(point);\n      path.children['middle'].smooth();\n      // path.children['middle'].simplify(0);\n      path.children['middle'].closed = false;\n      lastChild = path;\n\n      var intersections = path.children['middle'].getCrossings();\n      if (intersections && intersections.length > 0) {\n        for (var i = 0; i < intersections.length; i++) {\n          console.log('----------------');\n          var intersection = intersections[i];\n          var location = path.children['middle'].getLocationOf(intersection.point);\n          console.log(location);\n          var index = location.curve.index + 1;\n          console.log(index);\n          // for (let j = index; j < path.children['middle'].segments.length; j++) {\n          //   console.log(path.children['middle'].segments[j].point);\n          //   new Path.Circle({\n          //     center: path.children['middle'].segments[j].point,\n          //     radius: 3,\n          //     fillColor: 'pink'\n          //   });\n          // }\n          // let locationPath = new Path({\n          //   strokeColor: window.kan.currentColor,\n          //   fillColor: window.kan.currentColor\n          // });\n          // for (let j = 0; j < location.path.segments.length; j++) {\n          //   locationPath.add(location.path.segments[j].point);\n          // }\n          // locationPath.closed = false;\n          // console.log(intersection);\n          // const circle = new Path.Circle({\n          //     center: intersection.point,\n          //     radius: 3,\n          //     fillColor: 'pink'\n          // });\n        }\n      }\n\n      // console.log(path.children['middle']);\n      for (var _i = 0; _i < path.children['middle'].segments.length; _i++) {\n        var segment = path.children['middle'].segments[_i];\n        // console.log(segment);\n      }\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function tap(event) {\n      var pointer = event.gesture.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions);\n\n      if (hitResult) {\n        hitResult.item.selected = !hitResult.item.selected;\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function jiggle(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    $canvas.hammer().on('panstart', panStart).on('panmove', panMove).on('panend', panEnd).on('tap', tap);\n\n    $canvas.data('hammer').get('pan').set({ direction: Hammer.DIRECTION_ALL });\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbWFpbi5qcyIsInNyYy9qcy91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxPQUFPLEdBQVAsR0FBYSxPQUFPLEdBQVAsSUFBYztBQUN6QixXQUFTLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkIsRUFBa0MsU0FBbEMsRUFBNkMsU0FBN0MsRUFBd0QsU0FBeEQsRUFBbUUsU0FBbkUsRUFBOEUsU0FBOUUsRUFBeUYsU0FBekYsRUFBb0csU0FBcEcsRUFBK0csU0FBL0csRUFBMEgsU0FBMUgsRUFBcUksU0FBckksRUFBZ0osU0FBaEosRUFBMkosU0FBM0osRUFBc0ssU0FBdEssQ0FEZ0I7QUFFekIsZ0JBQWMsU0FGVztBQUd6QixZQUFVLEVBSGU7QUFJekIsU0FBTztBQUprQixDQUEzQjs7QUFPQSxNQUFNLE9BQU4sQ0FBYyxNQUFkOztBQUVBLElBQU0sT0FBTyxRQUFRLFFBQVIsQ0FBYjs7QUFFQSxFQUFFLFFBQUYsRUFBWSxLQUFaLENBQWtCLFlBQVc7QUFDM0IsTUFBSSxRQUFRLEVBQVosQ0FEMkIsQ0FDWDtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxVQUFVLEVBQUUsTUFBRixDQUFoQjtBQUNBLE1BQU0sUUFBUSxFQUFFLE1BQUYsQ0FBZDtBQUNBLE1BQU0sVUFBVSxFQUFFLG1CQUFGLENBQWhCOztBQUVBLFdBQVMsZ0JBQVQsR0FBNEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRDs7QUFFRCxXQUFTLGdCQUFULEdBQTRCO0FBQzFCLFFBQU0sZUFBZSxFQUFFLG1CQUFGLENBQXJCO0FBQ0EsUUFBTSxpQkFBaUIsYUFBYSxJQUFiLENBQWtCLElBQWxCLENBQXZCO0FBQ0EsUUFBTSxtQkFBbUIsRUFBekI7QUFDQSxRQUFNLDJCQUEyQixFQUFqQztBQUNBLFFBQU0sdUJBQXVCLGtCQUE3Qjs7QUFFQTtBQUNFLG1CQUFlLEVBQWYsQ0FBa0IsaUJBQWxCLEVBQXFDLFlBQVc7QUFDNUMsVUFBSSxPQUFPLEVBQUUsSUFBRixFQUFRLElBQVIsQ0FBYSxtQkFBYixDQUFYOztBQUVBLFVBQUksQ0FBQyxLQUFLLFFBQUwsQ0FBYyxvQkFBZCxDQUFMLEVBQTBDO0FBQ3hDLFVBQUUsTUFBTSxvQkFBUixFQUNHLFdBREgsQ0FDZSxvQkFEZixFQUVHLElBRkgsQ0FFUSxPQUZSLEVBRWlCLGdCQUZqQixFQUdHLElBSEgsQ0FHUSxRQUhSLEVBR2tCLGdCQUhsQixFQUlHLElBSkgsQ0FJUSxNQUpSLEVBS0csSUFMSCxDQUtRLElBTFIsRUFLYyxDQUxkLEVBTUcsSUFOSCxDQU1RLElBTlIsRUFNYyxDQU5kOztBQVFBLGFBQUssUUFBTCxDQUFjLG9CQUFkLEVBQ0csSUFESCxDQUNRLE9BRFIsRUFDaUIsd0JBRGpCLEVBRUcsSUFGSCxDQUVRLFFBRlIsRUFFa0Isd0JBRmxCLEVBR0csSUFISCxDQUdRLE1BSFIsRUFJRyxJQUpILENBSVEsSUFKUixFQUljLDJCQUEyQixDQUp6QyxFQUtHLElBTEgsQ0FLUSxJQUxSLEVBS2MsMkJBQTJCLENBTHpDOztBQU9BLGVBQU8sR0FBUCxDQUFXLFlBQVgsR0FBMEIsS0FBSyxJQUFMLENBQVUsTUFBVixFQUFrQixJQUFsQixDQUF1QixNQUF2QixDQUExQjtBQUNEO0FBQ0YsS0FyQkg7QUFzQkg7O0FBRUQsV0FBUyxjQUFULEdBQTBCOztBQUV4QixVQUFNLEtBQU4sQ0FBWSxRQUFRLENBQVIsQ0FBWjs7QUFFQSxRQUFJLGFBQUo7QUFDQSxRQUFJLGFBQUo7QUFDQSxRQUFJLFFBQVEsRUFBWjtBQUNBLFFBQUksY0FBSjtBQUNBO0FBQ0EsUUFBSSxRQUFRLEtBQVo7QUFDQSxRQUFJLGtCQUFKOztBQUVBLGFBQVMsUUFBVCxDQUFrQixLQUFsQixFQUF5QjtBQUN2QixjQUFRLEVBQVI7O0FBRUEsVUFBSSxFQUFFLE1BQU0sT0FBTixDQUFjLGVBQWQsSUFBaUMsTUFBTSxPQUFOLENBQWMsZUFBZCxDQUE4QixNQUE5QixHQUF1QyxDQUExRSxDQUFKLEVBQWtGO0FBQ2xGLFVBQUksTUFBTSxPQUFOLENBQWMsZUFBZCxDQUE4QixNQUE5QixHQUF1QyxDQUEzQyxFQUE4QztBQUM1QyxnQkFBUSxHQUFSLENBQVksbUNBQVo7QUFDRDs7QUFFRCxVQUFNLFVBQVUsTUFBTSxPQUFOLENBQWMsTUFBOUI7QUFDQSxVQUFNLFFBQVEsSUFBSSxLQUFKLENBQVUsUUFBUSxDQUFsQixFQUFxQixRQUFRLENBQTdCLENBQWQ7O0FBRUE7QUFDQSxhQUFPLElBQUksWUFBSixDQUFpQjtBQUN0QixrQkFBVSxDQUNSLElBQUksSUFBSixDQUFTO0FBQ1AsZ0JBQU07QUFEQyxTQUFULENBRFEsRUFJUixJQUFJLElBQUosQ0FBUztBQUNQLGdCQUFNO0FBREMsU0FBVCxDQUpRLENBRFk7QUFTdEIscUJBQWEsT0FBTyxHQUFQLENBQVcsWUFURjtBQVV0QixtQkFBVyxPQUFPLEdBQVAsQ0FBVztBQVZBLE9BQWpCLENBQVA7O0FBYUEsV0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixHQUF4QixDQUE0QixLQUE1Qjs7QUFFQSxXQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLEdBQXhCLENBQTRCLEtBQTVCO0FBQ0EsV0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixPQUF4QixHQUFrQyxLQUFsQyxDQTVCdUIsQ0E0QmtCO0FBQzFDOztBQUVELFFBQU0sWUFBWSxFQUFsQjtBQUNBLFFBQU0sUUFBUSxHQUFkO0FBQ0EsUUFBTSxTQUFTLEVBQWY7QUFDQSxRQUFJLGdCQUFKO0FBQUEsUUFBYSxnQkFBYjtBQUNBLGFBQVMsT0FBVCxDQUFpQixLQUFqQixFQUF3QjtBQUN0QixZQUFNLGNBQU47O0FBRUEsVUFBTSxVQUFVLE1BQU0sT0FBTixDQUFjLE1BQTlCO0FBQ0EsVUFBTSxRQUFRLElBQUksS0FBSixDQUFVLFFBQVEsQ0FBbEIsRUFBcUIsUUFBUSxDQUE3QixDQUFkOztBQUVBLGFBQU8sTUFBTSxNQUFOLEdBQWUsTUFBdEIsRUFBOEI7QUFDNUIsY0FBTSxLQUFOO0FBQ0Q7O0FBRUQsVUFBSSxnQkFBSjtBQUFBLFVBQWEsZ0JBQWI7QUFBQSxVQUFzQixlQUF0QjtBQUFBLFVBQ0UsYUFERjtBQUFBLFVBQ1EsYUFEUjtBQUFBLFVBQ2MsWUFEZDtBQUFBLFVBRUUsV0FGRjtBQUFBLFVBRU0sV0FGTjtBQUFBLFVBR0UsYUFIRjtBQUFBLFVBR1EsY0FIUjtBQUFBLFVBR2UsYUFIZjtBQUFBLFVBR3FCLGFBSHJCOztBQUtBLFVBQUksTUFBTSxNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDcEI7QUFDQSxhQUFLLElBQUw7QUFDQSxlQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsRUFBa0IsRUFBbEIsQ0FBUDtBQUNBLGVBQU8sT0FBTyxLQUFkO0FBQ0EsWUFBSSxRQUFRLFNBQVosRUFBdUIsT0FBTyxTQUFQOztBQUV2QixrQkFBVSxDQUFWO0FBQ0EsYUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLE1BQU0sTUFBMUIsRUFBa0MsR0FBbEMsRUFBdUM7QUFDckMscUJBQVcsTUFBTSxDQUFOLENBQVg7QUFDRDtBQUNELGtCQUFVLEtBQUssS0FBTCxDQUFXLENBQUUsVUFBVSxNQUFNLE1BQWpCLEdBQTJCLElBQTVCLElBQW9DLENBQS9DLENBQVY7QUFDQTs7QUFFQSxnQkFBUSxLQUFLLEtBQUwsQ0FBVyxNQUFNLENBQU4sR0FBVSxHQUFHLENBQXhCLEVBQTJCLE1BQU0sQ0FBTixHQUFVLEdBQUcsQ0FBeEMsQ0FBUixDQWRvQixDQWNnQzs7QUFFcEQ7QUFDQSxrQkFBVSxNQUFNLENBQU4sR0FBVSxLQUFLLEdBQUwsQ0FBUyxRQUFRLEtBQUssRUFBTCxHQUFRLENBQXpCLElBQThCLE9BQWxEO0FBQ0Esa0JBQVUsTUFBTSxDQUFOLEdBQVUsS0FBSyxHQUFMLENBQVMsUUFBUSxLQUFLLEVBQUwsR0FBUSxDQUF6QixJQUE4QixPQUFsRDtBQUNBLGlCQUFTLElBQUksS0FBSixDQUFVLE9BQVYsRUFBbUIsT0FBbkIsQ0FBVDs7QUFFQSxlQUFPLE1BQU0sQ0FBTixHQUFVLEtBQUssR0FBTCxDQUFTLFFBQVEsS0FBSyxFQUFMLEdBQVEsQ0FBekIsSUFBOEIsT0FBL0M7QUFDQSxlQUFPLE1BQU0sQ0FBTixHQUFVLEtBQUssR0FBTCxDQUFTLFFBQVEsS0FBSyxFQUFMLEdBQVEsQ0FBekIsSUFBOEIsT0FBL0M7QUFDQSxjQUFNLElBQUksS0FBSixDQUFVLElBQVYsRUFBZ0IsSUFBaEIsQ0FBTjs7QUFFQSxhQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLEdBQXhCLENBQTRCLEdBQTVCO0FBQ0EsYUFBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixNQUF4QixDQUErQixDQUEvQixFQUFrQyxNQUFsQztBQUNBLGFBQUssUUFBTCxDQUFjLFFBQWQsRUFBd0IsTUFBeEI7O0FBRUEsYUFBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixHQUF4QixDQUE0QixLQUE1QjtBQUNELE9BOUJELE1BOEJPO0FBQ0w7QUFDQSxlQUFPLENBQVA7QUFDQSxnQkFBUSxDQUFSOztBQUVBLGVBQU8sT0FBTyxLQUFkO0FBQ0EsWUFBSSxRQUFRLFNBQVosRUFBdUIsT0FBTyxTQUFQO0FBQ3hCOztBQUVELFlBQU0sSUFBTixDQUFXLElBQVg7O0FBRUEsYUFBTyxLQUFQO0FBQ0EsWUFBTSxJQUFOLENBQVcsSUFBWDtBQUNEOztBQUVELGFBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QjtBQUNyQixtQkFBYSxDQUFiOztBQUVBLFVBQU0sVUFBVSxNQUFNLE9BQU4sQ0FBYyxNQUE5QjtBQUNBLFVBQU0sUUFBUSxJQUFJLEtBQUosQ0FBVSxRQUFRLENBQWxCLEVBQXFCLFFBQVEsQ0FBN0IsQ0FBZDs7QUFFQSxXQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLEdBQXhCLENBQTRCLEtBQTVCO0FBQ0EsV0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixNQUF4QjtBQUNBLFdBQUssUUFBTCxDQUFjLFFBQWQsRUFBd0IsUUFBeEIsQ0FBaUMsQ0FBakM7QUFDQSxXQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLE1BQXhCLEdBQWlDLElBQWpDOztBQUVBLFdBQUssUUFBTCxDQUFjLFFBQWQsRUFBd0IsR0FBeEIsQ0FBNEIsS0FBNUI7QUFDQSxXQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLE1BQXhCO0FBQ0E7QUFDQSxXQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLE1BQXhCLEdBQWlDLEtBQWpDO0FBQ0Esa0JBQVksSUFBWjs7QUFFQSxVQUFJLGdCQUFnQixLQUFLLFFBQUwsQ0FBYyxRQUFkLEVBQXdCLFlBQXhCLEVBQXBCO0FBQ0EsVUFBSSxpQkFBaUIsY0FBYyxNQUFkLEdBQXVCLENBQTVDLEVBQStDO0FBQzdDLGFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxjQUFjLE1BQWxDLEVBQTBDLEdBQTFDLEVBQStDO0FBQzdDLGtCQUFRLEdBQVIsQ0FBWSxrQkFBWjtBQUNBLGNBQUksZUFBZSxjQUFjLENBQWQsQ0FBbkI7QUFDQSxjQUFJLFdBQVcsS0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixhQUF4QixDQUFzQyxhQUFhLEtBQW5ELENBQWY7QUFDQSxrQkFBUSxHQUFSLENBQVksUUFBWjtBQUNBLGNBQUksUUFBUSxTQUFTLEtBQVQsQ0FBZSxLQUFmLEdBQXVCLENBQW5DO0FBQ0Esa0JBQVEsR0FBUixDQUFZLEtBQVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxXQUFLLElBQUksS0FBSSxDQUFiLEVBQWdCLEtBQUksS0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixRQUF4QixDQUFpQyxNQUFyRCxFQUE2RCxJQUE3RCxFQUFrRTtBQUNoRSxZQUFJLFVBQVUsS0FBSyxRQUFMLENBQWMsUUFBZCxFQUF3QixRQUF4QixDQUFpQyxFQUFqQyxDQUFkO0FBQ0E7QUFDRDtBQUNGOztBQUVELFFBQU0sYUFBYTtBQUNqQixnQkFBVSxLQURPO0FBRWpCLGNBQVEsSUFGUztBQUdqQixZQUFNLElBSFc7QUFJakIsaUJBQVc7QUFKTSxLQUFuQjs7QUFPQSxhQUFTLEdBQVQsQ0FBYSxLQUFiLEVBQW9CO0FBQ2xCLFVBQU0sVUFBVSxNQUFNLE9BQU4sQ0FBYyxNQUE5QjtBQUFBLFVBQ0ksUUFBUSxJQUFJLEtBQUosQ0FBVSxRQUFRLENBQWxCLEVBQXFCLFFBQVEsQ0FBN0IsQ0FEWjtBQUFBLFVBRUksWUFBWSxNQUFNLE9BQU4sQ0FBYyxPQUFkLENBQXNCLEtBQXRCLEVBQTZCLFVBQTdCLENBRmhCOztBQUlBLFVBQUksU0FBSixFQUFlO0FBQ2Isa0JBQVUsSUFBVixDQUFlLFFBQWYsR0FBMEIsQ0FBQyxVQUFVLElBQVYsQ0FBZSxRQUExQztBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxRQUFJLGFBQWEsQ0FBakI7O0FBRUEsYUFBUyxNQUFULENBQWdCLEtBQWhCLEVBQXVCOztBQUVyQjtBQUNBO0FBQ0EsVUFBSSxDQUFDLENBQUMsU0FBTixFQUFpQjtBQUNmLFlBQUksYUFBYSxDQUFqQixFQUFvQjtBQUNsQjtBQUNBLGVBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxVQUFVLFFBQVYsQ0FBbUIsTUFBdkMsRUFBK0MsR0FBL0MsRUFBb0Q7QUFDbEQsZ0JBQU0sVUFBVSxVQUFVLFFBQVYsQ0FBbUIsQ0FBbkIsQ0FBaEI7QUFDQSxnQkFBTSxZQUFZLEVBQWxCO0FBQ0EsZ0JBQU0sV0FBVyxDQUFqQjtBQUNBLGdCQUFNLE1BQU0sS0FBSyxHQUFMLENBQVMsTUFBTSxJQUFOLEdBQWEsU0FBYixHQUF5QixDQUFsQyxDQUFaO0FBQ0EsZ0JBQU0sTUFBTSxLQUFLLEdBQUwsQ0FBUyxNQUFNLElBQU4sR0FBYSxTQUFiLEdBQXlCLENBQWxDLENBQVo7QUFDQSxvQkFBUSxLQUFSLENBQWMsQ0FBZCxJQUFvQixNQUFNLFFBQVAsR0FBbUIsVUFBdEM7QUFDQSxvQkFBUSxLQUFSLENBQWMsQ0FBZCxJQUFvQixNQUFNLFFBQVAsR0FBbUIsVUFBdEM7QUFDQTtBQUNBLDBCQUFjLEtBQWQ7QUFDRDtBQUNGO0FBQ0YsT0FmRCxNQWVPO0FBQ0w7QUFDRDtBQUNGOztBQUVEOztBQUVBLFlBQVEsTUFBUixHQUNHLEVBREgsQ0FDTSxVQUROLEVBQ2tCLFFBRGxCLEVBRUcsRUFGSCxDQUVNLFNBRk4sRUFFaUIsT0FGakIsRUFHRyxFQUhILENBR00sUUFITixFQUdnQixNQUhoQixFQUlHLEVBSkgsQ0FJTSxLQUpOLEVBSWEsR0FKYjs7QUFNQSxZQUFRLElBQVIsQ0FBYSxRQUFiLEVBQXVCLEdBQXZCLENBQTJCLEtBQTNCLEVBQWtDLEdBQWxDLENBQXNDLEVBQUUsV0FBVyxPQUFPLGFBQXBCLEVBQXRDO0FBQ0Q7O0FBRUQsV0FBUyxVQUFULEdBQXNCO0FBQ3BCLFlBQVEsR0FBUixDQUFZLGFBQVo7O0FBRUEsVUFBTSxPQUFOLENBQWMsV0FBZCxDQUEwQixjQUExQjtBQUNEOztBQUVELFdBQVMsV0FBVCxHQUF1QjtBQUNyQixZQUFRLEdBQVIsQ0FBWSxjQUFaO0FBQ0E7QUFDRDs7QUFFRCxXQUFTLFdBQVQsR0FBdUI7QUFDckIsWUFBUSxHQUFSLENBQVksY0FBWjtBQUNEOztBQUVELFdBQVMsV0FBVCxHQUF1QjtBQUNyQixZQUFRLEdBQVIsQ0FBWSxjQUFaO0FBQ0Q7O0FBRUQsV0FBUyxZQUFULEdBQXdCO0FBQ3RCLFlBQVEsR0FBUixDQUFZLGVBQVo7QUFDRDs7QUFFRCxXQUFTLE9BQVQsR0FBbUI7QUFDakIsTUFBRSxxQkFBRixFQUF5QixFQUF6QixDQUE0QixpQkFBNUIsRUFBK0MsVUFBL0M7QUFDRDs7QUFFRCxXQUFTLFFBQVQsR0FBb0I7QUFDbEIsTUFBRSxzQkFBRixFQUEwQixFQUExQixDQUE2QixPQUE3QixFQUFzQyxXQUF0QztBQUNEO0FBQ0QsV0FBUyxRQUFULEdBQW9CO0FBQ2xCLE1BQUUsc0JBQUYsRUFBMEIsRUFBMUIsQ0FBNkIsT0FBN0IsRUFBc0MsV0FBdEM7QUFDRDtBQUNELFdBQVMsUUFBVCxHQUFvQjtBQUNsQixNQUFFLHFCQUFGLEVBQXlCLEVBQXpCLENBQTRCLE9BQTVCLEVBQXFDLFdBQXJDO0FBQ0Q7QUFDRCxXQUFTLFNBQVQsR0FBcUI7QUFDbkIsTUFBRSxzQkFBRixFQUEwQixFQUExQixDQUE2QixPQUE3QixFQUFzQyxZQUF0QztBQUNEOztBQUVELFdBQVMsSUFBVCxHQUFnQjtBQUNkO0FBQ0Q7O0FBRUQ7QUFDRCxDQTVVRDs7Ozs7Ozs7UUNWZ0IsRyxHQUFBLEc7UUFLQSxHLEdBQUEsRztRQUtBLEssR0FBQSxLO0FBWGhCO0FBQ08sU0FBUyxHQUFULENBQWEsT0FBYixFQUFzQjtBQUMzQixTQUFPLFVBQVUsS0FBSyxFQUFmLEdBQW9CLEdBQTNCO0FBQ0Q7O0FBRUQ7QUFDTyxTQUFTLEdBQVQsQ0FBYSxPQUFiLEVBQXNCO0FBQzNCLFNBQU8sVUFBVSxHQUFWLEdBQWdCLEtBQUssRUFBNUI7QUFDRDs7QUFHTSxTQUFTLEtBQVQsQ0FBZSxFQUFmLEVBQW1CLEVBQW5CLEVBQXVCO0FBQzVCLFNBQU8sS0FBSyxJQUFMLENBQVUsS0FBSyxHQUFMLENBQVMsR0FBRyxDQUFILEdBQU8sR0FBRyxDQUFuQixFQUFzQixDQUF0QixJQUEyQixLQUFLLEdBQUwsQ0FBUyxHQUFHLENBQUgsR0FBTyxHQUFHLENBQW5CLEVBQXNCLENBQXRCLENBQXJDLENBQVAsQ0FENEIsQ0FDMkM7QUFDeEUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwid2luZG93LmthbiA9IHdpbmRvdy5rYW4gfHwge1xuICBwYWxldHRlOiBbXCIjMjAxNzFDXCIsIFwiIzFFMkE0M1wiLCBcIiMyODM3N0RcIiwgXCIjMzUyNzQ3XCIsIFwiI0YyODVBNVwiLCBcIiNDQTJFMjZcIiwgXCIjQjg0NTI2XCIsIFwiI0RBNkMyNlwiLCBcIiM0NTMxMjFcIiwgXCIjOTE2QTQ3XCIsIFwiI0VFQjY0MVwiLCBcIiNGNkVCMTZcIiwgXCIjN0Y3RDMxXCIsIFwiIzZFQUQ3OVwiLCBcIiMyQTQ2MjFcIiwgXCIjRjRFQUUwXCJdLFxuICBjdXJyZW50Q29sb3I6ICcjMjAxNzFDJyxcbiAgbnVtUGF0aHM6IDEwLFxuICBwYXRoczogW10sXG59O1xuXG5wYXBlci5pbnN0YWxsKHdpbmRvdyk7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gIGxldCBNT1ZFUyA9IFtdOyAvLyBzdG9yZSBnbG9iYWwgbW92ZXMgbGlzdFxuICAvLyBtb3ZlcyA9IFtcbiAgLy8gICB7XG4gIC8vICAgICAndHlwZSc6ICdjb2xvckNoYW5nZScsXG4gIC8vICAgICAnb2xkJzogJyMyMDE3MUMnLFxuICAvLyAgICAgJ25ldyc6ICcjRjI4NUE1J1xuICAvLyAgIH0sXG4gIC8vICAge1xuICAvLyAgICAgJ3R5cGUnOiAnbmV3UGF0aCcsXG4gIC8vICAgICAncmVmJzogJz8/PycgLy8gdXVpZD8gZG9tIHJlZmVyZW5jZT9cbiAgLy8gICB9LFxuICAvLyAgIHtcbiAgLy8gICAgICd0eXBlJzogJ3BhdGhUcmFuc2Zvcm0nLFxuICAvLyAgICAgJ3JlZic6ICc/Pz8nLCAvLyB1dWlkPyBkb20gcmVmZXJlbmNlP1xuICAvLyAgICAgJ29sZCc6ICdyb3RhdGUoOTBkZWcpc2NhbGUoMS41KScsIC8vID8/P1xuICAvLyAgICAgJ25ldyc6ICdyb3RhdGUoMTIwZGVnKXNjYWxlKC0wLjUpJyAvLyA/Pz9cbiAgLy8gICB9LFxuICAvLyAgIC8vIG90aGVycz9cbiAgLy8gXVxuXG4gIGNvbnN0ICR3aW5kb3cgPSAkKHdpbmRvdyk7XG4gIGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuICBjb25zdCAkY2FudmFzID0gJCgnY2FudmFzI21haW5DYW52YXMnKTtcblxuICBmdW5jdGlvbiBpbml0Q29udHJvbFBhbmVsKCkge1xuICAgIGluaXRDb2xvclBhbGV0dGUoKTtcbiAgICBpbml0Q2FudmFzRHJhdygpO1xuICAgIGluaXROZXcoKTtcbiAgICBpbml0VW5kbygpO1xuICAgIGluaXRQbGF5KCk7XG4gICAgaW5pdFRpcHMoKTtcbiAgICBpbml0U2hhcmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb2xvclBhbGV0dGUoKSB7XG4gICAgY29uc3QgJHBhbGV0dGVXcmFwID0gJCgndWwucGFsZXR0ZS1jb2xvcnMnKTtcbiAgICBjb25zdCAkcGFsZXR0ZUNvbG9ycyA9ICRwYWxldHRlV3JhcC5maW5kKCdsaScpO1xuICAgIGNvbnN0IHBhbGV0dGVDb2xvclNpemUgPSAyMDtcbiAgICBjb25zdCBwYWxldHRlU2VsZWN0ZWRDb2xvclNpemUgPSAzMDtcbiAgICBjb25zdCBwYWxldHRlU2VsZWN0ZWRDbGFzcyA9ICdwYWxldHRlLXNlbGVjdGVkJztcblxuICAgIC8vIGhvb2sgdXAgY2xpY2tcbiAgICAgICRwYWxldHRlQ29sb3JzLm9uKCdjbGljayB0YXAgdG91Y2gnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgJHN2ZyA9ICQodGhpcykuZmluZCgnc3ZnLnBhbGV0dGUtY29sb3InKTtcblxuICAgICAgICAgIGlmICghJHN2Zy5oYXNDbGFzcyhwYWxldHRlU2VsZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgICAgICQoJy4nICsgcGFsZXR0ZVNlbGVjdGVkQ2xhc3MpXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhwYWxldHRlU2VsZWN0ZWRDbGFzcylcbiAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgcGFsZXR0ZUNvbG9yU2l6ZSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhbGV0dGVDb2xvclNpemUpXG4gICAgICAgICAgICAgIC5maW5kKCdyZWN0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ3J4JywgMClcbiAgICAgICAgICAgICAgLmF0dHIoJ3J5JywgMCk7XG5cbiAgICAgICAgICAgICRzdmcuYWRkQ2xhc3MocGFsZXR0ZVNlbGVjdGVkQ2xhc3MpXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhbGV0dGVTZWxlY3RlZENvbG9yU2l6ZSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhbGV0dGVTZWxlY3RlZENvbG9yU2l6ZSlcbiAgICAgICAgICAgICAgLmZpbmQoJ3JlY3QnKVxuICAgICAgICAgICAgICAuYXR0cigncngnLCBwYWxldHRlU2VsZWN0ZWRDb2xvclNpemUgLyAyKVxuICAgICAgICAgICAgICAuYXR0cigncnknLCBwYWxldHRlU2VsZWN0ZWRDb2xvclNpemUgLyAyKVxuXG4gICAgICAgICAgICB3aW5kb3cua2FuLmN1cnJlbnRDb2xvciA9ICRzdmcuZmluZCgncmVjdCcpLmF0dHIoJ2ZpbGwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENhbnZhc0RyYXcoKSB7XG5cbiAgICBwYXBlci5zZXR1cCgkY2FudmFzWzBdKTtcblxuICAgIGxldCBwYXRoO1xuICAgIGxldCBwYXN0O1xuICAgIGxldCBwYXN0cyA9IFtdO1xuICAgIGxldCBzaXplcztcbiAgICAvLyBsZXQgcGF0aHMgPSBnZXRGcmVzaFBhdGhzKHdpbmRvdy5rYW4ubnVtUGF0aHMpO1xuICAgIGxldCB0b3VjaCA9IGZhbHNlO1xuICAgIGxldCBsYXN0Q2hpbGQ7XG5cbiAgICBmdW5jdGlvbiBwYW5TdGFydChldmVudCkge1xuICAgICAgc2l6ZXMgPSBbXTtcblxuICAgICAgaWYgKCEoZXZlbnQuZ2VzdHVyZS5jaGFuZ2VkUG9pbnRlcnMgJiYgZXZlbnQuZ2VzdHVyZS5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoID4gMCkpIHJldHVybjtcbiAgICAgIGlmIChldmVudC5nZXN0dXJlLmNoYW5nZWRQb2ludGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdldmVudC5nZXN0dXJlLmNoYW5nZWRQb2ludGVycyA+IDEnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9pbnRlciA9IGV2ZW50Lmdlc3R1cmUuY2VudGVyO1xuICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpO1xuXG4gICAgICAvLyB0aGUgZmlyc3QgcGF0aCBpcyB3aGF0IGlzIGFjdHVhbGx5IGRyYXduLCB0aGUgc2Vjb25kIHBhdGgga2VlcHMgdHJhY2sgb2YgY2VudGVyIHBvaW50c1xuICAgICAgcGF0aCA9IG5ldyBDb21wb3VuZFBhdGgoe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBQYXRoKHtcbiAgICAgICAgICAgIG5hbWU6ICdib3VuZHMnXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFBhdGgoe1xuICAgICAgICAgICAgbmFtZTogJ21pZGRsZSdcbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgICBzdHJva2VDb2xvcjogd2luZG93Lmthbi5jdXJyZW50Q29sb3IsXG4gICAgICAgIGZpbGxDb2xvcjogd2luZG93Lmthbi5jdXJyZW50Q29sb3JcbiAgICAgIH0pO1xuXG4gICAgICBwYXRoLmNoaWxkcmVuWydib3VuZHMnXS5hZGQocG9pbnQpO1xuXG4gICAgICBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5hZGQocG9pbnQpO1xuICAgICAgcGF0aC5jaGlsZHJlblsnbWlkZGxlJ10udmlzaWJsZSA9IGZhbHNlOyAvLyBzZWNvbmQgcGF0aCBpcyBvbmx5IGZvciBpbnRlcm5hbCB1c2UsIGhpZGUgaXRcbiAgICB9XG5cbiAgICBjb25zdCB0aHJlc2hvbGQgPSAyMDtcbiAgICBjb25zdCBhbHBoYSA9IDAuMztcbiAgICBjb25zdCBtZW1vcnkgPSAxMDtcbiAgICBsZXQgY3VtU2l6ZSwgYXZnU2l6ZTtcbiAgICBmdW5jdGlvbiBwYW5Nb3ZlKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCBwb2ludGVyID0gZXZlbnQuZ2VzdHVyZS5jZW50ZXI7XG4gICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludChwb2ludGVyLngsIHBvaW50ZXIueSk7XG5cbiAgICAgIHdoaWxlIChzaXplcy5sZW5ndGggPiBtZW1vcnkpIHtcbiAgICAgICAgc2l6ZXMuc2hpZnQoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGJvdHRvbVgsIGJvdHRvbVksIGJvdHRvbSxcbiAgICAgICAgdG9wWCwgdG9wWSwgdG9wLFxuICAgICAgICBwMCwgcDEsXG4gICAgICAgIHN0ZXAsIGFuZ2xlLCBkaXN0LCBzaXplO1xuXG4gICAgICBpZiAoc2l6ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBub3QgdGhlIGZpcnN0IHBvaW50LCBzbyB3ZSBoYXZlIG90aGVycyB0byBjb21wYXJlIHRvXG4gICAgICAgIHAwID0gcGFzdDtcbiAgICAgICAgZGlzdCA9IHV0aWwuZGVsdGEocG9pbnQsIHAwKTtcbiAgICAgICAgc2l6ZSA9IGRpc3QgKiBhbHBoYTtcbiAgICAgICAgaWYgKHNpemUgPj0gdGhyZXNob2xkKSBzaXplID0gdGhyZXNob2xkO1xuXG4gICAgICAgIGN1bVNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNpemVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY3VtU2l6ZSArPSBzaXplc1tqXTtcbiAgICAgICAgfVxuICAgICAgICBhdmdTaXplID0gTWF0aC5yb3VuZCgoKGN1bVNpemUgLyBzaXplcy5sZW5ndGgpICsgc2l6ZSkgLyAyKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYXZnU2l6ZSk7XG5cbiAgICAgICAgYW5nbGUgPSBNYXRoLmF0YW4yKHBvaW50LnkgLSBwMC55LCBwb2ludC54IC0gcDAueCk7IC8vIHJhZFxuXG4gICAgICAgIC8vIFBvaW50KGJvdHRvbVgsIGJvdHRvbVkpIGlzIGJvdHRvbSwgUG9pbnQodG9wWCwgdG9wWSkgaXMgdG9wXG4gICAgICAgIGJvdHRvbVggPSBwb2ludC54ICsgTWF0aC5jb3MoYW5nbGUgKyBNYXRoLlBJLzIpICogYXZnU2l6ZTtcbiAgICAgICAgYm90dG9tWSA9IHBvaW50LnkgKyBNYXRoLnNpbihhbmdsZSArIE1hdGguUEkvMikgKiBhdmdTaXplO1xuICAgICAgICBib3R0b20gPSBuZXcgUG9pbnQoYm90dG9tWCwgYm90dG9tWSk7XG5cbiAgICAgICAgdG9wWCA9IHBvaW50LnggKyBNYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkvMikgKiBhdmdTaXplO1xuICAgICAgICB0b3BZID0gcG9pbnQueSArIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSS8yKSAqIGF2Z1NpemU7XG4gICAgICAgIHRvcCA9IG5ldyBQb2ludCh0b3BYLCB0b3BZKTtcblxuICAgICAgICBwYXRoLmNoaWxkcmVuWydib3VuZHMnXS5hZGQodG9wKTtcbiAgICAgICAgcGF0aC5jaGlsZHJlblsnYm91bmRzJ10uaW5zZXJ0KDAsIGJvdHRvbSk7XG4gICAgICAgIHBhdGguY2hpbGRyZW5bJ2JvdW5kcyddLnNtb290aCgpO1xuXG4gICAgICAgIHBhdGguY2hpbGRyZW5bJ21pZGRsZSddLmFkZChwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb24ndCBoYXZlIGFueXRoaW5nIHRvIGNvbXBhcmUgdG9cbiAgICAgICAgZGlzdCA9IDE7XG4gICAgICAgIGFuZ2xlID0gMDtcblxuICAgICAgICBzaXplID0gZGlzdCAqIGFscGhhO1xuICAgICAgICBpZiAoc2l6ZSA+PSB0aHJlc2hvbGQpIHNpemUgPSB0aHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHBhcGVyLnZpZXcuZHJhdygpO1xuXG4gICAgICBwYXN0ID0gcG9pbnQ7XG4gICAgICBzaXplcy5wdXNoKHNpemUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhbkVuZChldmVudCkge1xuICAgICAgZWxhc3RpY2l0eSA9IDE7XG5cbiAgICAgIGNvbnN0IHBvaW50ZXIgPSBldmVudC5nZXN0dXJlLmNlbnRlcjtcbiAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcblxuICAgICAgcGF0aC5jaGlsZHJlblsnYm91bmRzJ10uYWRkKHBvaW50KTtcbiAgICAgIHBhdGguY2hpbGRyZW5bJ2JvdW5kcyddLnNtb290aCgpO1xuICAgICAgcGF0aC5jaGlsZHJlblsnYm91bmRzJ10uc2ltcGxpZnkoMCk7XG4gICAgICBwYXRoLmNoaWxkcmVuWydib3VuZHMnXS5jbG9zZWQgPSB0cnVlO1xuXG4gICAgICBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5hZGQocG9pbnQpO1xuICAgICAgcGF0aC5jaGlsZHJlblsnbWlkZGxlJ10uc21vb3RoKCk7XG4gICAgICAvLyBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5zaW1wbGlmeSgwKTtcbiAgICAgIHBhdGguY2hpbGRyZW5bJ21pZGRsZSddLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgbGFzdENoaWxkID0gcGF0aDtcblxuICAgICAgbGV0IGludGVyc2VjdGlvbnMgPSBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5nZXRDcm9zc2luZ3MoKTtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb25zICYmIGludGVyc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGludGVyc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgIGxldCBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25zW2ldO1xuICAgICAgICAgIGxldCBsb2NhdGlvbiA9IHBhdGguY2hpbGRyZW5bJ21pZGRsZSddLmdldExvY2F0aW9uT2YoaW50ZXJzZWN0aW9uLnBvaW50KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbik7XG4gICAgICAgICAgbGV0IGluZGV4ID0gbG9jYXRpb24uY3VydmUuaW5kZXggKyAxO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGluZGV4KTtcbiAgICAgICAgICAvLyBmb3IgKGxldCBqID0gaW5kZXg7IGogPCBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5zZWdtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIC8vICAgY29uc29sZS5sb2cocGF0aC5jaGlsZHJlblsnbWlkZGxlJ10uc2VnbWVudHNbal0ucG9pbnQpO1xuICAgICAgICAgIC8vICAgbmV3IFBhdGguQ2lyY2xlKHtcbiAgICAgICAgICAvLyAgICAgY2VudGVyOiBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5zZWdtZW50c1tqXS5wb2ludCxcbiAgICAgICAgICAvLyAgICAgcmFkaXVzOiAzLFxuICAgICAgICAgIC8vICAgICBmaWxsQ29sb3I6ICdwaW5rJ1xuICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIC8vIGxldCBsb2NhdGlvblBhdGggPSBuZXcgUGF0aCh7XG4gICAgICAgICAgLy8gICBzdHJva2VDb2xvcjogd2luZG93Lmthbi5jdXJyZW50Q29sb3IsXG4gICAgICAgICAgLy8gICBmaWxsQ29sb3I6IHdpbmRvdy5rYW4uY3VycmVudENvbG9yXG4gICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgLy8gZm9yIChsZXQgaiA9IDA7IGogPCBsb2NhdGlvbi5wYXRoLnNlZ21lbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgLy8gICBsb2NhdGlvblBhdGguYWRkKGxvY2F0aW9uLnBhdGguc2VnbWVudHNbal0ucG9pbnQpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyBsb2NhdGlvblBhdGguY2xvc2VkID0gZmFsc2U7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICAvLyBjb25zdCBjaXJjbGUgPSBuZXcgUGF0aC5DaXJjbGUoe1xuICAgICAgICAgIC8vICAgICBjZW50ZXI6IGludGVyc2VjdGlvbi5wb2ludCxcbiAgICAgICAgICAvLyAgICAgcmFkaXVzOiAzLFxuICAgICAgICAgIC8vICAgICBmaWxsQ29sb3I6ICdwaW5rJ1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKHBhdGguY2hpbGRyZW5bJ21pZGRsZSddKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5jaGlsZHJlblsnbWlkZGxlJ10uc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNlZ21lbnQgPSBwYXRoLmNoaWxkcmVuWydtaWRkbGUnXS5zZWdtZW50c1tpXTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2VnbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaGl0T3B0aW9ucyA9IHtcbiAgICAgIHNlZ21lbnRzOiBmYWxzZSxcbiAgICAgIHN0cm9rZTogdHJ1ZSxcbiAgICAgIGZpbGw6IHRydWUsXG4gICAgICB0b2xlcmFuY2U6IDVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdGFwKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludGVyID0gZXZlbnQuZ2VzdHVyZS5jZW50ZXIsXG4gICAgICAgICAgcG9pbnQgPSBuZXcgUG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpLFxuICAgICAgICAgIGhpdFJlc3VsdCA9IHBhcGVyLnByb2plY3QuaGl0VGVzdChwb2ludCwgaGl0T3B0aW9ucyk7XG5cbiAgICAgIGlmIChoaXRSZXN1bHQpIHtcbiAgICAgICAgaGl0UmVzdWx0Lml0ZW0uc2VsZWN0ZWQgPSAhaGl0UmVzdWx0Lml0ZW0uc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdmFyIGFuaW1hdGlvbklkO1xuICAgIGxldCBlbGFzdGljaXR5ID0gMDtcblxuICAgIGZ1bmN0aW9uIGppZ2dsZShldmVudCkge1xuXG4gICAgICAvLyBjb25zb2xlLmxvZyhwYXBlci5wcm9qZWN0LmFjdGl2ZUxheWVyLmZpcnN0Q2hpbGQpO1xuICAgICAgLy8gcGFwZXIucHJvamVjdC5hY3RpdmVMYXllci5maXJzdENoaWxkLnJvdGF0ZSgzKTtcbiAgICAgIGlmICghIWxhc3RDaGlsZCkge1xuICAgICAgICBpZiAoZWxhc3RpY2l0eSA+IDApIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhsYXN0Q2hpbGQpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdENoaWxkLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gbGFzdENoaWxkLnNlZ21lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgdGltZUNvbnN0ID0gMTY7XG4gICAgICAgICAgICBjb25zdCBkaXZDb25zdCA9IDI7XG4gICAgICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyhldmVudC50aW1lICogdGltZUNvbnN0ICsgaSk7XG4gICAgICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihldmVudC50aW1lICogdGltZUNvbnN0ICsgaSk7XG4gICAgICAgICAgICBzZWdtZW50LnBvaW50LnggKz0gKGNvcyAvIGRpdkNvbnN0KSAqIGVsYXN0aWNpdHk7XG4gICAgICAgICAgICBzZWdtZW50LnBvaW50LnkgKz0gKHNpbiAvIGRpdkNvbnN0KSAqIGVsYXN0aWNpdHk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb3MsIHNpbiwgZWxhc3RpY2l0eSk7XG4gICAgICAgICAgICBlbGFzdGljaXR5IC09IDAuMDAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ25vIGNoaWxkcmVuIHlldCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcGVyLnZpZXcub25GcmFtZSA9IGppZ2dsZTtcblxuICAgICRjYW52YXMuaGFtbWVyKClcbiAgICAgIC5vbigncGFuc3RhcnQnLCBwYW5TdGFydClcbiAgICAgIC5vbigncGFubW92ZScsIHBhbk1vdmUpXG4gICAgICAub24oJ3BhbmVuZCcsIHBhbkVuZClcbiAgICAgIC5vbigndGFwJywgdGFwKTtcblxuICAgICRjYW52YXMuZGF0YSgnaGFtbWVyJykuZ2V0KCdwYW4nKS5zZXQoeyBkaXJlY3Rpb246IEhhbW1lci5ESVJFQ1RJT05fQUxMIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UHJlc3NlZCgpIHtcbiAgICBjb25zb2xlLmxvZygnbmV3IHByZXNzZWQnKTtcblxuICAgIHBhcGVyLnByb2plY3QuYWN0aXZlTGF5ZXIucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZG9QcmVzc2VkKCkge1xuICAgIGNvbnNvbGUubG9nKCd1bmRvIHByZXNzZWQnKTtcbiAgICAvLyBkMy5zZWxlY3RBbGwoJ3N2Zy5tYWluIHBhdGg6bGFzdC1jaGlsZCcpLnJlbW92ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheVByZXNzZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ3BsYXkgcHJlc3NlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlwc1ByZXNzZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ3RpcHMgcHJlc3NlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hhcmVQcmVzc2VkKCkge1xuICAgIGNvbnNvbGUubG9nKCdzaGFyZSBwcmVzc2VkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TmV3KCkge1xuICAgICQoJy5tYWluLWNvbnRyb2xzIC5uZXcnKS5vbignY2xpY2sgdGFwIHRvdWNoJywgbmV3UHJlc3NlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0VW5kbygpIHtcbiAgICAkKCcubWFpbi1jb250cm9scyAudW5kbycpLm9uKCdjbGljaycsIHVuZG9QcmVzc2VkKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0UGxheSgpIHtcbiAgICAkKCcubWFpbi1jb250cm9scyAucGxheScpLm9uKCdjbGljaycsIHBsYXlQcmVzc2VkKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0VGlwcygpIHtcbiAgICAkKCcuYXV4LWNvbnRyb2xzIC50aXBzJykub24oJ2NsaWNrJywgdGlwc1ByZXNzZWQpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXRTaGFyZSgpIHtcbiAgICAkKCcuYXV4LWNvbnRyb2xzIC5zaGFyZScpLm9uKCdjbGljaycsIHNoYXJlUHJlc3NlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWluKCkge1xuICAgIGluaXRDb250cm9sUGFuZWwoKTtcbiAgfVxuXG4gIG1haW4oKTtcbn0pO1xuIiwiLy8gQ29udmVydHMgZnJvbSBkZWdyZWVzIHRvIHJhZGlhbnMuXG5leHBvcnQgZnVuY3Rpb24gcmFkKGRlZ3JlZXMpIHtcbiAgcmV0dXJuIGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwO1xufTtcblxuLy8gQ29udmVydHMgZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMuXG5leHBvcnQgZnVuY3Rpb24gZGVnKHJhZGlhbnMpIHtcbiAgcmV0dXJuIHJhZGlhbnMgKiAxODAgLyBNYXRoLlBJO1xufTtcblxuXG5leHBvcnQgZnVuY3Rpb24gZGVsdGEocDEsIHAyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDEueCAtIHAyLngsIDIpICsgTWF0aC5wb3cocDEueSAtIHAyLnksIDIpKTsgLy8gcHl0aGFnb3JlYW4hXG59XG4iXX0=\n"]}