{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","util","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","project","activeLayer","removeChildren","sizes","changedPointers","console","log","pointer","center","point","Point","x","y","bounds","Path","strokeColor","fillColor","name","middle","strokeWidth","add","panMove","preventDefault","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","Math","max","min","cumSize","j","avgSize","round","atan2","cos","PI","sin","insert","view","draw","push","panEnd","elasticity","group","Group","flatten","smooth","simplify","closed","selected","intersections","getCrossings","pathCopy","copyContent","visible","dividedPath","resolveCrossings","enclosedLoops","findInteriorCurves","Color","data","interior","transparent","addChild","remove","color","lastChild","doubleTap","hitResult","hitTest","hitOptions","item","parent","setup","$canvas","segments","stroke","fill","tolerance","hammerManager","Hammer","Manager","Tap","taps","Pan","direction","DIRECTION_ALL","Pinch","get","recognizeWith","requireFailure","newPressed","undoPressed","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","deg","radians","p1","p2","sqrt","pow","path","interiorCurves","children","child","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var middle = void 0,\n        bounds = void 0;\n    var past = void 0;\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      paper.project.activeLayer.removeChildren(); // REMOVE\n\n      sizes = [];\n\n      if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n      if (event.changedPointers.length > 1) {\n        console.log('event.changedPointers > 1');\n      }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      bounds = new Path({\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor,\n        name: 'bounds'\n      });\n\n      middle = new Path({\n        strokeColor: window.kan.currentColor,\n        name: 'middle',\n        strokeWidth: 1\n      });\n\n      bounds.add(point);\n      middle.add(point);\n    }\n\n    var min = 0;\n    var max = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        bounds.add(top);\n        bounds.insert(0, bottom);\n        // bounds.smooth();\n\n        middle.add(point);\n        // middle.smooth();\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      var group = new Group([bounds, middle]);\n\n      bounds.add(point);\n      bounds.flatten(4);\n      bounds.smooth();\n      bounds.simplify();\n      bounds.closed = true;\n\n      middle.add(point);\n      middle.flatten(4);\n      middle.smooth();\n      middle.simplify();\n      middle.selected = true;\n\n      var intersections = middle.getCrossings();\n      if (intersections.length > 0) {\n        // we create a copy of the path because resolveCrossings() splits source path\n        var pathCopy = new Path();\n        pathCopy.copyContent(middle);\n        pathCopy.visible = false;\n\n        var dividedPath = pathCopy.resolveCrossings();\n        dividedPath.visible = false;\n\n        var enclosedLoops = util.findInteriorCurves(dividedPath);\n\n        if (enclosedLoops) {\n          for (var i = 0; i < enclosedLoops.length; i++) {\n            enclosedLoops[i].visible = true;\n            enclosedLoops[i].closed = true;\n            enclosedLoops[i].fillColor = new Color(0, 0); // transparent\n            enclosedLoops[i].data.interior = true;\n            enclosedLoops[i].data.transparent = true;\n            group.addChild(enclosedLoops[i]);\n          }\n        }\n        pathCopy.remove();\n      } else {\n        console.log('no intersections');\n      }\n\n      group.data.color = bounds.fillColor;\n      lastChild = group;\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function doubleTap(event) {\n      var pointer = event.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions),\n          transparent = new Color(0, 0);\n\n      if (hitResult) {\n        var item = hitResult.item;\n        var parent = item.parent;\n\n        if (item.data.interior) {\n          console.log('interior');\n          item.data.transparent = !item.data.transparent;\n\n          if (item.data.transparent) {\n            item.fillColor = transparent;\n            item.strokeColor = transparent;\n          } else {\n            item.fillColor = parent.data.color;\n            item.strokeColor = parent.data.color;\n          }\n        } else {\n          console.log('not interior');\n        }\n      } else {\n        console.log('hit no item');\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function jiggle(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    var hammerManager = new Hammer.Manager($canvas[0]);\n\n    hammerManager.add(new Hammer.Tap({ event: 'singletap' }));\n    hammerManager.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\n    hammerManager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n    hammerManager.add(new Hammer.Pinch());\n\n    hammerManager.get('doubletap').recognizeWith('singletap');\n    hammerManager.get('singletap').requireFailure('doubletap');\n\n    hammerManager.on('singletap', function () {\n      console.log('singleTap');\n    });\n    hammerManager.on('doubletap', doubleTap);\n\n    hammerManager.on('panstart', panStart);\n    hammerManager.on('panmove', panMove);\n    hammerManager.on('panend', panEnd);\n    // hammerManager.on('panstart', function(ev) {\n    //   console.log(ev)\n    // });\n    // hammerManager.on('panmove', function(ev) {\n    //   console.log(ev)\n    // });\n    // hammerManager.on('panend', function(ev) {\n    //   console.log(ev)\n    // });\n    //\n    // hammerManager.on('pinch', function(ev) {\n    //   console.log(ev);\n    // });\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\nexports.findInteriorCurves = findInteriorCurves;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n// returns an array of the interior curves of a given compound path\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n\n  for (var i = 0; i < path.children.length; i++) {\n    var child = path.children[i];\n\n    if (child.closed) {\n      interiorCurves.push(new Path(child.segments));\n    }\n  }\n\n  path.remove();\n  return interiorCurves;\n}\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}