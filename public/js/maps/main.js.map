{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","util","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","project","activeLayer","removeChildren","sizes","gesture","changedPointers","console","log","pointer","center","point","Point","x","y","path","CompoundPath","children","Path","name","strokeColor","fillColor","add","visible","panMove","preventDefault","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","threshold","cumSize","j","avgSize","Math","round","atan2","cos","PI","sin","insert","smooth","view","draw","push","panEnd","elasticity","group","Group","closed","simplify","lastChild","tap","hitResult","hitTest","hitOptions","item","id","selected","setup","$canvas","segments","stroke","fill","tolerance","hammer","data","get","set","direction","Hammer","DIRECTION_ALL","newPressed","undoPressed","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","deg","radians","p1","p2","sqrt","pow","findInteriorCurves","interiorCurves","child","interior","strokeBounds","isInside","remove","newPath","_i","unite","getInteriorPaths","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var path = void 0;\n    var past = void 0;\n    var pasts = [];\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      paper.project.activeLayer.removeChildren(); // REMOVE\n\n      sizes = [];\n\n      if (!(event.gesture.changedPointers && event.gesture.changedPointers.length > 0)) return;\n      if (event.gesture.changedPointers.length > 1) {\n        console.log('event.gesture.changedPointers > 1');\n      }\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      // the first path is what is actually drawn, the second path keeps track of center points\n      path = new CompoundPath({\n        children: [new Path({\n          name: 'bounds'\n        }), new Path({\n          name: 'middle'\n        })],\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor\n      });\n\n      path.children['bounds'].add(point);\n\n      path.children['middle'].add(point);\n      path.children['middle'].visible = false; // second path is only for internal use, hide it\n    }\n\n    var threshold = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        path.children['bounds'].add(top);\n        path.children['bounds'].insert(0, bottom);\n        path.children['bounds'].smooth();\n\n        path.children['middle'].add(point);\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      var group = new Group(path);\n\n      path.children['middle'].add(point);\n      path.children['middle'].smooth();\n      // path.children['middle'].simplify(0);\n      path.children['middle'].closed = false;\n      path.children['middle'].visible = false;\n\n      path.children['bounds'].add(point);\n      path.children['bounds'].smooth();\n      path.children['bounds'].simplify(0);\n      path.children['bounds'].closed = true;\n      // let intersections = path.children['bounds'].getCrossings();\n      // if (intersections.length > 0) {\n      //   path.children['bounds'].resolveCrossings(); // destroys path.children['bounds']\n      //   let enclosedLoops = util.findInteriorCurves(path);\n      //   console.log('enclosedLoops', enclosedLoops);\n      //   if (enclosedLoops) {\n      //     for (let i = 0; i < enclosedLoops.length; i++) {\n      //       console.log('enclosedLoops[i]', enclosedLoops[i]);\n      //       group.addChild(enclosedLoops[i]);\n      //     }\n      //   }\n      // } else {\n      //   console.log('no intersections');\n      // }\n      //\n      // console.log('group', group);\n\n      lastChild = group;\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function tap(event) {\n      var pointer = event.gesture.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions);\n\n      if (hitResult) {\n        var item = hitResult.item;\n\n        console.log(item.id, item);\n        item.selected = !item.selected;\n\n        // item.visible = true;\n        // console.log(item);\n        // console.log('fillColor before: ', item.fillColor);\n        // item.fillColor = item.strokeColor;\n        // console.log('fillColor after: ', item.fillColor);\n        // if (item.hasFill()) {\n        //   console.log('item has fill');\n        // } else {\n        //   console.log('no fill');\n        // }\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function jiggle(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    $canvas.hammer().on('panstart', panStart).on('panmove', panMove).on('panend', panEnd).on('tap', tap);\n\n    $canvas.data('hammer').get('pan').set({ direction: Hammer.DIRECTION_ALL });\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\nexports.findInteriorCurves = findInteriorCurves;\nexports.getInteriorPaths = getInteriorPaths;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n\n  for (var i = 0; i < path.children.length; i++) {\n    var child = path.children[i];\n\n    if (!child.closed) {\n      child.remove();\n    } else {\n      var bounds = child.strokeBounds;\n      var interior = false;\n\n      // iterate through all other children to see if this child is entirely within another. if so, it is an interior path\n      for (var j = 0; j < path.children.length; j++) {\n        // don't test against itself\n        if (j !== i) {\n          if (child.isInside(path.children[j].strokeBounds)) {\n            interior = true;\n          }\n        }\n      }\n\n      if (interior) {\n        interiorCurves.push(new Path(child.segments));\n      }\n    }\n  }\n\n  var newPath = new Path({\n    fillColor: 'pink',\n    strokeColor: 'pink'\n  });\n  for (var _i = 0; _i < path.children.length; _i++) {\n    // console.log(path.children[i]);\n    console.log(newPath.unite(path.children[_i]));\n  }\n\n  path.remove();\n\n  console.log('newPath', newPath);\n  console.log('path', path);\n\n  if (interiorCurves.length > 0) {\n    return interiorCurves;\n  } else {\n    return null;\n  }\n}\n\nfunction getInteriorPaths(path) {\n  // let intersections = path.getCrossings();\n  // for (let i = 0; i < intersections.length; i++) {\n  //   let intersection = intersections[i];\n  //   intersection.path.resolveCrossings();\n  // }\n  // path.visible = false;\n  // let secondaryPath = path.clone();\n  // secondaryPath.visible = false;\n  // secondaryPath.resolveCrossings();\n  // let oldPath = path;\n  // console.log(oldPath);\n  // path.resolveCrossings();\n  // console.log(path);\n  // console.log(path == oldPath);\n  return null;\n}\n\n// export function getInteriorPaths(path) {\n//   if (!path || !path.segments || !(path.segments.length > 0)) return null;\n//\n//   let intersections = path.getCrossings();\n//   // console.log('length', intersections.length);\n//   if (intersections && intersections.length > 0) {\n//     for (let i = 0; i < intersections.length; i++) {\n//       console.log('----------------');\n//       let intersection = intersections[i];\n//       let location = path.getLocationOf(intersection.point);\n//       console.log('location', location.toString());\n//       let index = location.curve.index;\n//       console.log('index', index.toString());\n//       let lastAngle;\n//       var intersectionPath;\n//       let interior = false;\n//       console.log('path', path.toString());\n//       console.log('intersection', intersection.toString());\n//       for (let j = 0; j < path.segments.length; j++) {\n//         let point = path.segments[j].point;\n//         let angle = intersection.point.getDirectedAngle(point);\n//\n//         if (lastAngle) {\n//           // ignore the first point, since there's no previous angle to compare to\n//           if ((angle * lastAngle) < 0) {\n//             console.log('cross');\n//\n//             // product of angle and lastAngle will only be negative if one is positive and the other is negative\n//             if (!interior) {\n//               interior = true;\n//               var intersectionPath = new Path({\n//                 strokeColor: window.kan.currentColor,\n//                 fillColor: window.kan.currentColor\n//               });\n//               intersectionPath.add(intersection.point);\n//             } else {\n//               interior = false;\n//               // intersectionPath.add(intersection.point);\n//               // intersectionPath.closed = false;\n//               intersectionPath.smooth();\n//               intersectionPath.selected = true;\n//               // break;\n//               // break;\n//             }\n//           }\n//         }\n//\n//         if (interior) {\n//           intersectionPath.add(point);\n//           new Path.Circle({\n//             center: point,\n//             radius: 3,\n//             fillColor: 'pink'\n//           });\n//         }\n//\n//         lastAngle = angle;\n//         // if (closest) {\n//         //   if (distance < closest) {\n//         //     closest = distance;\n//         //   }\n//         //   // console.log(distance);\n//         //   // if (distance > lastDistance) {\n//         //   //   console.log('colder');\n//         //   // } else if (distance < lastDistance){\n//         //   //   console.log('warmer');\n//         //   // } else {\n//         //   //   console.log('same');\n//         //   // }\n//         // } else {\n//         //   closest = distance;\n//         //   // first point, start new path\n//         //   // let intersectionPath = new Path({\n//         //   //   strokeColor: window.kan.currentColor,\n//         //   //   fillColor: window.kan.currentColor\n//         //   // });\n//         //   // intersectionPath.add(intersection.point);\n//         //\n//         // }\n//\n//         // new Path.Circle({\n//         //   center: point,\n//         //   radius: 3,\n//         //   fillColor: 'pink'\n//         // });\n//       }\n//     }\n//   } else {\n//     return null;\n//   }\n// }\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}