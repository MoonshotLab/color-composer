{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","runAnimations","pop","canvasId","palette","colors","colorNames","#20171C","#1E2A43","#28377D","#352747","#CA2E26","#9A2A1F","#DA6C26","#453121","#916A47","#DAAD27","#7F7D31","#2B5E2E","gradients","pops","colorSize","selectedColorSize","contextualTuts","type","copy","2","window","document","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","hasOwnProperty","deprecate","method","name","message","deprecationMessage","stack","replace","log","console","warn","apply","this","arguments","inherit","child","base","properties","childP","baseP","prototype","Object","create","constructor","_super","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","handler","splitStr","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","value","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","defaults","id","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","item","add","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","define","amd","global","HowlerGlobal","Howler","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","match","isOldOpera","parseInt","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","createBufferSource","buffer","connect","destination","noteOn","onended","disconnect","suspend","_sounds","_paused","_suspendTimer","then","_resumeAfterSuspend","_autoResume","resume","_emit","Howl","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_duration","_state","_endTimers","_queue","_onend","onend","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","action","play","load","url","exec","location","protocol","Sound","loadBuffer","internal","num","_ended","_id","_inactiveSound","seek","max","_seek","duration","_start","_stop","playWebAudio","_refreshBuffer","setValueAtTime","currentTime","_playStart","bufferSource","noteGrainOn","Infinity","bind","isRunning","once","_clearTimer","playHtml5","playbackRate","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","fade","from","to","len","diff","dir","steps","stepLen","ceil","linearRampToValueAtTime","_interval","setInterval","soundId","min","clearInterval","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","sounds","_errorFn","_loadFn","remCache","cache","msg","_loadQueue","task","shift","_drain","limit","cnt","_panner","howl","_parent","random","createGain","createGainNode","paused","_errorListener","_loadListener","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_pos","_orientation","stereo","pan","pos","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_panningModel","_refDistance","_rolloffFactor","pa","panner","createPanner","getPathColorName","path","hexColor","originalColor","getColorName","color","config","getRandomPop","floor","getIndexedPopColor","defineProperty","transparent","Color","./../../config","root","factory","ShapeDetector","deg2Rad","d","Stroke","points","processStroke","patterns","_nbSamplePoints","nbSamplePoints","learn","_squareSize","_phi","_angleRange","_anglePrecision","_halfDiagonal","_origin","resample","setCentroid","rotateBy","indicativeAngle","scaleToSquare","translateToOrigin","localDistance","q","strokeLength","newPoints","point","cos","sin","c","box","minX","maxX","minY","maxY","width","height","distanceAtBestAngle","pattern","x1","f1","distanceAtAngle","x2","f2","strokePoints","patternPoints","defaultShapes","spot","patternName","score","stroke","bestDistance","bestPattern","bestScore","6","resetWindow","kan","currentColor","composition","compositionInterval","compositionTimeout","soundTimeouts","lastEvent","interaction","moves","pinching","pinchedGroup","pinchedTut","pathData","shapePath","prevAngle","sides","side","corners","lastScale","lastRotation","originalPosition","tutorialCompletion","fill","pinch","swipe","inactivityTimeout","playPromptTimeout","userHasDrawnFirstShape","firstTimePlaying","shapesSinceTut","refreshCheckInterval","sha","scheduledOverlay","continueCountdownInterval","ui","overlays","timing","util","$","run","setSha","reload","./overlays","./timing","./touch","./ui","./util","./video","7","openOverlay","overlayName","allOverlays","includes","panning","preventInactivityTimeout","closeAndResetOverlays","tutorial","hideContextualTuts","$body","addClass","overlayActiveClass","tapEvent","openIntroOverlay","anyShapesOnCanvas","openPlayPromptOverlay","playPromptDelay","openSharePromptOverlay","openContinueOverlay","openTipsOverlay","openShareOverlay","resetContinueCountdown","html","continueInactivityDelay","$countdownNumWrap","video","enterTutorialMode","activateTipsCards","cardNavNext","$old","$new","next","$cardItems","first","$next","$third","slide","removeClass","updateCardCounter","cardsCount","cardInteractions","timeOfLastInteraction","closest","resetTips","$sharePhone","overlayOpenClasses","current","total","$footer","phoneNumberInputs","mask","$shareKeypad","phoneNumber","toString","masked","randomCardGraphics","el","attr","initTips","initShare","hammerCanvas","$cardsWrap","map","overlay","./tutorial","8","destroyGroupPops","group","groupPopsBefore","getGroupPops","groupPopsAfter","fillInGroupPopsById","groupId","paper","project","getItem","className","children","groupChild","toggleFill","interior","fillColor","strokeColor","cleanUpGroup","acceptableNames","updatePops","freshGroups","getFreshGroups","popCandidates","getPopCandidates","getAllPops","reverse","freshGroup","freshOuter","_namedChildren","bringToFront","otherGroup","otherGroupOuter","thisPop","intersect","popColor","popGroup","visible","closed","addChild","fresh","getOutlineGroup","truedShape","outerPath","Path","middlePath","sizes","firstTop","firstBottom","lastTop","lastBottom","Group","firstSegment","size","cumSize","avgSize","prevPoint","getPointAt","nextPoint","Point","topX","topY","top","bottomX","bottomY","bottom","insert","centerTop","centerBottom","smooth","returnGroup","getTruedShape","pathClone","clone","completedPath","getCompletedPath","truedPath","strokeWidth","reduce","simplify","intersections","getIntersections","trimmedPath","getTrimmedPath","extendedPath","getExtendedPath","_intersections","_trimmedPath","replaceWith","getBruteExtendedPath","_intersections2","_trimmedPath2","getShapePrediction","prediction","shapeJSON","exportJSON","shapeData","processShapeData","shapePrediction","detector","getIntegerPoint","stringifyPoint","parsePoint","pointStr","getClosestPointFromPathData","leastDistance","closestPoint","Base","datum","json","returnShape","jsonObj","JSON","parse","segments","segment","positionInfo","findInteriorCurves","interiorCurves","dividedPath","resolveCrossings","enclosedLoop","_enclosedLoop","thresholdDist","thresholdDistMultiplier","nextSegment","startAngle","inverseStartAngle","extendedStartPoint","lastSegment","penSegment","previous","endAngle","extendedEndPoint","firstPoint","lastPoint","unite","crossings","maxArea","maxChild","area","intersection","intersectionPoint","pathCrossings","subtract","_ret2","closedChildren","childClone","accumulator","_j","newPath","copyContent","copyAttributes","_typeof","hitTestGroupBounds","groups","getAllGroups","hitTestBounds","strokeBounds","isInside","Symbol","cornerThresholdDeg","shapeNames","./color","./lib/shape-detector","9","getShapeSoundObj","viewWidth","view","viewSize","shape","colorName","quantizedSoundStartTime","quantizeLength","bounds","compositionLength","quantizedSoundDuration","soundObj","startTime","pathId","spriteName","startPlaying","hasClass","playEnabledClass","playingClass","startComposition","stopPlaying","stopComposition","initShapeSounds","returnSounds","shapeName","shapeSoundJSONPath","getJSON","resp","shapeSoundData","formatShapeSoundData","returnData","urls","smallestDuration","bpm","returnDuration","quantizePosition","position","smallestInterval","measures","returnPosition","animateShapePlay","animating","totalDuration","measureLength","animate","rotate","settings","easing","complete","removeShapeFromComposition","shapeGroup","getItems","_ret","clearSoundTimeouts","soundTimeout","playCompositionFirstTime","trimmedCompositionObj","getTrimmedCompositionObj","iterations","repeatComposition","playCompositionOnce","trimmedComposition","getCompositionStartTime","modifiedSound","beatLength","./shape","howler","10","hash","pauseVideo","exitTutorialMode","getTime","drawInactivityDelay","inputDelay","refreshCheckDelay","overlayDelay","11","hammerTips","tipsOverlay","canvas","doubleTap","panStart","panMove","panEnd","pinchStart","pinchMove","pinchEnd","enablePanAndPinchEvents","enablePanEvents","enablePinchEvents","enableTapEvents","disableTapEvents","disablePanEvents","disablePinchEvents","pointer","hitResult","hitTest","hitOptions","eventTargetIsOnCanvas","hideContextualTutByName","stopPropagation","strokeCap","rad","angleDelta","halfPointX","halfPointY","halfPoint","speed","draw","minShapeSize","maxShapeLength","shapeSize","centerPoint","gradientSize","originX","originY","destinationX","destinationY","origin","gradient","stops","shapeSoundObj","outlineGroup","outline","outer","outlineCenter","middle","sendToBack","shapeMask","enclosedLoops","line","unditherButtonsByName","scaleFactor","allTutsCompleted","tutName","_groups","addContextualTut","tut","interacting","originalRotation","originalScale","$tut","$pinchedTut","currentScale","scaleDelta","currentRotation","rotationDelta","moveContextualTut","hypot","viewHypot","maxScaleFactor","move","hideContextualTut","throwPinchedGroup","velocityMultiplier","viewHeight","offScreen","requestAnimationFrame","newX","newY","newPos","tolerance","./sound","hammerjs","12","getTutByName","tutObj","tutorialCompletionObj","completion","shapeCenter","tutCopy","tutPos","getTutPositionFromCenter","css","left","visibility","$tuts","resetContextualTuts","tutWidth","outerWidth","tutHeight","outerHeight","leftPos","topPos","tutArrowHeight","13","initLogoRefresh","initColorPalette","initNewButton","initUndoButton","initPlayButton","initTipsButton","initShareButton","initContextualTuts","resetCanvas","ditherButtonsByName","buttonNames","undither","ditherButtonByName","buttonName","$button","ditheredClass","unditherButtonByName","newPressed","activeLayer","removeChildren","undoPressed","lastMove","numGroups","getNumGroups","tipsPressed","sharePressed","$paletteWrap","$paletteColors","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","$svg","clear","numCanvasses","randomCanvasIndex","canvasBg","Raster","scaleFactorHorizontal","scaleFactorVertical","Layer","14","degrees","deg","radians","pow","delta","toLocaleTimeString","clearGroupPops","groupPops","done","res","fail","15","playVideo","videoPlayingClass","main","$video","$videoWrapper","./main"],"mappings":"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,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAClmCxI,KAAM,SAEN+tB,SAAWzlB,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MACtpCxI,KAAM,SAEN+tB,SAAWzlB,EAAK,IAAKE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,KAAQF,EAAK,UAAWE,EAAK,WAClMxI,KAAM,WAEN+tB,SAAWzlB,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,UAAWE,EAAK,WACxNxI,KAAM,WAEN+tB,SAAWzlB,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,KAAQF,EAAK,SAAUE,EAAK,WAChPxI,KAAM,WAEN+tB,SAAWzlB,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MACrhCxI,KAAM,WAEN+tB,SAAWzlB,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK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MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAC1vCxI,KAAM,UAEN+tB,SAAWzlB,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MACjhDxI,KAAM,UAEN+tB,SAAWzlB,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nexports.runAnimations = false;\nexports.pop = true;\nexports.canvasId = 'canvas';\n\nexports.palette = {\n  colors: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#CA2E26\", \"#9A2A1F\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#DAAD27\", \"#7F7D31\", \"#2B5E2E\"],\n  colorNames: {\n    \"#20171C\": \"black\",\n    \"#1E2A43\": \"blue\",\n    \"#28377D\": \"blue\",\n    \"#352747\": \"blue\",\n    \"#CA2E26\": \"red\",\n    \"#9A2A1F\": \"red\",\n    \"#DA6C26\": \"orange\",\n    \"#453121\": \"brown\",\n    \"#916A47\": \"brown\",\n    \"#DAAD27\": \"orange\",\n    \"#7F7D31\": \"green\",\n    \"#2B5E2E\": \"green\"\n  },\n  gradients: {\n    '#20171C': ['#20171C', '#000000'],\n    '#1E2A43': ['#1E2A43', '#263166'],\n    '#28377D': ['#28377D', '#1E4695'],\n    '#352747': ['#352747', '#45005B'],\n    '#CA2E26': ['#CA2E26', '#9B352F'],\n    '#9A2A1F': ['#9A2A1F', '#CD3621'],\n    '#DA6C26': ['#DA6C26', '#BD4820'],\n    '#453121': ['#453121', '#281806'],\n    '#916A47': ['#916A47', '#623A22'],\n    '#DAAD27': ['#DAAD27', '#AF871D'],\n    '#7F7D31': ['#7F7D31', '#555827'],\n    '#2B5E2E': ['#2B5E2E', '#16451D']\n  },\n  pops: [\"#00ADEF\", \"#F285A5\", \"#7DC57F\", \"#F6EB16\", \"#F4EAE0\"],\n  colorSize: 20,\n  selectedColorSize: 30\n};\n\nexports.contextualTuts = [{\n  type: \"fill\",\n  copy: \"<strong>Double-tap</strong> a filled shape to <strong>UNFILL</strong> it. Repeat to <strong>FILL</strong> an unfilled shape.\"\n}, {\n  type: \"pinch\",\n  copy: \"<strong>Pinch</strong> shapes with <strong>TWO FINGERS</strong> to <strong>resize</strong> and <strong>move</strong> them.\"\n}, {\n  type: \"swipe\",\n  copy: \"To <strong>remove</strong> shapes, <strong>pinch</strong> with <strong>two fingers</strong> then <strong>swipe</strong> or hit <strong>undo</strong>.\"\n}];\n\n},{}],2:[function(require,module,exports){\n/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.value = vol;\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.value = muted ? 0 : self._volume;\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.state = 'resuming';\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Check if this extension is available.\n        if (Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If we have no sprite and the sound hasn't loaded, we must wait\n      // for the sound to load to get our audio's duration.\n      if (self._state !== 'loaded' && !self._sprite[sprite]) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(self._soundById(sound._id) ? sound._id : undefined);\n          }\n        });\n\n        return sound._id;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        var isRunning = (Howler.state === 'running');\n        if (self._state === 'loaded' && isRunning) {\n          playWebAudio();\n        } else {\n          // Wait for the audio to load and then begin playback.\n          self.once(isRunning ? 'load' : 'resume', playWebAudio, isRunning ? sound._id : null);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          setTimeout(function() {\n            node.play();\n\n            // Setup the new end timer.\n            if (timeout !== Infinity) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            if (!internal) {\n              self._emit('play', sound._id);\n            }\n          }, 0);\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                if (!internal) {\n                  self._emit('stop', sound._id);\n                }\n\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n        }\n\n        if (sound && !internal) {\n          self._emit('stop', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n      var diff = Math.abs(from - to);\n      var dir = from > to ? 'out' : 'in';\n      var steps = diff / 0.01;\n      var stepLen = (steps > 0) ? len / steps : len;\n\n      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.\n      if (stepLen < 4) {\n        steps = Math.ceil(steps / (4 / stepLen));\n        stepLen = 4;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          var vol = from;\n          sound._interval = setInterval(function(soundId, sound) {\n            // Update the volume amount, but only if the volume should change.\n            if (steps > 0) {\n              vol += (dir === 'in' ? 0.01 : -0.01);\n            }\n\n            // Make sure the volume is in the right bounds.\n            vol = Math.max(0, vol);\n            vol = Math.min(1, vol);\n\n            // Round to within 2 decimal points.\n            vol = Math.round(vol * 100) / 100;\n\n            // Change the volume.\n            if (self._webAudio) {\n              if (typeof id === 'undefined') {\n                self._volume = vol;\n              }\n\n              sound._volume = vol;\n            } else {\n              self.volume(vol, soundId, true);\n            }\n\n            // When the fade is complete, stop it and fire event.\n            if (vol === to) {\n              clearInterval(sound._interval);\n              sound._interval = null;\n              self.volume(vol, soundId);\n              self._emit('fade', soundId);\n            }\n          }.bind(self, ids[i], sound), stepLen);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.value = rate;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n          self._emit('end', sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading.\n          sounds[i]._node.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=';\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      if (fn) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          if (fn === events[i].fn && id === events[i].id) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.value = sound._rate;\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (self._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorListener, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.value = 1;\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.value = pan;\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or\n   * all in the group. The most common usage is to set the 'x' position for\n   * left/right panning. Setting any value higher than 1.0 will begin to\n   * decrease the volume of the sound as it moves further away.\n   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.\n   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of\n   *                      `coneOuterGain` outside this angle.\n   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.\n   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves\n   *                      away from listener. Can be `linear`, `inverse` or `exponential`.\n   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *     refDistance - (1 by default) A reference distance for reducing volume as the source\n   *                    moves away from the listener.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,\n            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,\n            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,\n            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,\n            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.panningModel = pa.panningModel;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.value = sound._stereo;\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id);\n    }\n  };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathColorName = getPathColorName;\nexports.getColorName = getColorName;\nexports.getRandomPop = getRandomPop;\nexports.getIndexedPopColor = getIndexedPopColor;\nvar config = require('./../../config');\n\nvar transparent = exports.transparent = new Color(0, 0);\n\nfunction getPathColorName(path) {\n  var hexColor = path.parent.data.originalColor;\n  // let hexColor = path.strokeColor.toCSS(true); // This fails when it's a gradient\n  return getColorName(hexColor);\n}\n\nfunction getColorName(color) {\n  if (color) {\n    color = color.toUpperCase(); // make sure\n    if (color in config.palette.colorNames) {\n      return config.palette.colorNames[color];\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\nfunction getRandomPop() {\n  var pops = config.palette.pops;\n  return pops[Math.floor(Math.random() * pops.length)];\n}\n\nfunction getIndexedPopColor(index) {\n  var pops = config.palette.pops;\n  return pops[index % pops.length];\n}\n\n},{\"./../../config\":1}],5:[function(require,module,exports){\n\"use strict\";\n\n(function (root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.ShapeDetector = factory();\n  }\n})(undefined, function () {\n\n  var _nbSamplePoints;\n  var _squareSize = 250;\n  var _phi = 0.5 * (-1.0 + Math.sqrt(5.0));\n  var _angleRange = deg2Rad(45.0);\n  var _anglePrecision = deg2Rad(2.0);\n  var _halfDiagonal = Math.sqrt(_squareSize * _squareSize + _squareSize * _squareSize) * 0.5;\n  var _origin = {\n    x: 0,\n    y: 0\n  };\n\n  function deg2Rad(d) {\n\n    return d * Math.PI / 180.0;\n  };\n\n  function getDistance(a, b) {\n\n    var dx = b.x - a.x;\n    var dy = b.y - a.y;\n\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  function Stroke(points, name) {\n\n    this.points = points;\n    this.name = name;\n    this.processStroke();\n  };\n\n  Stroke.prototype.processStroke = function () {\n\n    this.points = this.resample();\n    this.setCentroid();\n    this.points = this.rotateBy(-this.indicativeAngle());\n    this.points = this.scaleToSquare();\n    this.setCentroid();\n    this.points = this.translateToOrigin();\n\n    return this;\n  };\n\n  Stroke.prototype.resample = function () {\n\n    var localDistance, q;\n    var interval = this.strokeLength() / (_nbSamplePoints - 1);\n    var distance = 0.0;\n    var newPoints = [this.points[0]];\n\n    for (var i = 1; i < this.points.length; i++) {\n      localDistance = getDistance(this.points[i - 1], this.points[i]);\n\n      if (distance + localDistance >= interval) {\n        q = {\n          x: this.points[i - 1].x + (interval - distance) / localDistance * (this.points[i].x - this.points[i - 1].x),\n          y: this.points[i - 1].y + (interval - distance) / localDistance * (this.points[i].y - this.points[i - 1].y)\n        };\n\n        newPoints.push(q);\n        this.points.splice(i, 0, q);\n        distance = 0.0;\n      } else {\n        distance += localDistance;\n      }\n    }\n\n    if (newPoints.length === _nbSamplePoints - 1) {\n      newPoints.push(this.points[this.points.length - 1]);\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.rotateBy = function (angle) {\n\n    var point;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var newPoints = [];\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: (point.x - this.c.x) * cos - (point.y - this.c.y) * sin + this.c.x,\n        y: (point.x - this.c.x) * sin + (point.y - this.c.y) * cos + this.c.y\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.scaleToSquare = function () {\n\n    var point;\n    var newPoints = [];\n    var box = {\n      minX: +Infinity,\n      maxX: -Infinity,\n      minY: +Infinity,\n      maxY: -Infinity\n    };\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      box.minX = Math.min(box.minX, point.x);\n      box.minY = Math.min(box.minY, point.y);\n      box.maxX = Math.max(box.maxX, point.x);\n      box.maxY = Math.max(box.maxY, point.y);\n    }\n\n    box.width = box.maxX - box.minX;\n    box.height = box.maxY - box.minY;\n\n    for (i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: point.x * (_squareSize / box.width),\n        y: point.y * (_squareSize / box.height)\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.translateToOrigin = function (points) {\n\n    var point;\n    var newPoints = [];\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: point.x + _origin.x - this.c.x,\n        y: point.y + _origin.y - this.c.y\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.setCentroid = function () {\n\n    var point;\n    this.c = {\n      x: 0.0,\n      y: 0.0\n    };\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      this.c.x += point.x;\n      this.c.y += point.y;\n    }\n\n    this.c.x /= this.points.length;\n    this.c.y /= this.points.length;\n\n    return this;\n  };\n\n  Stroke.prototype.indicativeAngle = function () {\n\n    return Math.atan2(this.c.y - this.points[0].y, this.c.x - this.points[0].x);\n  };\n\n  Stroke.prototype.strokeLength = function () {\n\n    var d = 0.0;\n\n    for (var i = 1; i < this.points.length; i++) {\n      d += getDistance(this.points[i - 1], this.points[i]);\n    }\n\n    return d;\n  };\n\n  Stroke.prototype.distanceAtBestAngle = function (pattern) {\n\n    var a = -_angleRange;\n    var b = _angleRange;\n    var x1 = _phi * a + (1.0 - _phi) * b;\n    var f1 = this.distanceAtAngle(pattern, x1);\n    var x2 = (1.0 - _phi) * a + _phi * b;\n    var f2 = this.distanceAtAngle(pattern, x2);\n\n    while (Math.abs(b - a) > _anglePrecision) {\n\n      if (f1 < f2) {\n        b = x2;\n        x2 = x1;\n        f2 = f1;\n        x1 = _phi * a + (1.0 - _phi) * b;\n        f1 = this.distanceAtAngle(pattern, x1);\n      } else {\n        a = x1;\n        x1 = x2;\n        f1 = f2;\n        x2 = (1.0 - _phi) * a + _phi * b;\n        f2 = this.distanceAtAngle(pattern, x2);\n      }\n    }\n\n    return Math.min(f1, f2);\n  };\n\n  Stroke.prototype.distanceAtAngle = function (pattern, angle) {\n\n    var strokePoints = this.rotateBy(angle);\n    var patternPoints = pattern.points;\n    var d = 0.0;\n\n    for (var i = 0; i < strokePoints.length; i++) {\n      d += getDistance(strokePoints[i], patternPoints[i]);\n    }\n\n    return d / strokePoints.length;\n  };\n\n  function ShapeDetector(patterns, options) {\n\n    options = options || {};\n    this.threshold = options.threshold || 0;\n    _nbSamplePoints = options.nbSamplePoints || 64;\n\n    this.patterns = [];\n\n    for (var i = 0; i < patterns.length; i++) {\n      this.learn(patterns[i].name, patterns[i].points);\n    }\n  }\n\n  ShapeDetector.defaultShapes = [{\n    points: [{ x: 0, y: 50 }, { x: 100, y: 50 }],\n    name: \"line\"\n  }, {\n    points: [{ x: 50, y: 0 }, { x: 50, y: 100 }],\n    name: \"line\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 100, y: 100 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 89, \"y\": 164 }, { \"x\": 90, \"y\": 162 }, { \"x\": 92, \"y\": 162 }, { \"x\": 94, \"y\": 164 }, { \"x\": 95, \"y\": 166 }, { \"x\": 96, \"y\": 169 }, { \"x\": 97, \"y\": 171 }, { \"x\": 99, \"y\": 175 }, { \"x\": 101, \"y\": 178 }, { \"x\": 103, \"y\": 182 }, { \"x\": 106, \"y\": 189 }, { \"x\": 108, \"y\": 194 }, { \"x\": 111, \"y\": 199 }, { \"x\": 114, \"y\": 204 }, { \"x\": 117, \"y\": 209 }, { \"x\": 119, \"y\": 214 }, { \"x\": 122, \"y\": 218 }, { \"x\": 124, \"y\": 222 }, { \"x\": 126, \"y\": 225 }, { \"x\": 128, \"y\": 228 }, { \"x\": 130, \"y\": 229 }, { \"x\": 133, \"y\": 233 }, { \"x\": 134, \"y\": 236 }, { \"x\": 136, \"y\": 239 }, { \"x\": 138, \"y\": 240 }, { \"x\": 139, \"y\": 242 }, { \"x\": 140, \"y\": 244 }, { \"x\": 142, \"y\": 242 }, { \"x\": 142, \"y\": 240 }, { \"x\": 142, \"y\": 237 }, { \"x\": 143, \"y\": 235 }, { \"x\": 143, \"y\": 233 }, { \"x\": 145, \"y\": 229 }, { \"x\": 146, \"y\": 226 }, { \"x\": 148, \"y\": 217 }, { \"x\": 149, \"y\": 208 }, { \"x\": 149, \"y\": 205 }, { \"x\": 151, \"y\": 196 }, { \"x\": 151, \"y\": 193 }, { \"x\": 153, \"y\": 182 }, { \"x\": 155, \"y\": 172 }, { \"x\": 157, \"y\": 165 }, { \"x\": 159, \"y\": 160 }, { \"x\": 162, \"y\": 155 }, { \"x\": 164, \"y\": 150 }, { \"x\": 165, \"y\": 148 }, { \"x\": 166, \"y\": 146 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 91, \"y\": 185 }, { \"x\": 93, \"y\": 185 }, { \"x\": 95, \"y\": 185 }, { \"x\": 97, \"y\": 185 }, { \"x\": 100, \"y\": 188 }, { \"x\": 102, \"y\": 189 }, { \"x\": 104, \"y\": 190 }, { \"x\": 106, \"y\": 193 }, { \"x\": 108, \"y\": 195 }, { \"x\": 110, \"y\": 198 }, { \"x\": 112, \"y\": 201 }, { \"x\": 114, \"y\": 204 }, { \"x\": 115, \"y\": 207 }, { \"x\": 117, \"y\": 210 }, { \"x\": 118, \"y\": 212 }, { \"x\": 120, \"y\": 214 }, { \"x\": 121, \"y\": 217 }, { \"x\": 122, \"y\": 219 }, { \"x\": 123, \"y\": 222 }, { \"x\": 124, \"y\": 224 }, { \"x\": 126, \"y\": 226 }, { \"x\": 127, \"y\": 229 }, { \"x\": 129, \"y\": 231 }, { \"x\": 130, \"y\": 233 }, { \"x\": 129, \"y\": 231 }, { \"x\": 129, \"y\": 228 }, { \"x\": 129, \"y\": 226 }, { \"x\": 129, \"y\": 224 }, { \"x\": 129, \"y\": 221 }, { \"x\": 129, \"y\": 218 }, { \"x\": 129, \"y\": 212 }, { \"x\": 129, \"y\": 208 }, { \"x\": 130, \"y\": 198 }, { \"x\": 132, \"y\": 189 }, { \"x\": 134, \"y\": 182 }, { \"x\": 137, \"y\": 173 }, { \"x\": 143, \"y\": 164 }, { \"x\": 147, \"y\": 157 }, { \"x\": 151, \"y\": 151 }, { \"x\": 155, \"y\": 144 }, { \"x\": 161, \"y\": 137 }, { \"x\": 165, \"y\": 131 }, { \"x\": 171, \"y\": 122 }, { \"x\": 174, \"y\": 118 }, { \"x\": 176, \"y\": 114 }, { \"x\": 177, \"y\": 112 }, { \"x\": 177, \"y\": 114 }, { \"x\": 175, \"y\": 116 }, { \"x\": 173, \"y\": 118 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 113, \"y\": 68 }, { \"x\": 86, \"y\": 79 }, { \"x\": 63, \"y\": 131 }, { \"x\": 78, \"y\": 147 }, { \"x\": 156, \"y\": 149 }, { \"x\": 195, \"y\": 100 }, { \"x\": 189, \"y\": 79 }, { \"x\": 125.73497, \"y\": 62.81168 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 98, \"y\": 67 }, { \"x\": 77, \"y\": 85 }, { \"x\": 77, \"y\": 162 }, { \"x\": 179, \"y\": 156 }, { \"x\": 197, \"y\": 123 }, { \"x\": 167, \"y\": 63 }, { \"x\": 141, \"y\": 61 }, { \"x\": 110, \"y\": 59 }, { \"x\": 106.51192, \"y\": 59.70407 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 60, \"y\": 47 }, { \"x\": 43, \"y\": 96 }, { \"x\": 52, \"y\": 206 }, { \"x\": 63, \"y\": 246 }, { \"x\": 118, \"y\": 296 }, { \"x\": 144, \"y\": 246 }, { \"x\": 141, \"y\": 147 }, { \"x\": 133, \"y\": 129 }, { \"x\": 113, \"y\": 80 }, { \"x\": 60.42738, \"y\": 45.76813 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 127, \"y\": 141 }, { \"x\": 124, \"y\": 140 }, { \"x\": 120, \"y\": 139 }, { \"x\": 118, \"y\": 139 }, { \"x\": 116, \"y\": 139 }, { \"x\": 111, \"y\": 140 }, { \"x\": 109, \"y\": 141 }, { \"x\": 104, \"y\": 144 }, { \"x\": 100, \"y\": 147 }, { \"x\": 96, \"y\": 152 }, { \"x\": 93, \"y\": 157 }, { \"x\": 90, \"y\": 163 }, { \"x\": 87, \"y\": 169 }, { \"x\": 85, \"y\": 175 }, { \"x\": 83, \"y\": 181 }, { \"x\": 82, \"y\": 190 }, { \"x\": 82, \"y\": 195 }, { \"x\": 83, \"y\": 200 }, { \"x\": 84, \"y\": 205 }, { \"x\": 88, \"y\": 213 }, { \"x\": 91, \"y\": 216 }, { \"x\": 96, \"y\": 219 }, { \"x\": 103, \"y\": 222 }, { \"x\": 108, \"y\": 224 }, { \"x\": 111, \"y\": 224 }, { \"x\": 120, \"y\": 224 }, { \"x\": 133, \"y\": 223 }, { \"x\": 142, \"y\": 222 }, { \"x\": 152, \"y\": 218 }, { \"x\": 160, \"y\": 214 }, { \"x\": 167, \"y\": 210 }, { \"x\": 173, \"y\": 204 }, { \"x\": 178, \"y\": 198 }, { \"x\": 179, \"y\": 196 }, { \"x\": 182, \"y\": 188 }, { \"x\": 182, \"y\": 177 }, { \"x\": 178, \"y\": 167 }, { \"x\": 170, \"y\": 150 }, { \"x\": 163, \"y\": 138 }, { \"x\": 152, \"y\": 130 }, { \"x\": 143, \"y\": 129 }, { \"x\": 140, \"y\": 131 }, { \"x\": 129, \"y\": 136 }, { \"x\": 126, \"y\": 139 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 516, \"y\": 284 }, { \"x\": 496, \"y\": 319 }, { \"x\": 496, \"y\": 329 }, { \"x\": 513, \"y\": 329 }, { \"x\": 550, \"y\": 324 }, { \"x\": 696, \"y\": 305 }, { \"x\": 737, \"y\": 298 }, { \"x\": 746, \"y\": 292 }, { \"x\": 734, \"y\": 278 }, { \"x\": 709, \"y\": 252 }, { \"x\": 664, \"y\": 193 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 179, \"y\": 159 }, { \"x\": 152, \"y\": 290 }, { \"x\": 143, \"y\": 336 }, { \"x\": 142, \"y\": 355 }, { \"x\": 160, \"y\": 348 }, { \"x\": 208, \"y\": 337 }, { \"x\": 241, \"y\": 330 }, { \"x\": 256, \"y\": 328 }, { \"x\": 254, \"y\": 315 }, { \"x\": 238, \"y\": 277 }, { \"x\": 210, \"y\": 200 }, { \"x\": 182.94356, \"y\": 110.45656 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 105, \"y\": 335 }, { \"x\": 115, \"y\": 362 }, { \"x\": 128, \"y\": 338 }, { \"x\": 163, \"y\": 271 }, { \"x\": 241, \"y\": 135 }, { \"x\": 261, \"y\": 104 }, { \"x\": 267, \"y\": 98 }, { \"x\": 261, \"y\": 102 }, { \"x\": 236, \"y\": 119 }, { \"x\": 151, \"y\": 195 }, { \"x\": 108, \"y\": 235 }, { \"x\": 83, \"y\": 267 }, { \"x\": 79.92616, \"y\": 270.93451 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 137, \"y\": 139 }, { \"x\": 135, \"y\": 141 }, { \"x\": 133, \"y\": 144 }, { \"x\": 132, \"y\": 146 }, { \"x\": 130, \"y\": 149 }, { \"x\": 128, \"y\": 151 }, { \"x\": 126, \"y\": 155 }, { \"x\": 123, \"y\": 160 }, { \"x\": 120, \"y\": 166 }, { \"x\": 116, \"y\": 171 }, { \"x\": 112, \"y\": 177 }, { \"x\": 107, \"y\": 183 }, { \"x\": 102, \"y\": 188 }, { \"x\": 100, \"y\": 191 }, { \"x\": 95, \"y\": 195 }, { \"x\": 90, \"y\": 199 }, { \"x\": 86, \"y\": 203 }, { \"x\": 82, \"y\": 206 }, { \"x\": 80, \"y\": 209 }, { \"x\": 75, \"y\": 213 }, { \"x\": 73, \"y\": 213 }, { \"x\": 70, \"y\": 216 }, { \"x\": 67, \"y\": 219 }, { \"x\": 64, \"y\": 221 }, { \"x\": 61, \"y\": 223 }, { \"x\": 60, \"y\": 225 }, { \"x\": 62, \"y\": 226 }, { \"x\": 65, \"y\": 225 }, { \"x\": 67, \"y\": 226 }, { \"x\": 74, \"y\": 226 }, { \"x\": 77, \"y\": 227 }, { \"x\": 85, \"y\": 229 }, { \"x\": 91, \"y\": 230 }, { \"x\": 99, \"y\": 231 }, { \"x\": 108, \"y\": 232 }, { \"x\": 116, \"y\": 233 }, { \"x\": 125, \"y\": 233 }, { \"x\": 134, \"y\": 234 }, { \"x\": 145, \"y\": 233 }, { \"x\": 153, \"y\": 232 }, { \"x\": 160, \"y\": 233 }, { \"x\": 170, \"y\": 234 }, { \"x\": 177, \"y\": 235 }, { \"x\": 179, \"y\": 236 }, { \"x\": 186, \"y\": 237 }, { \"x\": 193, \"y\": 238 }, { \"x\": 198, \"y\": 239 }, { \"x\": 200, \"y\": 237 }, { \"x\": 202, \"y\": 239 }, { \"x\": 204, \"y\": 238 }, { \"x\": 206, \"y\": 234 }, { \"x\": 205, \"y\": 230 }, { \"x\": 202, \"y\": 222 }, { \"x\": 197, \"y\": 216 }, { \"x\": 192, \"y\": 207 }, { \"x\": 186, \"y\": 198 }, { \"x\": 179, \"y\": 189 }, { \"x\": 174, \"y\": 183 }, { \"x\": 170, \"y\": 178 }, { \"x\": 164, \"y\": 171 }, { \"x\": 161, \"y\": 168 }, { \"x\": 154, \"y\": 160 }, { \"x\": 148, \"y\": 155 }, { \"x\": 143, \"y\": 150 }, { \"x\": 138, \"y\": 148 }, { \"x\": 136, \"y\": 148 }],\n    name: \"triangle\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 0, y: 50 }, { x: 50, y: 50 }, { x: 50, y: 0 }],\n    name: \"square\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 0, y: 100 }, { x: 50, y: 100 }, { x: 50, y: 0 }],\n    name: \"square\"\n  }, {\n    points: [{ \"x\": 78, \"y\": 149 }, { \"x\": 78, \"y\": 153 }, { \"x\": 78, \"y\": 157 }, { \"x\": 78, \"y\": 160 }, { \"x\": 79, \"y\": 162 }, { \"x\": 79, \"y\": 164 }, { \"x\": 79, \"y\": 167 }, { \"x\": 79, \"y\": 169 }, { \"x\": 79, \"y\": 173 }, { \"x\": 79, \"y\": 178 }, { \"x\": 79, \"y\": 183 }, { \"x\": 80, \"y\": 189 }, { \"x\": 80, \"y\": 193 }, { \"x\": 80, \"y\": 198 }, { \"x\": 80, \"y\": 202 }, { \"x\": 81, \"y\": 208 }, { \"x\": 81, \"y\": 210 }, { \"x\": 81, \"y\": 216 }, { \"x\": 82, \"y\": 222 }, { \"x\": 82, \"y\": 224 }, { \"x\": 82, \"y\": 227 }, { \"x\": 83, \"y\": 229 }, { \"x\": 83, \"y\": 231 }, { \"x\": 85, \"y\": 230 }, { \"x\": 88, \"y\": 232 }, { \"x\": 90, \"y\": 233 }, { \"x\": 92, \"y\": 232 }, { \"x\": 94, \"y\": 233 }, { \"x\": 99, \"y\": 232 }, { \"x\": 102, \"y\": 233 }, { \"x\": 106, \"y\": 233 }, { \"x\": 109, \"y\": 234 }, { \"x\": 117, \"y\": 235 }, { \"x\": 123, \"y\": 236 }, { \"x\": 126, \"y\": 236 }, { \"x\": 135, \"y\": 237 }, { \"x\": 142, \"y\": 238 }, { \"x\": 145, \"y\": 238 }, { \"x\": 152, \"y\": 238 }, { \"x\": 154, \"y\": 239 }, { \"x\": 165, \"y\": 238 }, { \"x\": 174, \"y\": 237 }, { \"x\": 179, \"y\": 236 }, { \"x\": 186, \"y\": 235 }, { \"x\": 191, \"y\": 235 }, { \"x\": 195, \"y\": 233 }, { \"x\": 197, \"y\": 233 }, { \"x\": 200, \"y\": 233 }, { \"x\": 201, \"y\": 235 }, { \"x\": 201, \"y\": 233 }, { \"x\": 199, \"y\": 231 }, { \"x\": 198, \"y\": 226 }, { \"x\": 198, \"y\": 220 }, { \"x\": 196, \"y\": 207 }, { \"x\": 195, \"y\": 195 }, { \"x\": 195, \"y\": 181 }, { \"x\": 195, \"y\": 173 }, { \"x\": 195, \"y\": 163 }, { \"x\": 194, \"y\": 155 }, { \"x\": 192, \"y\": 145 }, { \"x\": 192, \"y\": 143 }, { \"x\": 192, \"y\": 138 }, { \"x\": 191, \"y\": 135 }, { \"x\": 191, \"y\": 133 }, { \"x\": 191, \"y\": 130 }, { \"x\": 190, \"y\": 128 }, { \"x\": 188, \"y\": 129 }, { \"x\": 186, \"y\": 129 }, { \"x\": 181, \"y\": 132 }, { \"x\": 173, \"y\": 131 }, { \"x\": 162, \"y\": 131 }, { \"x\": 151, \"y\": 132 }, { \"x\": 149, \"y\": 132 }, { \"x\": 138, \"y\": 132 }, { \"x\": 136, \"y\": 132 }, { \"x\": 122, \"y\": 131 }, { \"x\": 120, \"y\": 131 }, { \"x\": 109, \"y\": 130 }, { \"x\": 107, \"y\": 130 }, { \"x\": 90, \"y\": 132 }, { \"x\": 81, \"y\": 133 }, { \"x\": 76, \"y\": 133 }],\n    name: \"square\"\n  }, {\n    points: [{ \"x\": 67, \"y\": 172 }, { \"x\": 80, \"y\": 85 }, { \"x\": 83, \"y\": 58 }, { \"x\": 83, \"y\": 54 }, { \"x\": 136, \"y\": 110 }, { \"x\": 157, \"y\": 136 }, { \"x\": 162, \"y\": 140 }, { \"x\": 166, \"y\": 143 }, { \"x\": 80, \"y\": 124 }, { \"x\": 45, \"y\": 116 }, { \"x\": 37, \"y\": 114 }, { \"x\": 31, \"y\": 113 }, { \"x\": 52, \"y\": 106 }, { \"x\": 101, \"y\": 86 }, { \"x\": 131, \"y\": 75 }, { \"x\": 157, \"y\": 63 }, { \"x\": 163, \"y\": 62 }, { \"x\": 158, \"y\": 64 }, { \"x\": 153, \"y\": 73 }, { \"x\": 128, \"y\": 103 }, { \"x\": 71, \"y\": 170 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 30, \"y\": 69 }, { \"x\": 116, \"y\": 118 }, { \"x\": 90, \"y\": 164 }, { \"x\": 75, \"y\": 117 }, { \"x\": 157, \"y\": 83 }, { \"x\": 182, \"y\": 140 }, { \"x\": 155, \"y\": 163 }, { \"x\": 144, \"y\": 119 }, { \"x\": 221, \"y\": 54 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 87, \"y\": 76 }, { \"x\": 62, \"y\": 73 }, { \"x\": 100, \"y\": 98 }, { \"x\": 107, \"y\": 57 }, { \"x\": 61, \"y\": 38 }, { \"x\": 73, \"y\": 137 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 123, \"y\": 129 }, { \"x\": 123, \"y\": 131 }, { \"x\": 124, \"y\": 133 }, { \"x\": 125, \"y\": 136 }, { \"x\": 127, \"y\": 140 }, { \"x\": 129, \"y\": 142 }, { \"x\": 133, \"y\": 148 }, { \"x\": 137, \"y\": 154 }, { \"x\": 143, \"y\": 158 }, { \"x\": 145, \"y\": 161 }, { \"x\": 148, \"y\": 164 }, { \"x\": 153, \"y\": 170 }, { \"x\": 158, \"y\": 176 }, { \"x\": 160, \"y\": 178 }, { \"x\": 164, \"y\": 183 }, { \"x\": 168, \"y\": 188 }, { \"x\": 171, \"y\": 191 }, { \"x\": 175, \"y\": 196 }, { \"x\": 178, \"y\": 200 }, { \"x\": 180, \"y\": 202 }, { \"x\": 181, \"y\": 205 }, { \"x\": 184, \"y\": 208 }, { \"x\": 186, \"y\": 210 }, { \"x\": 187, \"y\": 213 }, { \"x\": 188, \"y\": 215 }, { \"x\": 186, \"y\": 212 }, { \"x\": 183, \"y\": 211 }, { \"x\": 177, \"y\": 208 }, { \"x\": 169, \"y\": 206 }, { \"x\": 162, \"y\": 205 }, { \"x\": 154, \"y\": 207 }, { \"x\": 145, \"y\": 209 }, { \"x\": 137, \"y\": 210 }, { \"x\": 129, \"y\": 214 }, { \"x\": 122, \"y\": 217 }, { \"x\": 118, \"y\": 218 }, { \"x\": 111, \"y\": 221 }, { \"x\": 109, \"y\": 222 }, { \"x\": 110, \"y\": 219 }, { \"x\": 112, \"y\": 217 }, { \"x\": 118, \"y\": 209 }, { \"x\": 120, \"y\": 207 }, { \"x\": 128, \"y\": 196 }, { \"x\": 135, \"y\": 187 }, { \"x\": 138, \"y\": 183 }, { \"x\": 148, \"y\": 167 }, { \"x\": 157, \"y\": 153 }, { \"x\": 163, \"y\": 145 }, { \"x\": 165, \"y\": 142 }, { \"x\": 172, \"y\": 133 }, { \"x\": 177, \"y\": 127 }, { \"x\": 179, \"y\": 127 }, { \"x\": 180, \"y\": 125 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 81, \"y\": 219 }, { \"x\": 84, \"y\": 218 }, { \"x\": 86, \"y\": 220 }, { \"x\": 88, \"y\": 220 }, { \"x\": 90, \"y\": 220 }, { \"x\": 92, \"y\": 219 }, { \"x\": 95, \"y\": 220 }, { \"x\": 97, \"y\": 219 }, { \"x\": 99, \"y\": 220 }, { \"x\": 102, \"y\": 218 }, { \"x\": 105, \"y\": 217 }, { \"x\": 107, \"y\": 216 }, { \"x\": 110, \"y\": 216 }, { \"x\": 113, \"y\": 214 }, { \"x\": 116, \"y\": 212 }, { \"x\": 118, \"y\": 210 }, { \"x\": 121, \"y\": 208 }, { \"x\": 124, \"y\": 205 }, { \"x\": 126, \"y\": 202 }, { \"x\": 129, \"y\": 199 }, { \"x\": 132, \"y\": 196 }, { \"x\": 136, \"y\": 191 }, { \"x\": 139, \"y\": 187 }, { \"x\": 142, \"y\": 182 }, { \"x\": 144, \"y\": 179 }, { \"x\": 146, \"y\": 174 }, { \"x\": 148, \"y\": 170 }, { \"x\": 149, \"y\": 168 }, { \"x\": 151, \"y\": 162 }, { \"x\": 152, \"y\": 160 }, { \"x\": 152, \"y\": 157 }, { \"x\": 152, \"y\": 155 }, { \"x\": 152, \"y\": 151 }, { \"x\": 152, \"y\": 149 }, { \"x\": 152, \"y\": 146 }, { \"x\": 149, \"y\": 142 }, { \"x\": 148, \"y\": 139 }, { \"x\": 145, \"y\": 137 }, { \"x\": 141, \"y\": 135 }, { \"x\": 139, \"y\": 135 }, { \"x\": 134, \"y\": 136 }, { \"x\": 130, \"y\": 140 }, { \"x\": 128, \"y\": 142 }, { \"x\": 126, \"y\": 145 }, { \"x\": 122, \"y\": 150 }, { \"x\": 119, \"y\": 158 }, { \"x\": 117, \"y\": 163 }, { \"x\": 115, \"y\": 170 }, { \"x\": 114, \"y\": 175 }, { \"x\": 117, \"y\": 184 }, { \"x\": 120, \"y\": 190 }, { \"x\": 125, \"y\": 199 }, { \"x\": 129, \"y\": 203 }, { \"x\": 133, \"y\": 208 }, { \"x\": 138, \"y\": 213 }, { \"x\": 145, \"y\": 215 }, { \"x\": 155, \"y\": 218 }, { \"x\": 164, \"y\": 219 }, { \"x\": 166, \"y\": 219 }, { \"x\": 177, \"y\": 219 }, { \"x\": 182, \"y\": 218 }, { \"x\": 192, \"y\": 216 }, { \"x\": 196, \"y\": 213 }, { \"x\": 199, \"y\": 212 }, { \"x\": 201, \"y\": 211 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 75, \"y\": 250 }, { \"x\": 75, \"y\": 247 }, { \"x\": 77, \"y\": 244 }, { \"x\": 78, \"y\": 242 }, { \"x\": 79, \"y\": 239 }, { \"x\": 80, \"y\": 237 }, { \"x\": 82, \"y\": 234 }, { \"x\": 82, \"y\": 232 }, { \"x\": 84, \"y\": 229 }, { \"x\": 85, \"y\": 225 }, { \"x\": 87, \"y\": 222 }, { \"x\": 88, \"y\": 219 }, { \"x\": 89, \"y\": 216 }, { \"x\": 91, \"y\": 212 }, { \"x\": 92, \"y\": 208 }, { \"x\": 94, \"y\": 204 }, { \"x\": 95, \"y\": 201 }, { \"x\": 96, \"y\": 196 }, { \"x\": 97, \"y\": 194 }, { \"x\": 98, \"y\": 191 }, { \"x\": 100, \"y\": 185 }, { \"x\": 102, \"y\": 178 }, { \"x\": 104, \"y\": 173 }, { \"x\": 104, \"y\": 171 }, { \"x\": 105, \"y\": 164 }, { \"x\": 106, \"y\": 158 }, { \"x\": 107, \"y\": 156 }, { \"x\": 107, \"y\": 152 }, { \"x\": 108, \"y\": 145 }, { \"x\": 109, \"y\": 141 }, { \"x\": 110, \"y\": 139 }, { \"x\": 112, \"y\": 133 }, { \"x\": 113, \"y\": 131 }, { \"x\": 116, \"y\": 127 }, { \"x\": 117, \"y\": 125 }, { \"x\": 119, \"y\": 122 }, { \"x\": 121, \"y\": 121 }, { \"x\": 123, \"y\": 120 }, { \"x\": 125, \"y\": 122 }, { \"x\": 125, \"y\": 125 }, { \"x\": 127, \"y\": 130 }, { \"x\": 128, \"y\": 133 }, { \"x\": 131, \"y\": 143 }, { \"x\": 136, \"y\": 153 }, { \"x\": 140, \"y\": 163 }, { \"x\": 144, \"y\": 172 }, { \"x\": 145, \"y\": 175 }, { \"x\": 151, \"y\": 189 }, { \"x\": 156, \"y\": 201 }, { \"x\": 161, \"y\": 213 }, { \"x\": 166, \"y\": 225 }, { \"x\": 169, \"y\": 233 }, { \"x\": 171, \"y\": 236 }, { \"x\": 174, \"y\": 243 }, { \"x\": 177, \"y\": 247 }, { \"x\": 178, \"y\": 249 }, { \"x\": 179, \"y\": 251 }, { \"x\": 180, \"y\": 253 }, { \"x\": 180, \"y\": 255 }, { \"x\": 179, \"y\": 257 }, { \"x\": 177, \"y\": 257 }, { \"x\": 174, \"y\": 255 }, { \"x\": 169, \"y\": 250 }, { \"x\": 164, \"y\": 247 }, { \"x\": 160, \"y\": 245 }, { \"x\": 149, \"y\": 238 }, { \"x\": 138, \"y\": 230 }, { \"x\": 127, \"y\": 221 }, { \"x\": 124, \"y\": 220 }, { \"x\": 112, \"y\": 212 }, { \"x\": 110, \"y\": 210 }, { \"x\": 96, \"y\": 201 }, { \"x\": 84, \"y\": 195 }, { \"x\": 74, \"y\": 190 }, { \"x\": 64, \"y\": 182 }, { \"x\": 55, \"y\": 175 }, { \"x\": 51, \"y\": 172 }, { \"x\": 49, \"y\": 170 }, { \"x\": 51, \"y\": 169 }, { \"x\": 56, \"y\": 169 }, { \"x\": 66, \"y\": 169 }, { \"x\": 78, \"y\": 168 }, { \"x\": 92, \"y\": 166 }, { \"x\": 107, \"y\": 164 }, { \"x\": 123, \"y\": 161 }, { \"x\": 140, \"y\": 162 }, { \"x\": 156, \"y\": 162 }, { \"x\": 171, \"y\": 160 }, { \"x\": 173, \"y\": 160 }, { \"x\": 186, \"y\": 160 }, { \"x\": 195, \"y\": 160 }, { \"x\": 198, \"y\": 161 }, { \"x\": 203, \"y\": 163 }, { \"x\": 208, \"y\": 163 }, { \"x\": 206, \"y\": 164 }, { \"x\": 200, \"y\": 167 }, { \"x\": 187, \"y\": 172 }, { \"x\": 174, \"y\": 179 }, { \"x\": 172, \"y\": 181 }, { \"x\": 153, \"y\": 192 }, { \"x\": 137, \"y\": 201 }, { \"x\": 123, \"y\": 211 }, { \"x\": 112, \"y\": 220 }, { \"x\": 99, \"y\": 229 }, { \"x\": 90, \"y\": 237 }, { \"x\": 80, \"y\": 244 }, { \"x\": 73, \"y\": 250 }, { \"x\": 69, \"y\": 254 }, { \"x\": 69, \"y\": 252 }],\n    name: \"other\"\n  }];\n\n  ShapeDetector.prototype.spot = function (points, patternName) {\n\n    if (patternName == null) {\n      patternName = '';\n    }\n\n    var distance, pattern, score;\n    var stroke = new Stroke(points);\n    var bestDistance = +Infinity;\n    var bestPattern = null;\n    var bestScore = 0;\n\n    for (var i = 0; i < this.patterns.length; i++) {\n      pattern = this.patterns[i];\n\n      if (pattern.name.indexOf(patternName) > -1) {\n        distance = stroke.distanceAtBestAngle(pattern);\n        score = 1.0 - distance / _halfDiagonal;\n\n        if (distance < bestDistance && score > this.threshold) {\n          bestDistance = distance;\n          bestPattern = pattern.name;\n          bestScore = score;\n        }\n      }\n    }\n\n    return {\n      pattern: bestPattern,\n      score: bestScore\n    };\n  };\n\n  ShapeDetector.prototype.learn = function (name, points) {\n\n    return this.patterns.push(new Stroke(points, name));\n  };\n\n  return ShapeDetector;\n});\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetWindow = resetWindow;\nvar touch = require('./touch');\nvar ui = require('./ui');\nvar overlays = require('./overlays');\nvar video = require('./video');\nvar timing = require('./timing');\nvar util = require('./util');\n\nfunction resetWindow() {\n  window.kan = {\n    currentColor: '#2B5E2E',\n    composition: [],\n    compositionInterval: null,\n    compositionTimeout: null,\n    soundTimeouts: [],\n    lastEvent: null,\n    interaction: false,\n    moves: [],\n    playing: false,\n    pinching: false,\n    pinchedGroup: null,\n    pinchedTut: null,\n    pathData: {},\n    shapePath: null,\n    prevAngle: null,\n    sides: [],\n    side: [],\n    corners: [],\n    lastScale: 1,\n    lastRotation: 0,\n    originalPosition: null,\n    tutorialCompletion: {\n      \"fill\": false,\n      \"pinch\": false,\n      \"swipe\": false\n    },\n    inactivityTimeout: null,\n    playPromptTimeout: null,\n    userHasDrawnFirstShape: false,\n    firstTimePlaying: true,\n    shapesSinceTut: 0,\n    refreshCheckInterval: null,\n    sha: null,\n    scheduledOverlay: null,\n    continueCountdownInterval: null\n  };\n}\n\n$(window).on('load', function () {\n  function run() {\n    resetWindow();\n    util.setSha();\n    ui.init();\n    touch.init();\n    overlays.init();\n    timing.init();\n  }\n\n  try {\n    run();\n  } catch (e) {\n    console.error(e);\n    setTimeout(function () {\n      // wait 5 seconds then reload\n      location.reload();\n    }, 5 * 1000);\n  }\n});\n\n},{\"./overlays\":7,\"./timing\":10,\"./touch\":11,\"./ui\":13,\"./util\":14,\"./video\":15}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.openOverlay = openOverlay;\nexports.resetContinueCountdown = resetContinueCountdown;\nexports.cardNavNext = cardNavNext;\nexports.closeAndResetOverlays = closeAndResetOverlays;\nexports.init = init;\nvar config = require('./../../config');\n\nvar touch = require('./touch');\nvar video = require('./video');\nvar timing = require('./timing');\nvar tutorial = require('./tutorial');\nvar util = require('./util');\n\nvar hammerCanvas = touch.hammerCanvas;\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar $cardsWrap = $body.find('.overlay.tips .card-wrap');\nvar $cardItems = $cardsWrap.find('article');\nvar cardsCount = $cardItems.length;\nvar $footer = $body.find('.overlay.tips .footer');\n\nvar $sharePhone = $body.find('#phone');\nvar $shareKeypad = $body.find('.keypad');\n\nvar allOverlays = ['intro', 'play-prompt', 'share-prompt', 'continue', 'tips', 'share'];\nvar overlayOpenClasses = allOverlays.map(function (overlay) {\n  return overlay + '-active';\n}).join(' ');\n\nvar overlayActiveClass = 'overlay-active';\n\nfunction openOverlay(overlayName) {\n  console.log('attempting to open overlay', overlayName);\n  if (window.kan.overlays === false) return;\n  if (allOverlays.includes(overlayName)) {\n    if (window.kan.pinching === true || window.kan.panning === true) {\n      if (overlayName === 'continue') {\n        timing.preventInactivityTimeout();\n      } else {\n        // console.log('scheduling overlay', overlayName);\n        window.kan.scheduledOverlay = overlayName;\n      }\n      return;\n    }\n    closeAndResetOverlays();\n    tutorial.hideContextualTuts();\n    $body.addClass(overlayActiveClass);\n    $body.find('.overlay:not(.tips)').on(tapEvent, function () {\n      closeAndResetOverlays();\n    });\n\n    switch (overlayName) {\n      case 'intro':\n        openIntroOverlay();\n        break;\n      case 'play-prompt':\n        if (util.anyShapesOnCanvas()) {\n          openPlayPromptOverlay();\n        } else {\n          window.kan.playPromptTimeout = setTimeout(function () {\n            openOverlay('play-prompt');\n          }, timing.playPromptDelay / 2);\n        }\n        break;\n      case 'share-prompt':\n        openSharePromptOverlay();\n        break;\n      case 'continue':\n        openContinueOverlay();\n        break;\n      case 'tips':\n        openTipsOverlay();\n        break;\n      case 'share':\n        openShareOverlay();\n        break;\n    }\n  } else {\n    console.log('unable to open unknown overlay', overlayName);\n  }\n}\n\nfunction openIntroOverlay() {\n  $body.addClass('intro-active');\n}\n\nfunction openPlayPromptOverlay() {\n  $body.addClass('play-prompt-active');\n}\n\nfunction openSharePromptOverlay() {\n  $body.addClass('share-prompt-active');\n}\n\nfunction resetContinueCountdown() {\n  $('.overlay.continue .countdown-num').html(parseInt(timing.continueInactivityDelay / 1000));\n  clearInterval(window.kan.continueCountdownInterval);\n}\n\nfunction openContinueOverlay() {\n  $body.addClass('continue-active');\n\n  resetContinueCountdown();\n  clearTimeout(window.kan.inactivityTimeout);\n  clearTimeout(window.kan.playPromptTimeout);\n\n  window.kan.continueCountdownInterval = setInterval(function () {\n    var $countdownNumWrap = $('.overlay.continue .countdown-num');\n    var count = parseInt($countdownNumWrap.html());\n    if (count > 1) {\n      $countdownNumWrap.html(count - 1);\n    }\n  }, 1000);\n\n  window.kan.inactivityTimeout = setTimeout(function () {\n    video.enterTutorialMode();\n  }, timing.continueInactivityDelay);\n}\n\nfunction openTipsOverlay() {\n  $body.addClass('tips-active');\n  activateTipsCards();\n}\n\nfunction openShareOverlay() {\n  $body.addClass('share-active');\n}\n\n// card slider navigation\nfunction cardNavNext() {\n  var $old = $body.find('.card-wrap .current');\n  var $new = $old.next().length ? $old.next() : $cardItems.first();\n  var $next = $new.next().length ? $new.next() : $cardItems.first();\n  var $third = $next.next().length ? $next.next() : $cardItems.first().next();\n  var slide = $new.index();\n  $old.removeClass().addClass('remove');\n  $new.removeClass().addClass('current');\n  $next.removeClass().addClass('next');\n  $third.removeClass().addClass('third');\n  updateCardCounter(slide + 1, cardsCount);\n  setTimeout(function () {\n    $old.removeClass();\n  }, 600);\n}\n\n// tips card interactions\nfunction cardInteractions() {\n  var timeOfLastInteraction = 0;\n\n  $body.find('.overlay').on(tapEvent, function (e) {\n    var currentTime = Date.now();\n    if (timeOfLastInteraction > currentTime - 250) {\n      return;\n    }\n    timeOfLastInteraction = currentTime;\n\n    if ($(e.target).closest('.card-wrap').length == 1) {\n      // directly on a card, navigate to the next one\n      cardNavNext();\n    } else {\n      // outside elements, close everything and reset\n      closeAndResetOverlays();\n    }\n  });\n}\n\nfunction resetTips() {\n  $cardItems.removeClass();\n  $sharePhone.html('');\n}\n\n// close and reset tips\nfunction closeAndResetOverlays() {\n  $body.removeClass('overlay-active');\n  $body.removeClass(overlayOpenClasses);\n  resetTips();\n}\n\n// deal a fresh stack of cards\nfunction activateTipsCards() {\n  var $new = $cardItems.first();\n  var $next = $new.next().length ? $new.next() : $cardItems.first();\n  var $third = $next.next().length ? $next.next() : $cardItems.first().next();\n  $cardItems.removeClass();\n  $new.removeClass().addClass('current');\n  $next.removeClass().addClass('next');\n  $third.removeClass().addClass('third');\n  updateCardCounter(1, cardsCount);\n}\n\n// counting cards\nfunction updateCardCounter(current, total) {\n  $footer.find('.current').html(current);\n  $footer.find('.next').html(total);\n}\n\n// phone inputs\nfunction phoneNumberInputs() {\n  // mask the output\n  $sharePhone.mask('000-000-0000');\n  // get interactions from the keypad\n  $shareKeypad.find('.num').on(tapEvent, function (e) {\n    var phoneNumber = $sharePhone.html().toString() + $(e.target).html().toString();\n    phoneNumber = $sharePhone.masked(phoneNumber);\n    $sharePhone.html(phoneNumber);\n  });\n  // clear the display\n  $shareKeypad.find('.clear').on(tapEvent, function (e) {\n    $sharePhone.html('');\n  });\n  // FIXME: send sms\n  // $shareKeypad.find('.send').on(tapEvent, e => {});\n}\n\n// \"randomly\" place fiddly bits on the cards\nfunction randomCardGraphics() {\n  $body.find('.card-wrap article').each(function (i, el) {\n    $(el).attr('data-bg', i);\n  });\n}\n\nfunction initTips() {\n  cardInteractions();\n}\n\nfunction initShare() {\n  phoneNumberInputs();\n  randomCardGraphics();\n}\n\nfunction init() {\n  initTips();\n  initShare();\n}\n\n},{\"./../../config\":1,\"./timing\":10,\"./touch\":11,\"./tutorial\":12,\"./util\":14,\"./video\":15}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.destroyGroupPops = destroyGroupPops;\nexports.fillInGroupPopsById = fillInGroupPopsById;\nexports.toggleFill = toggleFill;\nexports.cleanUpGroup = cleanUpGroup;\nexports.updatePops = updatePops;\nexports.getOutlineGroup = getOutlineGroup;\nexports.getTruedShape = getTruedShape;\nexports.getCompletedPath = getCompletedPath;\nexports.getShapePrediction = getShapePrediction;\nexports.getIntegerPoint = getIntegerPoint;\nexports.stringifyPoint = stringifyPoint;\nexports.parsePoint = parsePoint;\nexports.getClosestPointFromPathData = getClosestPointFromPathData;\nexports.processShapeData = processShapeData;\nexports.findInteriorCurves = findInteriorCurves;\nexports.getExtendedPath = getExtendedPath;\nexports.getBruteExtendedPath = getBruteExtendedPath;\nexports.getTrimmedPath = getTrimmedPath;\nexports.hitTestGroupBounds = hitTestGroupBounds;\nexports.hitTestBounds = hitTestBounds;\nvar ShapeDetector = require('./lib/shape-detector');\n\nvar config = require('./../../config');\n\nvar util = require('./util');\nvar color = require('./color');\n\nvar cornerThresholdDeg = exports.cornerThresholdDeg = 30;\nvar thresholdDistMultiplier = exports.thresholdDistMultiplier = 0.1;\n\nvar detector = exports.detector = new ShapeDetector(ShapeDetector.defaultShapes);\n\nvar shapeNames = exports.shapeNames = [\"line\", \"circle\", \"square\", \"triangle\", \"other\"];\n\nfunction clearPops() {\n  var pops = util.getAllPops();\n  pops.forEach(function (pop) {\n    return pop.remove();\n  });\n}\n\nfunction destroyGroupPops(group) {\n  console.log('destroying pops');\n  var groupPopsBefore = util.getGroupPops(group);\n  console.log('pops to be destroyed', groupPopsBefore);\n  if (groupPopsBefore.length > 0) {\n    groupPopsBefore.forEach(function (pop) {\n      return pop.remove();\n    });\n  }\n  var groupPopsAfter = util.getGroupPops(group);\n  console.log('group pops after', groupPopsAfter);\n}\n\nfunction fillInGroupPopsById(groupId) {\n  var group = paper.project.getItem({\n    className: 'Group',\n    match: function match(el) {\n      return el.id === groupId;\n    }\n  });\n\n  if (!!group && group.children.length > 0) {\n    group.children.forEach(function (groupChild) {\n      if (groupChild.name === 'loop') {\n        toggleFill(groupChild);\n      }\n    });\n  }\n}\n\nfunction toggleFill(item) {\n  var transparent = color.transparent;\n  // console.log('hit');\n  var parent = item.parent;\n\n  // console.log('hit item', item);\n  // console.log('hit parent', parent);\n\n  if (item.data.interior) {\n    // console.log('interior');\n    item.data.transparent = !item.data.transparent;\n\n    if (item.data.transparent) {\n      // console.log('transparent');\n      item.fillColor = transparent;\n      item.strokeColor = transparent;\n    } else {\n      // console.log('not transparent');\n      item.fillColor = parent.data.color;\n      item.strokeColor = parent.data.color;\n    }\n\n    window.kan.moves.push({\n      type: 'fillChange',\n      id: item.id,\n      fill: parent.data.color,\n      transparent: item.data.transparent\n    });\n  } else {\n    // console.log('not interior');\n    // check if item is a pop, because then we'll fill the pop's parent\n    if (!!item.data && item.data.pop === true) {\n      if (!!item.parent) {\n        if (config.pop === true) {\n          fillInGroupPopsById(item.parent.id);\n        }\n      }\n    }\n  }\n}\n\nfunction cleanUpGroup(group) {\n  console.log('cleaning up group');\n  var acceptableNames = ['mask', 'outer', 'shapePath', 'loop', 'pop'];\n\n  group.children.forEach(function (groupChild) {\n    if (groupChild.name === null || !acceptableNames.includes(groupChild.name) || !groupChild.length > 0) {\n      groupChild.remove();\n    }\n  });\n\n  return group;\n}\n\nfunction updatePops() {\n  var freshGroups = util.getFreshGroups();\n  var popCandidates = util.getPopCandidates();\n  var allPops = util.getAllPops();\n  popCandidates.reverse();\n  console.log('freshGroups', freshGroups);\n  console.log('popCandidates', popCandidates);\n  // clearPops();\n\n  freshGroups.forEach(function (freshGroup, i) {\n    // if (i >= 4) return;\n    console.log('freshGroup', freshGroup);\n\n    var freshOuter = freshGroup._namedChildren.mask[0];\n    freshOuter.bringToFront();\n    // freshOuter.visible = true;\n    // freshOuter.fillColor = 'black';\n    // freshOuter.selected = true;\n    // console.log('freshOuter', freshOuter);\n    // freshOuter.selected = true;\n    popCandidates.forEach(function (otherGroup, j) {\n      var otherGroupOuter = otherGroup._namedChildren.mask[0];\n      if (freshGroup.id !== otherGroup.id) {\n        // console.log('otherGroup', otherGroup);\n        // console.log('otherGroupOuter', otherGroupOuter);\n        // otherGroupOuter.fillColor = 'white';\n        otherGroupOuter.bringToFront();\n        var thisPop = freshOuter.intersect(otherGroupOuter);\n        if (!!thisPop && thisPop.length > 0) {\n          // const popColor = color.getIndexedPopColor(i + j);\n          var popColor = color.getRandomPop();\n          thisPop.fillColor = popColor;\n          thisPop.strokeColor = popColor;\n          thisPop.data.pop = true;\n          thisPop.name = 'pop';\n          thisPop.data.popGroup = freshGroup.id;\n          thisPop.visible = true;\n          thisPop.closed = true;\n          thisPop.bringToFront();\n          freshGroup.addChild(thisPop);\n        } else {\n          console.log('no pop');\n        }\n\n        cleanUpGroup(freshGroup);\n\n        // figure out if this pop intersects any other pops\n        // allPops.forEach((otherPop, k) => {\n        //   console.log('checking other pop', otherPop);\n        //   if (thisPop.id !== otherPop.id && thisPop.intersects(otherPop)) {\n        //     let popIntersection = thisPop.getIntersections(otherPop);\n        //     if (!!popIntersection && popIntersection.length > 0) {\n        //       popIntersection = new Path([popIntersection])\n        //       console.log('popIntersection', popIntersection);\n        //       // const popColor = color.getIndexedPopColor(i + j + k);\n        //       const popColor = color.getRandomPop();\n        //       popIntersection.data.pop = true;\n        //       popIntersection.fillColor = popColor\n        //       popIntersection.strokeColor = popColor;\n        //       popIntersection.visible = true;\n        //       popIntersection.closed = true;\n        //       popIntersection.bringToFront();\n        //     }\n        //   }\n        // });\n      }\n    });\n\n    freshGroup.data.fresh = false;\n  });\n}\n\nfunction getOutlineGroup(truedShape) {\n  // console.log('truedShape', truedShape);\n  var outerPath = new Path();\n  outerPath.name = 'outer';\n\n  var middlePath = new Path();\n  middlePath.name = 'middle';\n  var sizes = [];\n  var angle = void 0;\n\n  var firstTop = null,\n      firstBottom = null;\n  var lastTop = null,\n      lastBottom = null;\n\n  if (!(truedShape.length > 0)) return new Group(outerPath, middlePath);\n\n  // outerPath.add(truedShape.firstSegment.point);\n  middlePath.add(truedShape.firstSegment.point);\n\n  for (var i = 10; i < truedShape.length - 10; i += 20) {\n    while (sizes.length > 10) {\n      sizes.shift();\n    }\n\n    var size = Math.random() * 8; // This is just random variance\n    sizes.push(size);\n\n    var cumSize = 0;\n    for (var j = 0; j < sizes.length; j++) {\n      cumSize += sizes[j];\n    }\n    var avgSize = Math.max(5, (cumSize / sizes.length + size) / 2);\n\n    var prevPoint = truedShape.getPointAt(i - 10);\n    var nextPoint = truedShape.getPointAt(i + 10);\n    var point = new Point((prevPoint.x + nextPoint.x) / 2, (prevPoint.y + nextPoint.y) / 2);\n\n    angle = Math.atan2(nextPoint.y - prevPoint.y, nextPoint.x - prevPoint.x);\n\n    var topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n    var topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n    var top = new Point(topX, topY);\n\n    var bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n    var bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n    var bottom = new Point(bottomX, bottomY);\n\n    outerPath.add(top);\n    outerPath.insert(0, bottom);\n    middlePath.add(point);\n\n    if (i == 10) {\n      firstTop = top;\n      firstBottom = bottom;\n      // new Path.Line({\n      //   from: bottom,\n      //   to: top,\n      //   strokeWidth: 5,\n      //   strokeColor: 'red'\n      // });\n    } else {\n      lastTop = top;\n      lastBottom = bottom;\n      // new Path.Line({\n      //   from: bottom,\n      //   to: top,\n      //   strokeWidth: 5,\n      //   strokeColor: new Color(0, i / truedShape.length)\n      // });\n    }\n  }\n\n  // new Path.Line({\n  //   from: lastBottom,\n  //   to: lastTop,\n  //   strokeWidth: 5,\n  //   strokeColor: 'blue'\n  // });\n\n  if (truedShape.closed === true) {\n    var centerTop = new Point((firstTop.x + lastTop.x) / 2, (firstTop.y + lastTop.y) / 2);\n    var centerBottom = new Point((firstBottom.x + lastBottom.x) / 2, (firstBottom.y + lastBottom.y) / 2);\n    var center = new Point((centerTop.x + centerBottom.x) / 2, (centerTop.y + centerBottom.y) / 2);\n\n    outerPath.add(centerTop);\n    outerPath.insert(0, centerBottom);\n    middlePath.add(center);\n    // new Path.Line({\n    //   from: centerBottom,\n    //   to: centerTop,\n    //   strokeWidth: 5,\n    //   strokeColor: 'yellow'\n    // });\n    outerPath.add(firstTop);\n    outerPath.insert(0, firstBottom);\n    middlePath.closed = true;\n    // middlePath.add(point);\n    // console.log('closed');\n  }\n  //  else {\n  //   const lastCenter = ((lastTop.x + lastBottom.x) / 2, (lastTop.y + lastBottom.y) / 2);\n  //   const lastPoint = truedShape.lastSegment.point;\n  //   const adjustedLastPoint = new Point((lastCenter.x + lastPoint.x) / 2, (lastCenter.y + lastPoint.y) / 2);\n  //   // outerPath.add(adjustedLastPoint);\n  //   // outerPath.lastSegment.smooth();\n  // }\n\n  // outerPath.selected = true;\n\n  // new Path.Circle({\n  //   center: outerPath.firstSegment.point,\n  //   radius: 3,\n  //   fillColor: 'red'\n  // });\n  // new Path.Circle({\n  //   center: outerPath.firstSegment.next.point,\n  //   radius: 3,\n  //   fillColor: 'red'\n  // });\n  //\n  // new Path.Circle({\n  //   center: outerPath.lastSegment.point,\n  //   radius: 3,\n  //   fillColor: 'blue'\n  // });\n  // new Path.Circle({\n  //   center: outerPath.lastSegment.previous.point,\n  //   radius: 3,\n  //   fillColor: 'blue'\n  // });\n\n  outerPath.smooth();\n  middlePath.smooth();\n  outerPath.name = 'outer';\n  middlePath.name = 'middle';\n  var returnGroup = new Group(outerPath, middlePath);\n  return returnGroup;\n}\n\nfunction getTruedShape(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n  // console.log('pathClone', pathClone);\n  var completedPath = getCompletedPath(pathClone);\n  // completedPath.reduce();\n\n  // true the path!\n  var truedPath = completedPath;\n  // console.log('truedPath', truedPath);\n\n  truedPath.strokeWidth = pathClone.strokeWidth;\n\n  pathClone.remove();\n  return truedPath;\n}\n\n// extend or trim path if the ends are close\nfunction getCompletedPath(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n  pathClone.reduce();\n  pathClone.simplify();\n\n  var intersections = pathClone.getIntersections();\n\n  if (intersections.length > 0) {\n    // trim path if ends are close\n    var trimmedPath = getTrimmedPath(pathClone);\n\n    pathClone.remove();\n\n    return trimmedPath;\n  } else {\n    // extend path to see if an intersection is near\n    var extendedPath = getExtendedPath(pathClone);\n    var _intersections = extendedPath.getIntersections();\n\n    // pathClone.remove();\n\n    if (_intersections.length > 0) {\n      // trim extra extended path\n      var _trimmedPath = getTrimmedPath(extendedPath);\n      extendedPath.remove();\n      return _trimmedPath;\n    } else {\n      // extended path does not intersect, return the original path\n      extendedPath.replaceWith(getBruteExtendedPath(pathClone));\n      if (extendedPath !== null) {\n        var _intersections2 = extendedPath.getIntersections();\n\n        if (_intersections2.length > 0) {\n          var _trimmedPath2 = getTrimmedPath(extendedPath);\n          extendedPath.remove();\n          return _trimmedPath2;\n        }\n\n        if (!!extendedPath && extendedPath.length > 0) {\n          extendedPath.remove();\n        }\n      }\n\n      pathClone.visible = true;\n      return pathClone;\n    }\n  }\n}\n\nfunction getShapePrediction(path) {\n  var prediction = {};\n\n  var shapeJSON = path.exportJSON();\n  var shapeData = processShapeData(shapeJSON);\n  // console.log(JSON.stringify(shapeData));\n  var shapePrediction = detector.spot(shapeData);\n\n  if (shapePrediction.score === 0) {\n    // algorithm doesn't like vertical lines for some reason\n    // if the certainty is 0 it's probably a line\n    prediction.pattern = \"line\";\n    prediction.score = 0.9;\n  } else {\n    if (shapePrediction.score > 0.5) {\n      prediction.pattern = shapePrediction.pattern;\n    } else {\n      prediction.pattern = \"other\";\n    }\n    prediction.score = shapePrediction.score;\n  }\n\n  console.log('shape prediction', prediction);\n\n  return prediction;\n}\n\n// floors the coordinates of a point\nfunction getIntegerPoint(point) {\n  return new Point(Math.floor(point.x), Math.floor(point.y));\n}\n\nfunction stringifyPoint(point) {\n  return Math.floor(point.x) + ',' + Math.floor(point.y);\n}\n\nfunction parsePoint(pointStr) {\n  var split = pointStr.split(',').map(function (num) {\n    return Math.floor(num);\n  });\n\n  if (split.length >= 2) {\n    return new Point(split[0], split[1]);\n  }\n\n  return null;\n}\n\nfunction getClosestPointFromPathData(point, pathData) {\n  var leastDistance = void 0,\n      closestPoint = void 0;\n\n  Base.each(pathData, function (datum, i) {\n    var distance = point.getDistance(datum.point);\n    if (!leastDistance || distance < leastDistance) {\n      leastDistance = distance;\n      closestPoint = datum.point;\n    }\n  });\n\n  return closestPoint || point;\n}\n\nfunction processShapeData(json) {\n  var returnShape = [];\n  var jsonObj = JSON.parse(json)[1]; // zero index is stringified type (e.g. \"Path\")\n\n  if ('segments' in jsonObj) {\n    var segments = jsonObj.segments;\n    Base.each(segments, function (segment, i) {\n      if (segment.length === 3) {\n        var positionInfo = segment[0]; // indexes 1 and 2 are superfluous matrix details\n        returnShape.push({\n          x: positionInfo[0],\n          y: positionInfo[1]\n        });\n      } else {\n        returnShape.push({\n          x: segment[0],\n          y: segment[1]\n        });\n      };\n    });\n  }\n  return returnShape;\n}\n\nfunction findInteriorCurves(path) {\n  var transparent = color.transparent;\n\n  var interiorCurves = [];\n\n  var pathClone = path.clone();\n  var intersections = pathClone.getIntersections();\n\n  if (intersections.length > 0) {\n    var dividedPath = pathClone.resolveCrossings();\n    // console.log(dividedPath);\n\n    if (dividedPath.className === 'CompoundPath') {\n      Base.each(dividedPath.children, function (child, i) {\n        if (child.length > 0 && child.closed) {\n          var enclosedLoop = child.clone();\n          if (pathClone.closed) {\n            enclosedLoop.fillColor = pathClone.strokeColor;\n            enclosedLoop.data.interior = true;\n            enclosedLoop.data.transparent = false;\n          } else {\n            enclosedLoop.fillColor = transparent;\n            enclosedLoop.data.transparent = true;\n          }\n          enclosedLoop.data.interior = true;\n          enclosedLoop.visible = true;\n          enclosedLoop.closed = true;\n          interiorCurves.push(enclosedLoop);\n        }\n      });\n    } else {\n      if (pathClone.closed) {\n        var enclosedLoop = pathClone.clone();\n        enclosedLoop.visible = true;\n        enclosedLoop.fillColor = pathClone.strokeColor;\n        enclosedLoop.data.interior = true;\n        enclosedLoop.data.transparent = false;\n        interiorCurves.push(enclosedLoop);\n      }\n    }\n  } else {\n    if (pathClone.closed) {\n      var _enclosedLoop = pathClone.clone();\n      _enclosedLoop.visible = true;\n      _enclosedLoop.fillColor = pathClone.strokeColor;\n      _enclosedLoop.data.interior = true;\n      _enclosedLoop.data.transparent = false;\n      interiorCurves.push(_enclosedLoop);\n    }\n  }\n\n  return interiorCurves;\n}\n\nfunction getExtendedPath(path) {\n  var bruteForce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var extendedPath = path.clone();\n  extendedPath.visible = false;\n\n  var thresholdDist = thresholdDistMultiplier * extendedPath.length;\n\n  var firstSegment = extendedPath.firstSegment;\n  var nextSegment = firstSegment.next;\n  var startAngle = Math.atan2(nextSegment.point.y - firstSegment.point.y, nextSegment.point.x - firstSegment.point.x); // rad\n  var inverseStartAngle = startAngle + Math.PI;\n  var extendedStartPoint = new Point(firstSegment.point.x + Math.cos(inverseStartAngle) * thresholdDist / 2, firstSegment.point.y + Math.sin(inverseStartAngle) * thresholdDist / 2);\n  extendedPath.insert(0, extendedStartPoint);\n\n  var lastSegment = extendedPath.lastSegment;\n  var penSegment = lastSegment.previous; // penultimate\n  var endAngle = Math.atan2(lastSegment.point.y - penSegment.point.y, lastSegment.point.x - penSegment.point.x); // rad\n  var extendedEndPoint = new Point(lastSegment.point.x + Math.cos(endAngle) * thresholdDist / 2, lastSegment.point.y + Math.sin(endAngle) * thresholdDist / 2);\n  extendedPath.add(extendedEndPoint);\n\n  // extendedPath.visible = true;\n\n  return extendedPath;\n}\n\nfunction getBruteExtendedPath(path) {\n  var extendedPath = path.clone();\n  extendedPath.visible = false;\n\n  var thresholdDist = thresholdDistMultiplier * extendedPath.length;\n  var firstPoint = extendedPath.firstSegment.point;\n  var lastPoint = extendedPath.lastSegment.point;\n\n  if (firstPoint.getDistance(lastPoint) < thresholdDist) {\n    extendedPath.insert(0, lastPoint);\n    extendedPath.add(firstPoint);\n    extendedPath.closed = true;\n    extendedPath.unite();\n    var crossings = extendedPath.resolveCrossings();\n    if (!!crossings && !!crossings.children && crossings.children.length > 0) {\n      (function () {\n        var maxArea = 0,\n            maxChild = null;\n        crossings.children.forEach(function (child) {\n          if (child.area > maxArea) {\n            maxChild = child;\n            maxArea = child.area;\n          }\n        });\n\n        extendedPath = maxChild;\n      })();\n    }\n  }\n\n  return extendedPath;\n}\n\nfunction getTrimmedPath(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n\n  var firstPoint = pathClone.firstSegment.point;\n  var lastPoint = pathClone.lastSegment.point;\n  var thresholdDist = thresholdDistMultiplier * pathClone.length;\n\n  var intersections = pathClone.getIntersections();\n  intersections.forEach(function (intersection, i) {\n    if (intersection.offset === 0) {\n      intersections.splice(i, 1);\n    }\n  });\n\n  console.log('intersections', intersections);\n\n  if (intersections.length == 1) {\n    for (var i = 0; i < intersections.length; i++) {\n      var intersectionPoint = intersections[i].point;\n\n      // if the average of the distance between the first and last points and the intersection point is within the threshold, trim\n      if (firstPoint.getDistance(intersectionPoint) + lastPoint.getDistance(intersectionPoint) < 2 * thresholdDist) {\n        // console.log('trimming path');\n        var dividedPath = pathClone.clone(); // resolve crossings seems to modify the path it was passed, so make an extra clone to be safe\n        dividedPath.visible = false;\n        var pathCrossings = dividedPath.resolveCrossings();\n\n        if (pathCrossings.className === 'CompoundPath' && pathCrossings.children.length > 0) {\n          for (var j = 0; j < pathCrossings.children.length; j++) {\n            var child = pathCrossings.children[j];\n            if (child.closed) {\n              // child.selected = true;\n              dividedPath = dividedPath.subtract(child);\n            }\n          }\n        }\n\n        // dividedPath.selected = true;\n\n        var trimmedPath = pathClone.subtract(dividedPath);\n        if (trimmedPath.length === 0) return pathClone;\n        if (trimmedPath.className === 'CompoundPath' && trimmedPath.children.length > 0) {\n          var _ret2 = function () {\n            var closedChildren = [];\n            trimmedPath.children.forEach(function (child, i) {\n              if (child.length > 0 && child.closed) {\n                var childClone = child.clone();\n                childClone.visible = false;\n                closedChildren.push(childClone);\n              }\n            });\n\n            if (closedChildren.length > 0) {\n              if (closedChildren.length > 1) {\n                // for some reason there are more than one closed children, merge them\n                var accumulator = closedChildren[0];\n\n                for (var _j = 1; _j < closedChildren.length; _j++) {\n                  accumulator = accumulator.unite(closedChildren[_j]);\n                }\n\n                if (accumulator.length > 0 && accumulator.className === 'Path') {\n                  // console.log('trimmed accumulator', accumulator);\n                  var newPath = new Path();\n                  newPath.copyContent(accumulator);\n                  newPath.copyAttributes(pathClone);\n                  accumulator.remove();\n                  pathClone.remove();\n                  dividedPath.remove();\n                  trimmedPath.remove();\n                  return {\n                    v: newPath\n                  };\n                }\n              }\n\n              pathClone.remove();\n              dividedPath.remove();\n              trimmedPath.remove();\n              // console.log('trimmed closedChildren[0]', closedChildren[0]);\n              return {\n                v: closedChildren[0]\n              };\n            }\n          }();\n\n          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n        }\n\n        // console.log('trimmed path return', trimmedPath);\n        // console.log('path clone', pathClone);\n        // console.log('dividedPath', dividedPath);\n        pathClone.remove();\n        dividedPath.remove();\n        return trimmedPath;\n      }\n    }\n\n    // no close intersection were found so nothing can be trimmed\n    return pathClone;\n  } else {\n    return path;\n  }\n}\n\nfunction hitTestGroupBounds(point) {\n  var groups = util.getAllGroups();\n  return hitTestBounds(point, groups);\n}\n\nfunction hitTestBounds(point, children) {\n  if (!point) return null;\n\n  for (var i = children.length - 1; i >= 0; i--) {\n    var child = children[i];\n    var bounds = child.strokeBounds;\n    if (point.isInside(child.strokeBounds)) {\n      return child;\n    }\n  }\n\n  return null;\n}\n\n},{\"./../../config\":1,\"./color\":4,\"./lib/shape-detector\":5,\"./util\":14}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getShapeSoundObj = getShapeSoundObj;\nexports.startPlaying = startPlaying;\nexports.stopPlaying = stopPlaying;\nexports.initShapeSounds = initShapeSounds;\nexports.formatShapeSoundData = formatShapeSoundData;\nexports.quantizeLength = quantizeLength;\nexports.quantizePosition = quantizePosition;\nexports.removeShapeFromComposition = removeShapeFromComposition;\nexports.clearSoundTimeouts = clearSoundTimeouts;\nexports.startComposition = startComposition;\nexports.stopComposition = stopComposition;\nexports.getTrimmedCompositionObj = getTrimmedCompositionObj;\nrequire('howler');\n\nvar ui = require('./ui');\nvar shape = require('./shape');\nvar color = require('./color');\nvar overlays = require('./overlays');\nvar tutorial = require('./tutorial');\n\nvar sounds = initShapeSounds();\n\nvar $body = $('body');\n\nvar measures = 4;\nvar bpm = 120;\nvar beatLength = 60 / bpm * 1000; // ms\nvar measureLength = beatLength * 4;\nvar compositionLength = exports.compositionLength = measureLength * measures;\n\nvar playingClass = exports.playingClass = 'playing';\nvar playEnabledClass = exports.playEnabledClass = 'play-enabled';\n\nfunction getShapeSoundObj(path) {\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n\n  var shapePrediction = shape.getShapePrediction(path);\n  var colorName = color.getPathColorName(path);\n  if (colorName === null) colorName = 'black'; // just in case\n\n  var quantizedSoundStartTime = quantizeLength(path.bounds.x / viewWidth * compositionLength); // ms\n  var quantizedSoundDuration = quantizeLength(path.bounds.width / viewWidth * compositionLength); // ms\n\n  var soundObj = {};\n  soundObj.sound = sounds[shapePrediction.pattern];\n  soundObj.startTime = quantizedSoundStartTime;\n  soundObj.duration = quantizedSoundDuration;\n  soundObj.pathId = path.id;\n  soundObj.spriteName = colorName;\n  if (!!path.parent && path.parent.className === 'Group') {\n    soundObj.groupId = path.parent.id;\n  }\n\n  return soundObj;\n}\n\nfunction startPlaying() {\n  console.log('first time', window.kan.firstTimePlaying);\n  if ($body.hasClass(playEnabledClass)) {\n    $body.addClass(playingClass);\n\n    Howler.mute(false);\n\n    window.kan.playing = true;\n\n    if (window.kan.firstTimePlaying === true) {\n      window.kan.firstTimePlaying = false;\n      startComposition(window.kan.composition, false);\n    } else {\n      startComposition(window.kan.composition, true);\n    }\n  } else {\n    window.kan.playing = false;\n    $body.removeClass(playingClass);\n    // console.log('play is not enabled');\n  }\n}\n\nfunction stopPlaying() {\n  var mute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!!mute) {\n    Howler.mute(true);\n  }\n\n  window.kan.playing = false;\n  $body.removeClass(playingClass);\n\n  stopComposition();\n}\n\nfunction initShapeSounds() {\n  var returnSounds = {};\n  var extensions = ['ogg', 'm4a', 'mp3', 'ac3'];\n\n  var shapeNames = shape.shapeNames;\n  Base.each(shapeNames, function (shapeName) {\n    var shapeSoundJSONPath = './audio/shapes/' + shapeName + '/' + shapeName + '.json';\n\n    $.getJSON(shapeSoundJSONPath, function (resp) {\n      var shapeSoundData = formatShapeSoundData(shapeName, resp);\n      var sound = new Howl(shapeSoundData);\n      returnSounds[shapeName] = sound;\n    });\n  });\n\n  return returnSounds;\n}\n\nfunction formatShapeSoundData(shapeName, data) {\n  var returnData = {};\n\n  returnData.src = data.urls.map(function (url) {\n    return './audio/shapes/' + shapeName + '/' + url;\n  });\n  returnData.sprite = data.sprite;\n  returnData.loop = false;\n\n  return returnData;\n}\n\nfunction quantizeLength(duration) {\n  var smallestDuration = 60 / bpm;\n  var returnDuration = Math.floor(duration / smallestDuration) * smallestDuration;\n\n  if (returnDuration > 0) {\n    return returnDuration;\n  } else {\n    // always return something greater than zero\n    return smallestDuration;\n  }\n}\n\nfunction quantizePosition(position, viewWidth) {\n  var smallestInterval = viewWidth / (4 * measures);\n  return returnPosition = Math.floor(position / smallestInterval) * smallestInterval;\n}\n\nfunction animateShapePlay(shape) {\n  var item = paper.project.getItem({\n    className: 'Path',\n    match: function match(el) {\n      return el.id === shape.pathId;\n    }\n  });\n  if (!!item) {\n    var group = item.parent;\n    group.data.animating = true;\n    var totalDuration = measureLength / 2;\n    group.animate([{\n      properties: {\n        scale: 1,\n        rotate: -5\n      },\n      settings: {\n        duration: totalDuration / 4,\n        easing: \"easeInOut\"\n      }\n    }, {\n      properties: {\n        scale: 1.15,\n        rotate: 5\n      },\n      settings: {\n        duration: totalDuration / 2,\n        easing: \"easeInOut\"\n      }\n    }, {\n      properties: {\n        scale: 1,\n        rotate: 0\n      },\n      settings: {\n        duration: totalDuration / 4,\n        easing: \"easeInOut\",\n        complete: function complete() {\n          this.data.animating = false;\n          // console.log('animation step 3')\n        }\n      }\n    }]);\n  }\n}\n\nfunction removeShapeFromComposition(shapeGroup) {\n  var _loop = function _loop(i) {\n    var sound = window.kan.composition[i];\n\n    if ('groupId' in sound) {\n      if (sound.groupId === shapeGroup.id) {\n        window.kan.composition.splice(i, 1);\n        return {\n          v: void 0\n        };\n      }\n    } else if ('pathId' in sound) {\n      var item = getItems({\n        match: function match(el) {\n          return el.id === sound.pathId;\n        }\n      });\n      if (item.length > 0) {\n        if (!!item.parent && item.parent.className === 'Group' && item.parent.id === shapeGroup.id) {\n          window.kan.composition.splice(i, 1);\n          return {\n            v: void 0\n          };\n        }\n      }\n    }\n  };\n\n  for (var i = 0; i < window.kan.composition.length; i++) {\n    var _ret = _loop(i);\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n}\n\nfunction clearSoundTimeouts() {\n  if (window.kan.soundTimeouts.length > 0) {\n    window.kan.soundTimeouts.forEach(function (soundTimeout) {\n      clearTimeout(soundTimeout);\n    });\n  }\n\n  window.kan.soundTimeouts = [];\n}\n\nfunction startComposition(composition) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  stopComposition();\n  tutorial.hideContextualTuts();\n\n  clearTimeout(window.kan.playPromptTimeout);\n\n  var iterations = 0;\n  playCompositionFirstTime();\n\n  function playCompositionFirstTime() {\n    clearSoundTimeouts();\n    console.log('playing composition first time');\n    var trimmedCompositionObj = getTrimmedCompositionObj(composition);\n\n    Base.each(trimmedCompositionObj.composition, function (shape, i) {\n      var soundTimeout = setTimeout(function () {\n        if (!window.kan.playing) {\n          console.log('not playing, returing');\n          return;\n        }\n\n        if (shape.spriteName === null) {\n          console.log('%cshape is null', 'color:red', shape);\n          return;\n        } else {\n          // console.log('not null', shape);\n        }\n        shape.sound.play(shape.spriteName);\n        animateShapePlay(shape);\n      }, shape.startTime);\n      window.kan.soundTimeouts.push(soundTimeout);\n    });\n\n    iterations++;\n    window.kan.compositionTimeout = setTimeout(repeatComposition, compositionLength - trimmedCompositionObj.startTime);\n  }\n\n  function playCompositionOnce() {\n    clearSoundTimeouts();\n    console.log('repeat');\n    Base.each(composition, function (shape, i) {\n      var soundTimeout = setTimeout(function () {\n        if (!window.kan.playing) {\n          console.log('not playing, returing');\n          return;\n        }\n\n        shape.sound.play(shape.spriteName);\n        animateShapePlay(shape);\n      }, shape.startTime);\n      window.kan.soundTimeouts.push(soundTimeout);\n    });\n    iterations++;\n  }\n\n  function repeatComposition() {\n    if (loop === true) {\n      playCompositionOnce();\n      window.kan.compositionInterval = setInterval(playCompositionOnce, compositionLength);\n    } else {\n      if (iterations < 2) {\n        playCompositionOnce();\n        setTimeout(repeatComposition, compositionLength);\n      } else {\n        stopPlaying();\n        overlays.openOverlay('share-prompt');\n      }\n    }\n  }\n}\n\nfunction stopComposition() {\n  clearInterval(window.kan.compositionInterval);\n  clearTimeout(window.kan.compositionTimeout);\n  clearSoundTimeouts();\n}\n\nfunction getTrimmedCompositionObj(composition) {\n  var firstTime = 0;\n  var trimmedComposition = [];\n  var startTime = getCompositionStartTime(composition);\n\n  composition.forEach(function (sound) {\n    var modifiedSound = sound;\n    modifiedSound.startTime -= startTime;\n    if (modifiedSound.startTime < 0) modifiedSound.startTime = 0; // this shouldn't happen\n    trimmedComposition.push(modifiedSound);\n  });\n\n  return {\n    composition: trimmedComposition,\n    startTime: startTime\n  };\n}\n\nfunction getCompositionStartTime(composition) {\n  var startTime = compositionLength;\n\n  composition.forEach(function (sound) {\n    // console.log(sound);\n    // console.log(sound.startTime)\n    if ('startTime' in sound && sound.startTime < startTime) {\n      startTime = sound.startTime;\n    }\n  });\n\n  // console.log('start time', startTime);\n\n  if (startTime !== compositionLength) {\n    return startTime;\n  } else {\n    return 0;\n  }\n}\n\n},{\"./color\":4,\"./overlays\":7,\"./shape\":8,\"./tutorial\":12,\"./ui\":13,\"howler\":3}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.preventInactivityTimeout = preventInactivityTimeout;\nvar overlays = require('./overlays');\nvar video = require('./video');\nvar util = require('./util');\n\nvar $body = $('body');\n\nvar drawInactivityDelay = exports.drawInactivityDelay = 40 * 1000; // ms\nvar continueInactivityDelay = exports.continueInactivityDelay = 30 * 1000; // ms\nvar playPromptDelay = exports.playPromptDelay = 60 * 1000; // ms;\nvar inputDelay = exports.inputDelay = 100; // ms\nvar refreshCheckDelay = exports.refreshCheckDelay = 60 * 1000; // ms\nvar overlayDelay = exports.overlayDelay = 1000; // ms\n\nfunction init() {\n  if (window.location.hash.length > 0 && window.location.hash == '#dev') {\n    window.kan.overlays = false;\n    video.pauseVideo();\n    video.exitTutorialMode();\n  } else {\n    video.enterTutorialMode();\n  }\n}\n\nfunction preventInactivityTimeout() {\n  console.log('prevent timeout: ' + util.getTime());\n  // overlays.closeAndResetOverlays();\n\n  clearTimeout(window.kan.inactivityTimeout);\n  clearInterval(window.kan.continueCountdownInterval);\n\n  window.kan.inactivityTimeout = setTimeout(function () {\n    overlays.openOverlay('continue');\n  }, drawInactivityDelay);\n}\n\n},{\"./overlays\":7,\"./util\":14,\"./video\":15}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nrequire('hammerjs');\n\nvar config = require('./../../config');\nvar sound = require('./sound');\nvar color = require('./color');\nvar shape = require('./shape');\nvar util = require('./util');\nvar tutorial = require('./tutorial');\nvar timing = require('./timing');\nvar overlays = require('./overlays');\nvar ui = require('./ui');\n\nvar $body = $('body');\n\nvar hitOptions = {\n  segments: false,\n  stroke: true,\n  fill: true,\n  tolerance: 5\n};\n\nvar minShapeSize = 100;\nvar maxShapeLength = 5000;\nvar maxScaleFactor = 0.8;\n\nvar outerPath = void 0;\nvar sizes = [];\nvar size = void 0;\nvar cumSize = void 0;\nvar prevPoint = void 0;\n\nvar hammerTips = exports.hammerTips = void 0;\nvar hammerCanvas = exports.hammerCanvas = void 0;\n\nfunction init() {\n  exports.hammerTips = hammerTips = new Hammer.Manager(ui.tipsOverlay);\n  hammerTips.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_ALL }));\n  hammerTips.on('swipe', overlays.cardNavNext);\n\n  exports.hammerCanvas = hammerCanvas = new Hammer.Manager(ui.canvas);\n  hammerCanvas.add(new Hammer.Tap({ event: 'doubletap', taps: 2, interval: 400, time: 150, posThreshold: 50 }));\n  hammerCanvas.add(new Hammer.Tap({ event: 'singletap' }));\n  hammerCanvas.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n  hammerCanvas.add(new Hammer.Pinch());\n\n  hammerCanvas.get('doubletap').recognizeWith('singletap');\n  // hammerCanvas.get('singletap').requireFailure('doubletap');\n  hammerCanvas.get('pan').requireFailure('pinch');\n  hammerCanvas.get('pinch').requireFailure('pan');\n\n  // hammerCanvas.on('singletap', singleTap);\n  hammerCanvas.on('doubletap', doubleTap);\n\n  hammerCanvas.on('panstart', panStart);\n  hammerCanvas.on('panmove', panMove);\n  hammerCanvas.on('panend', panEnd);\n  // hammerCanvas.on('pancancel', panCancel);\n\n  hammerCanvas.on('pinchstart', pinchStart);\n  hammerCanvas.on('pinchmove', pinchMove);\n  hammerCanvas.on('pinchend', pinchEnd);\n  // hammerCanvas.on('pinchcancel', pinchCancel);\n}\n\nfunction enablePanAndPinchEvents() {\n  enablePanEvents();\n  enablePinchEvents();\n}\n\nfunction enableTapEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n  hammerCanvas.get('singletap').set({ enable: enable });\n  hammerCanvas.get('doubletap').set({ enable: enable });\n}\n\nfunction disableTapEvents() {\n  enableTapEvents(false);\n}\n\nfunction enablePanEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n\n  hammerCanvas.get('pan').set({ enable: enable });\n  // hammerCanvas.get('panstart').set({enable: enable});\n  // hammerCanvas.get('panmove').set({enable: enable});\n  // hammerCanvas.get('panend').set({enable: enable});\n}\n\nfunction disablePanEvents() {\n  enablePanEvents(false);\n}\n\nfunction enablePinchEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n\n  hammerCanvas.get('pinch').set({ enable: enable });\n  // hammerCanvas.get('pinchstart').set({enable: enable});\n  // hammerCanvas.get('pinchmove').set({enable: enable});\n  // hammerCanvas.get('pinchend').set({enable: enable});\n}\n\nfunction disablePinchEvents() {\n  enablePinchEvents(false);\n}\n\nfunction singleTap(event) {\n  // console.log(event.target);\n  // event.preventDefault();\n  // if (!eventTargetIsOnCanvas(event)) return;\n  tutorial.hideContextualTuts();\n  // $(event.target).click();\n\n  // sound.stopPlaying();\n  // if (!eventTargetIsOnCanvas(event)) return;\n  // console.log(event);\n  // tutorial.hideContextualTuts();\n  //\n  // sound.stopPlaying();\n  //\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  if (hitResult) {\n    var item = hitResult.item;\n    // item.selected = !item.selected;\n    console.log(item);\n  }\n}\n\nfunction doubleTap(event) {\n  event.preventDefault();\n  // console.log('doubletap');\n\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  if (!eventTargetIsOnCanvas(event)) return;\n\n  if (hitResult) {\n    shape.toggleFill(hitResult.item);\n    tutorial.hideContextualTutByName('fill');\n  } else {\n    window.kan.pinchedGroup = null;\n    console.log('hit no item');\n  }\n}\n\nfunction panStart(event) {\n  // console.log(event);\n  // console.log('panstart');\n  // paper.project.activeLayer.removeChildren(); // REMOVE\n  // event.preventDefault();\n\n  if (!eventTargetIsOnCanvas(event)) {\n    window.kan.panning = false;\n    timing.preventInactivityTimeout();\n    // check if tips modal is up\n    if ($body.hasClass('overlay-active tips-active')) {\n      // if so, go to next tip card\n      overlays.cardNavNext();\n    }\n    event.srcEvent.stopPropagation();\n    return;\n  }\n\n  window.kan.panning = true;\n  tutorial.hideContextualTuts();\n\n  hammerCanvas.off('panstart');\n  // hammerCanvas.get('pan').set({enable: false});\n  disablePinchEvents();\n  disableTapEvents();\n\n  // ignore other touch inputs\n  // if (window.kan.pinching) return;\n  // if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n  // if (event.changedPointers.length > 1) {\n  //   console.log('event.changedPointers > 1');\n  // }\n\n  sound.stopPlaying();\n\n  window.kan.prevAngle = Math.atan2(event.velocityY, event.velocityX);\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  outerPath = new Path();\n  outerPath.fillColor = window.kan.currentColor;\n  // outerPath.fillColor = new Color(0, 0.5);\n\n  sizes = [];\n\n  var shapePath = new Path({\n    strokeColor: window.kan.currentColor,\n    name: 'shapePath',\n    strokeWidth: 5,\n    visible: false,\n    strokeCap: 'round'\n  });\n\n  shapePath.add(point);\n\n  // window.kan.corners = [point];\n\n  // window.kan.sides = [];\n  // window.kan.side = [point];\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    first: true\n  };\n\n  window.kan.shapePath = shapePath;\n}\n\nfunction panMove(event) {\n  console.log('panmove');\n  // event.preventDefault();\n  if (!eventTargetIsOnCanvas(event)) {\n    event.srcEvent.stopPropagation();\n    return;\n  }\n  if (window.kan.panning !== true) return;\n\n  var thresholdAngleRad = util.rad(shape.cornerThresholdDeg);\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var angle = Math.atan2(event.velocityY, event.velocityX);\n  var prevAngle = window.kan.prevAngle;\n  var angleDelta = util.angleDelta(angle, prevAngle);\n  window.kan.prevAngle = angle;\n\n  // let side = window.kan.side;\n  // let sides = window.kan.sides;\n\n  // if (angleDelta > thresholdAngleRad) {\n  //   if (side.length > 0) {\n  //     // console.log('corner');\n  //     let cornerPoint = point;\n  //     // new Path.Circle({\n  //     //   center: cornerPoint,\n  //     //   radius: 15,\n  //     //   strokeColor: 'black'\n  //     // });\n  //     // window.kan.corners.push(cornerPoint);\n  //     sides.push(side);\n  //     side = [];\n  //   }\n  // }\n\n  // side.push(point);\n\n  while (sizes.length > 10) {\n    sizes.shift();\n  }\n  if (sizes.length > 0) {\n    var dist = prevPoint.getDistance(point);\n\n    // These are based on acceleration\n    // size = 30 - Math.min(dist * 0.3, 30);\n    // size = dist * 3 + 5;\n    size = Math.random() * 10; // This is just random variance\n\n    cumSize = 0;\n    for (var j = 0; j < sizes.length; j++) {\n      cumSize += sizes[j];\n    }\n    // const avgSize = ((cumSize / sizes.length) + size) / 2;\n    var avgSize = Math.max(5, (cumSize / sizes.length + size) / 2);\n\n    var halfPointX = (point.x + prevPoint.x) / 2;\n    var halfPointY = (point.y + prevPoint.y) / 2;\n    var halfPoint = new Point(halfPointX, halfPointY);\n\n    var topX = halfPoint.x + Math.cos(angle - Math.PI / 2) * avgSize;\n    var topY = halfPoint.y + Math.sin(angle - Math.PI / 2) * avgSize;\n    var top = new Point(topX, topY);\n\n    var bottomX = halfPoint.x + Math.cos(angle + Math.PI / 2) * avgSize;\n    var bottomY = halfPoint.y + Math.sin(angle + Math.PI / 2) * avgSize;\n    var bottom = new Point(bottomX, bottomY);\n\n    outerPath.add(top);\n    outerPath.insert(0, bottom);\n    outerPath.smooth();\n  } else {\n    size = 5;\n  }\n\n  sizes.push(size);\n  prevPoint = point;\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    speed: Math.abs(event.overallVelocity),\n    angle: angle\n  };\n\n  window.kan.shapePath.add(point);\n  // window.kan.sides = sides;\n  // window.kan.side = side;\n\n  paper.view.draw();\n}\n\nfunction panEnd(event) {\n  console.log('panend');\n  // event.preventDefault();\n  if (!eventTargetIsOnCanvas(event)) {\n    event.srcEvent.stopPropagation();\n    return;\n  }\n  if (window.kan.panning !== true) return;\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var transparent = color.transparent;\n  var colorName = color.getColorName(window.kan.currentColor);\n\n  var shapePath = window.kan.shapePath;\n  // let side = window.kan.side;\n  // let sides = window.kan.sides;\n  // let corners = window.kan.corners;\n\n  shapePath.add(point);\n  outerPath.visible = false;\n\n  if (shapePath.length < minShapeSize || shapePath.length > maxShapeLength) {\n    console.log('path is too short or too long');\n    shapePath.remove();\n    hammerCanvas.on('panstart', panStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n    window.kan.panning = false;\n    return;\n  }\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    last: true\n  };\n\n  // side.push(point);\n  // sides.push(side);\n  // corners.push(point);\n\n  var group = new Group();\n\n  var truedShape = shape.getTruedShape(shapePath);\n\n  // group.data.color = truedShape.strokeColor;\n  // console.log('currentGradient:', config.palette.gradients[window.kan.currentColor]);\n\n  var shapeSize = truedShape.strokeBounds;\n  var centerPoint = new Point(shapeSize.width / 2, shapeSize.height / 2);\n  var angle = util.rad(Math.random() * 360);\n  var gradientSize = (shapeSize.width + shapeSize.height) / 4;\n  var originX = centerPoint.x + Math.cos(angle - Math.PI / 2) * gradientSize;\n  var originY = centerPoint.y + Math.sin(angle - Math.PI / 2) * gradientSize;\n  var destinationX = centerPoint.x + Math.cos(angle + Math.PI / 2) * gradientSize;\n  var destinationY = centerPoint.y + Math.sin(angle + Math.PI / 2) * gradientSize;\n\n  var origin = new Point(originX + shapeSize.x, originY + shapeSize.y);\n  var destination = new Point(destinationX + shapeSize.x, destinationY + shapeSize.y);\n  // group.addChild(new Path.Circle({\n  //   center: origin,\n  //   radius: 5,\n  //   fillColor: 'red',\n  // }));\n  // group.addChild(new Path.Circle({\n  //   center: destination,\n  //   radius: 5,\n  //   fillColor: 'green',\n  // }));\n  group.data.originalColor = window.kan.currentColor;\n  group.data.color = {\n    gradient: {\n      stops: config.palette.gradients[window.kan.currentColor]\n    },\n    origin: origin,\n    destination: destination\n  };\n  group.data.scale = 1; // init variable to track scale changes\n  group.data.rotation = 0; // init variable to track rotation changes\n  group.data.fresh = true;\n\n  shapePath.remove();\n  truedShape.visible = false;\n  truedShape.strokeColor = new Color(0, 0);\n  window.kan.shapePath = truedShape;\n  truedShape.name = 'shapePath';\n\n  if (!(truedShape.length > 0)) {\n    truedShape.remove();\n    group.remove();\n    window.kan.panning = false;\n    return;\n  }\n\n  group.addChild(truedShape);\n\n  var shapeSoundObj = sound.getShapeSoundObj(truedShape);\n  window.kan.composition.push(shapeSoundObj);\n\n  truedShape.visible = false;\n  var outlineGroup = shape.getOutlineGroup(truedShape);\n  var outline = outlineGroup._namedChildren.outer[0].clone();\n  outline.name = 'outer';\n  outline.fillColor = window.kan.currentColor;\n  outline.fillColor = group.data.color;\n\n  var outlineCenter = outlineGroup._namedChildren.middle[0].clone();\n  outlineCenter.strokeColor = group.data.color;\n  outlineCenter.visible = false;\n  group.addChild(outline);\n  outline.sendToBack();\n\n  outlineGroup.remove();\n\n  var shapeMask = outline.clone();\n  shapeMask.fillColor = outline.fillColor;\n  shapeMask.strokeColor = outline.strokeColor;\n  shapeMask.closed = true;\n\n  var enclosedLoops = shape.findInteriorCurves(outlineCenter);\n  if (enclosedLoops.length > 0 || truedShape.closed === true) {\n    group.data.line = false;\n  } else {\n    group.data.line = true;\n  }\n\n  enclosedLoops.forEach(function (loop) {\n    shapeMask.unite(loop);\n    shapeMask.sendToBack();\n    loop.name = 'loop';\n    loop.data.loop = true;\n    loop.visible = true;\n    group.addChild(loop);\n  });\n\n  shapeMask.unite();\n  var crossings = shapeMask.resolveCrossings();\n  if (!!crossings && !!crossings.children && crossings.children.length > 0) {\n    (function () {\n      var maxArea = 0,\n          maxChild = null;\n      crossings.children.forEach(function (child) {\n        if (child.area > maxArea) {\n          maxChild = child;\n          maxArea = child.area;\n        }\n      });\n\n      shapeMask = maxChild;\n    })();\n  }\n\n  outlineCenter.remove();\n  shapeMask.visible = false;\n  shapeMask.name = 'mask';\n  shapeMask.data.mask = true;\n  group.addChild(shapeMask);\n  shapeMask.sendToBack();\n\n  shape.cleanUpGroup(group);\n\n  window.kan.moves.push({\n    type: 'newGroup',\n    id: group.id\n  });\n\n  ui.unditherButtonsByName(['new', 'undo']);\n\n  if (window.kan.userHasDrawnFirstShape !== true) {\n    // first shape!\n    // set play prompt timeout\n    window.kan.playPromptTimeout = setTimeout(function () {\n      overlays.openOverlay('play-prompt');\n    }, timing.playPromptDelay);\n\n    window.kan.userHasDrawnFirstShape = true;\n  } else {\n    var groups = util.getAllGroups();\n    if (groups.length >= 3) {\n      $body.addClass(sound.playEnabledClass);\n      ui.unditherButtonsByName(['play-stop', 'share']);\n    }\n    // console.log(groups.length, $body.hasClass(sound.playEnabledClass));\n  }\n\n  if (config.runAnimations) {\n    var scaleFactor = 0.9;\n    group.animate([{\n      properties: {\n        scale: scaleFactor\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeOut\"\n      }\n    }, {\n      properties: {\n        scale: 1 / scaleFactor\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeIn\"\n      }\n    }]);\n  }\n\n  if (!tutorial.allTutsCompleted()) {\n    var tutorialCompletion = window.kan.tutorialCompletion;\n    var tutName = null;\n\n    if (!tutorialCompletion['fill'] && truedShape.closed) {\n      tutName = 'fill';\n    } else {\n      var _groups = paper.project.getItems({\n        match: function match(el) {\n          return el.className === 'Group';\n        }\n      });\n      if (!tutorialCompletion['pinch'] && _groups.length >= 3) {\n        tutName = 'pinch';\n      } else if (!tutorialCompletion['swipe'] && _groups.length >= 5) {\n        tutName = 'swipe';\n      }\n    }\n\n    if (tutName !== null) {\n      // console.log(`${tutName} tutorial`);\n      tutorial.addContextualTut(tutName);\n      window.kan.tutorialCompletion[tutName] = true;\n      group.data.tut = tutName;\n    }\n  }\n\n  // window.kan.side = side;\n  // window.kan.sides = sides;\n  // window.kan.corners = corners;\n  if (window.kan.scheduledOverlay !== null) {\n    (function () {\n      var scheduledOverlay = window.kan.scheduledOverlay;\n      window.kan.scheduledOverlay = null;\n      setTimeout(function () {\n        overlays.openOverlay(scheduledOverlay);\n      }, timing.overlayDelay);\n    })();\n  }\n\n  console.log('pan done');\n  hammerCanvas.set({ enable: false });\n  setTimeout(function () {\n    hammerCanvas.set({ enable: true });\n    console.log('touch enabled');\n    hammerCanvas.on('panstart', panStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n\n    window.kan.panning = false;\n  }, timing.inputDelay);\n\n  if (config.pop === true) {\n    shape.updatePops();\n  }\n}\n\nfunction panCancel(event) {\n  console.log('pancancel');\n  event.srcEvent.stopPropagation();\n  // event.preventDefault();\n\n  hammerCanvas.set({ enable: true });\n  hammerCanvas.on('panstart', panStart);\n  enablePanAndPinchEvents();\n  enableTapEvents();\n  window.kan.panning = false;\n}\n\nfunction pinchStart(event) {\n  console.log('pinchstart');\n  tutorial.hideContextualTuts();\n  window.kan.interacting = true;\n  window.kan.pinching = true;\n  // event.preventDefault();\n\n  // hammerCanvas.get('pinchstart').set({enable: false});\n  hammerCanvas.off('pinchstart');\n  disablePanEvents();\n  disableTapEvents();\n\n  if (!eventTargetIsOnCanvas(event)) return;\n\n  console.log('pinchStart', event.center);\n  sound.stopPlaying();\n\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = shape.hitTestGroupBounds(point);\n\n  if (hitResult) {\n    window.kan.pinching = true;\n    window.kan.pinchedGroup = hitResult;\n    window.kan.lastScale = 1;\n    window.kan.lastRotation = event.rotation;\n\n    window.kan.originalPosition = hitResult.position;\n    window.kan.originalRotation = hitResult.data.rotation;\n    window.kan.originalScale = hitResult.data.scale;\n\n    if (config.pop === true) {\n      shape.destroyGroupPops(hitResult);\n    }\n\n    hitResult.bringToFront();\n\n    if (hitResult.data.tut && hitResult.data.tut.length > 0) {\n      var $tut = $('.tut[data-tut-type=\\'' + hitResult.data.tut + '\\']');\n      if ($tut) {\n        window.kan.pinchedTut = $tut;\n      } else {\n        window.kan.pinchedTut = null;\n      }\n    } else {\n      window.kan.pinchedTut = null;\n    }\n\n    // if (config.runAnimations) {\n    //   hitResult.animate({\n    //     properties: {\n    //       scale: 1.25\n    //     },\n    //     settings: {\n    //       duration: 100,\n    //       easing: \"easeOut\",\n    //     }\n    //   });\n    // }\n  } else {\n    window.kan.pinchedGroup = null;\n    window.kan.pinchedTut = null;\n    console.log('hit no item');\n  }\n}\n\nfunction pinchMove(event) {\n  console.log('pinchMove');\n  // event.preventDefault();\n\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var pinchedGroup = window.kan.pinchedGroup;\n  var $pinchedTut = window.kan.pinchedTut;\n\n  if (!!pinchedGroup) {\n    var currentScale = event.scale;\n    var scaleDelta = void 0;\n\n    tutorial.hideContextualTutByName('pinch');\n\n    if (pinchedGroup.bounds.width < minShapeSize || pinchedGroup.bounds.height < minShapeSize) {\n      // only allow a shape to scale down if it is larger than the minimum size\n      scaleDelta = 1.1;\n    } else if (pinchedGroup.bounds.width >= paper.view.viewSize.width || pinchedGroup.bounds.height >= paper.view.viewSize.height) {\n      // only allow shape to scale up if it fits in the viewport\n      scaleDelta = 0.9;\n    } else {\n      scaleDelta = currentScale / window.kan.lastScale;\n    }\n\n    window.kan.lastScale = currentScale;\n\n    var currentRotation = event.rotation;\n    var rotationDelta = currentRotation - window.kan.lastRotation;\n    window.kan.lastRotation = currentRotation;\n\n    // console.log(`scaling by ${scaleDelta}`);\n    // console.log(`rotating by ${rotationDelta}`);\n\n    var centerPoint = event.center;\n    pinchedGroup.position = centerPoint;\n    if (!!$pinchedTut) {\n      tutorial.moveContextualTut($pinchedTut, centerPoint);\n    }\n\n    if (scaleDelta !== 1) {\n      pinchedGroup.scale(scaleDelta);\n\n      // check if scaling went awry, cannot be too big or too small\n      // hypotenuse must fit within view bounds\n      var hypot = util.hypot(pinchedGroup.bounds.width, pinchedGroup.bounds.height);\n      var viewHypot = util.hypot(paper.view.viewSize.width, paper.view.viewSize.height);\n      if (hypot >= viewHypot) {\n        // shape is too big, bring it back down to size\n        scaleDelta = viewHypot * maxScaleFactor / hypot;\n        pinchedGroup.scale(scaleDelta);\n      } else if (hypot <= minShapeSize) {\n        scaleDelta = minShapeSize / hypot;\n        pinchedGroup.scale(scaleDelta);\n      }\n    }\n    pinchedGroup.rotate(rotationDelta);\n\n    pinchedGroup.data.scale *= scaleDelta;\n    pinchedGroup.data.rotation += rotationDelta;\n  }\n}\n\nfunction pinchEnd(event) {\n  console.log('pinchend');\n  // event.preventDefault();\n\n  window.kan.lastEvent = event;\n  var pinchedGroup = window.kan.pinchedGroup;\n  var $pinchedTut = window.kan.pinchedTut;\n  var originalPosition = window.kan.originalPosition;\n  var originalRotation = window.kan.originalRotation;\n  var originalScale = window.kan.originalScale;\n\n  if (!!pinchedGroup) {\n    pinchedGroup.data.fresh = true;\n    var move = {\n      id: pinchedGroup.id,\n      type: 'transform'\n    };\n    if (pinchedGroup.position != originalPosition) {\n      move.position = originalPosition;\n    }\n\n    if (pinchedGroup.data.rotation != originalRotation) {\n      move.rotation = originalRotation - pinchedGroup.data.rotation;\n    }\n\n    if (pinchedGroup.data.scale != originalScale) {\n      move.scale = originalScale / pinchedGroup.data.scale;\n    }\n\n    if (pinchedGroup.children.length > 0 && pinchedGroup._namedChildren.shapePath && pinchedGroup._namedChildren.shapePath.length > 0) {\n      // update shapePath sound object if possible\n      sound.removeShapeFromComposition(pinchedGroup); // sound is now wrong\n\n      var shapePath = pinchedGroup._namedChildren.shapePath[0];\n      var shapeSoundObj = sound.getShapeSoundObj(shapePath);\n      window.kan.composition.push(shapeSoundObj);\n    }\n\n    window.kan.moves.push(move);\n\n    if (Math.abs(event.velocity) > 1) {\n      tutorial.hideContextualTutByName('swipe');\n\n      // hide any connected tuts\n      if (!!$pinchedTut) {\n        tutorial.hideContextualTut($pinchedTut);\n      }\n      // dispose of group offscreen\n      if (config.pop === true) {\n        shape.destroyGroupPops(pinchedGroup);\n      }\n      throwPinchedGroup();\n    }\n\n    // if (config.runAnimations) {\n    //   pinchedGroup.animate({\n    //     properties: {\n    //       scale: 0.8\n    //     },\n    //     settings: {\n    //       duration: 100,\n    //       easing: \"easeOut\",\n    //     }\n    //   });\n    // }\n  } else {\n    window.kan.pinchedGroup = null;\n  }\n\n  // if an overlay was interrupted, open it up now\n  if (window.kan.scheduledOverlay !== null) {\n    (function () {\n      var scheduledOverlay = window.kan.scheduledOverlay;\n      window.kan.scheduledOverlay = null;\n      setTimeout(function () {\n        overlays.openOverlay(scheduledOverlay);\n      }, timing.overlayDelay);\n    })();\n  }\n\n  window.kan.pinching = false;\n\n  if (config.pop === true) {\n    shape.updatePops();\n  }\n\n  console.log('pinch done');\n  // hammerCanvas.set({ enable: false });\n  setTimeout(function () {\n    console.log('touch enabled');\n    hammerCanvas.on('pinchstart', pinchStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n    // hammerCanvas.set({ enable: true });\n    // hammerCanvas.on('pinchstart', pinchStart);\n    // enablePanAndPinchEvents();\n    // enableTapEvents();\n    // window.kan.pinching = false;\n    // window.kan.pinchedGroup = null;\n  }, timing.inputDelay);\n}\n\nfunction pinchCancel(event) {\n  // console.log(event);\n  event.srcEvent.stopPropagation();\n  console.log('pinchcancel');\n  // event.preventDefault();\n\n  hammerCanvas.set({ enable: true });\n  hammerCanvas.on('pinchstart', pinchStart);\n  enablePanAndPinchEvents();\n  enableTapEvents();\n\n  window.kan.pinching = false;\n}\n\nfunction throwPinchedGroup() {\n\n  var velocityMultiplier = 25;\n  var lastEvent = window.kan.lastEvent;\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var pinchedGroup = window.kan.pinchedGroup;\n\n  if (pinchedGroup === null) return;\n  if (pinchedGroup.position.x <= 0 - pinchedGroup.bounds.width || pinchedGroup.position.x >= viewWidth + pinchedGroup.bounds.width || pinchedGroup.position.y <= 0 - pinchedGroup.bounds.height || pinchedGroup.position.y >= viewHeight + pinchedGroup.bounds.height) {\n    pinchedGroup.data.offScreen = true;\n    pinchedGroup.visible = false;\n    sound.removeShapeFromComposition(pinchedGroup);\n    window.kan.pinchedGroup = null;\n    return;\n  }\n  requestAnimationFrame(throwPinchedGroup);\n  var newX = pinchedGroup.position.x + lastEvent.velocityX * velocityMultiplier;\n  var newY = pinchedGroup.position.y + lastEvent.velocityY * velocityMultiplier;\n  var newPos = new Point(newX, newY);\n  pinchedGroup.position = newPos;\n}\n\nfunction eventTargetIsOnCanvas(event) {\n  if (!event) return false;\n  if (event.target != ui.canvas) return false;\n  return true;\n}\n\n},{\"./../../config\":1,\"./color\":4,\"./overlays\":7,\"./shape\":8,\"./sound\":9,\"./timing\":10,\"./tutorial\":12,\"./ui\":13,\"./util\":14,\"hammerjs\":2}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTutByName = getTutByName;\nexports.allTutsCompleted = allTutsCompleted;\nexports.addContextualTut = addContextualTut;\nexports.hideContextualTut = hideContextualTut;\nexports.hideContextualTutByName = hideContextualTutByName;\nexports.hideContextualTuts = hideContextualTuts;\nexports.resetContextualTuts = resetContextualTuts;\nexports.moveContextualTut = moveContextualTut;\nexports.getTutPositionFromCenter = getTutPositionFromCenter;\nvar config = require('./../../config');\n\nvar contextualTuts = config.contextualTuts;\nvar tutArrowHeight = 16;\n\nfunction getTutByName(tutName) {\n  for (var i = 0; i < contextualTuts.length; i++) {\n    var tutObj = contextualTuts[i];\n\n    if (tutObj.type === tutName) {\n      return tutObj.copy;\n    }\n  }\n\n  return null;\n}\n\nfunction allTutsCompleted() {\n  var tutorialCompletionObj = window.kan.tutorialCompletion;\n  var completion = true;\n\n  Object.keys(tutorialCompletionObj).forEach(function (key, val) {\n    completion = completion && tutorialCompletionObj[key];\n  });\n\n  return completion === true;\n}\n\nfunction addContextualTut(tutName) {\n  if (!!window.kan.shapePath && window.kan.shapePath.length > 0) {\n    hideContextualTuts();\n    window.kan.shapesSinceTut = 0;\n\n    var shapePath = window.kan.shapePath;\n    var shapeCenter = shapePath.bounds.center;\n\n    var tutCopy = getTutByName(tutName);\n\n    if (tutCopy !== null) {\n      var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n      if ($tut.length > 0) {\n        var tutPos = getTutPositionFromCenter($tut, shapeCenter);\n        $tut.css({ top: tutPos.y + 'px', left: tutPos.x + 'px', visibility: 'visible' });\n        $tut.addClass('animated bounceIn');\n      }\n    }\n  }\n}\n\nfunction hideContextualTut($tut) {\n  $tut.css({ visibility: 'hidden' });\n}\n\nfunction hideContextualTutByName(tutName) {\n  var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n  hideContextualTut($tut);\n}\n\nfunction hideContextualTuts() {\n  var $tuts = $('.contextual-tuts .tut');\n  $tuts.css({ visibility: 'hidden' });\n}\n\nfunction resetContextualTuts() {\n  hideContextualTuts();\n  window.kan.tutorialCompletion = {\n    \"fill\": false,\n    \"pinch\": false,\n    \"swipe\": false\n  };\n}\n\nfunction moveContextualTut($tut, centerPoint) {\n  var tutPos = getTutPositionFromCenter($tut, centerPoint);\n  $tut.css({ top: tutPos.y + 'px', left: tutPos.x + 'px' });\n}\n\nfunction getTutPositionFromCenter($tut, centerPoint) {\n  var tutWidth = $tut.outerWidth();\n  var tutHeight = $tut.outerHeight();\n  var leftPos = centerPoint.x - tutWidth / 2;\n  var topPos = centerPoint.y - tutHeight - tutArrowHeight;\n  return new Point(leftPos, topPos);\n}\n\n},{\"./../../config\":1}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.ditherButtonsByName = ditherButtonsByName;\nexports.unditherButtonsByName = unditherButtonsByName;\nexports.ditherButtonByName = ditherButtonByName;\nexports.unditherButtonByName = unditherButtonByName;\nexports.resetCanvas = resetCanvas;\nvar config = require('./../../config');\n\nvar sound = require('./sound');\nvar tutorial = require('./tutorial');\nvar overlays = require('./overlays');\nvar util = require('./util');\nvar color = require('./color');\nvar shape = require('./shape');\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar playingClass = sound.playingClass;\nvar playEnabledClass = sound.playEnabledClass;\n\nvar $newButton = $('.controls .new');\nvar $undoButton = $('.controls .undo');\nvar $playButton = $('.controls .play-stop');\nvar $shareButton = $('.controls .share');\nvar $tipsButton = $('.controls .tips');\n\nvar canvas = exports.canvas = $('#canvas')[0];\nvar tipsOverlay = exports.tipsOverlay = $('.overlay.tips')[0];\n\nvar ditheredClass = 'dithered';\n\nfunction init() {\n  initLogoRefresh();\n  initColorPalette();\n  initNewButton();\n  initUndoButton();\n  initPlayButton();\n  initTipsButton();\n  initShareButton();\n  initContextualTuts();\n  resetCanvas();\n}\n\nfunction unditherAllButtons() {\n  $('.controls .' + ditheredClass).removeClass(ditheredClass);\n}\n\nfunction ditherButtonsByName(buttonNames) {\n  var undither = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (buttonNames.length > 0) {\n    if ($.isArray(buttonNames)) {\n      buttonNames.forEach(function (name) {\n        return ditherButtonByName(name, undither);\n      });\n    } else {\n      ditherButtonByName(buttonNames, undither);\n    }\n  }\n}\n\nfunction unditherButtonsByName(buttonNames) {\n  ditherButtonsByName(buttonNames, true);\n}\n\nfunction ditherButtonByName(buttonName) {\n  var undither = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var $button = $('.controls .' + buttonName);\n  // console.log($button);\n  if ($button.length > 0) {\n    if (undither !== true) {\n      $button.addClass(ditheredClass);\n    } else {\n      $button.removeClass(ditheredClass);\n    }\n  }\n}\n\nfunction unditherButtonByName(buttonName) {\n  ditherButtonByName(buttonName, true);\n}\n\nfunction unditherButtonsByName(buttonNames) {\n  ditherButtonsByName(buttonNames, true);\n}\n\nfunction newPressed() {\n  console.log('new pressed');\n  window.kan.composition = [];\n  paper.project.activeLayer.removeChildren();\n  tutorial.hideContextualTuts();\n  ditherButtonsByName(['undo', 'new', 'play-stop', 'share']);\n  sound.stopPlaying();\n  // window.kan.userHasDrawnFirstShape = false;\n  // tutorial.resetContextualTuts();\n}\n\nfunction undoPressed() {\n  sound.stopPlaying();\n  tutorial.hideContextualTuts();\n\n  var transparent = new Color(0, 0);\n  console.log('undo pressed');\n  if (!(window.kan.moves.length > 0)) {\n    console.log('no moves yet');\n    window.kan.userHasDrawnFirstShape = false;\n    return;\n  }\n\n  var lastMove = window.kan.moves.pop();\n  var item = project.getItem({\n    id: lastMove.id\n  });\n\n  if (item) {\n    item.visible = true; // make sure\n    switch (lastMove.type) {\n      case 'newGroup':\n        // console.log('removing group');\n        sound.removeShapeFromComposition(item);\n        item.remove();\n\n        var numGroups = util.getNumGroups();\n        // console.log('numGroups', numGroups);\n\n        if (numGroups <= 0) {\n          ditherButtonsByName(['undo', 'new']);\n        }\n\n        if (numGroups < 3) {\n          ditherButtonsByName(['play-stop', 'share']);\n          $body.removeClass(sound.playEnabledClass);\n        } else {\n          unditherButtonsByName(['play-stop', 'share']);\n          $body.addClass(sound.playEnabledClass);\n        }\n        break;\n      case 'fillChange':\n        if (lastMove.transparent) {\n          item.fillColor = lastMove.fill;\n          item.strokeColor = lastMove.fill;\n        } else {\n          item.fillColor = transparent;\n          item.strokeColor = transparent;\n        }\n      case 'transform':\n        item.data.fresh = true;\n        if (!!lastMove.position) {\n          item.position = lastMove.position;\n          if (item.data && item.data.tut && item.data.tut.length > 0) {\n            // item has connected contextual tut, move it to the right place\n            var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n            tutorial.moveContextualTut($tut, lastMove.position);\n          }\n        }\n        if (!!lastMove.rotation) {\n          item.rotation = lastMove.rotation;\n        }\n        if (!!lastMove.scale) {\n          item.scale(lastMove.scale);\n        }\n        if (config.pop === true) {\n          shape.updatePops();\n        }\n        break;\n      default:\n      // console.log('unknown case');\n    }\n  } else {\n      // console.log('could not find matching item');\n    }\n}\n\nfunction playPressed() {\n  console.log('play pressed');\n  // sound.stopComposition();\n  // overlays.closeAndResetOverlays();\n  // tutorial.hideContextualTuts();\n  var playing = window.kan.playing;\n  // console.log(playing, util.getNumGroups() > 2, !playing && util.getNumGroups() > 2, $body);\n\n  clearTimeout(window.kan.playPromptTimeout);\n  if (!playing && util.getNumGroups() > 2) {\n    console.log('starting playing');\n    sound.startPlaying();\n  } else {\n    console.log('stopping playing');\n    sound.stopPlaying(true);\n  }\n}\n\nfunction tipsPressed() {\n  sound.stopPlaying();\n  overlays.openOverlay('tips');\n  console.log('tips pressed');\n}\n\nfunction sharePressed() {\n  console.log('share pressed');\n  sound.stopPlaying();\n  if ($body.hasClass(sound.playEnabledClass)) {\n    overlays.openOverlay('share');\n  }\n}\n\nfunction initLogoRefresh() {\n  $('.main-logo').on(tapEvent, function () {\n    location.reload();\n  });\n}\n\nfunction initColorPalette() {\n  var $paletteWrap = $('ul.palette-colors');\n  var $paletteColors = $paletteWrap.find('li');\n  var paletteColorSize = 20;\n  var paletteSelectedColorSize = 30;\n  var paletteSelectedClass = 'palette-selected';\n\n  // hook up click\n  $paletteColors.on('click tap touch', function () {\n    if (!$body.hasClass(playingClass)) {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n        // console.log('%ccolor', 'color:red', color.getColorName(window.kan.currentColor));\n      }\n    };\n  });\n}\n\nfunction initNewButton() {\n  $('.main-controls .new').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      newPressed();\n    }\n  });\n}\n\nfunction initUndoButton() {\n  $('.main-controls .undo').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      undoPressed();\n    }\n  });\n}\n\nfunction initPlayButton() {\n  $('.main-controls .play-stop .play').on(tapEvent, sound.startPlaying);\n  $('.main-controls .play-stop .stop').on(tapEvent, sound.stopPlaying);\n}\n\nfunction initTipsButton() {\n  $('.controls .tips').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      tipsPressed();\n    }\n  });\n}\n\nfunction initShareButton() {\n  $('.controls .share').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      sharePressed();\n    }\n  });\n}\n\nfunction initContextualTuts() {\n  var $tuts = $('.contextual-tuts .tut');\n  $tuts.on(tapEvent, function () {\n    $(this).css({ visibility: 'hidden' });\n  });\n}\n\nfunction resetCanvas() {\n  paper.project.clear();\n\n  // add random background\n  paper.project.activeLayer.name = 'background';\n  var numCanvasses = 10;\n  var randomCanvasIndex = Math.round(Math.random() * (numCanvasses - 1)) + 1; // [1, numCanvasses]\n  var canvasBg = new Raster('canvas-' + randomCanvasIndex);\n  canvasBg.name = 'canvasBg';\n  canvasBg.position = paper.view.center;\n\n  // add canvas layer\n  var scaleFactorHorizontal = paper.view.viewSize.width / canvasBg.size.width;\n  var scaleFactorVertical = paper.view.viewSize.height / canvasBg.size.height;\n  canvasBg.scale(Math.max(scaleFactorHorizontal, scaleFactorVertical));\n  var layer = new Layer(); // init new layer that all other shapes will be drawn upon\n  paper.project.activeLayer.name = 'canvas';\n}\n\n},{\"./../../config\":1,\"./color\":4,\"./overlays\":7,\"./shape\":8,\"./sound\":9,\"./tutorial\":12,\"./util\":14}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.hypot = hypot;\nexports.angleDelta = angleDelta;\nexports.delta = delta;\nexports.getTime = getTime;\nexports.getAllGroups = getAllGroups;\nexports.anyShapesOnCanvas = anyShapesOnCanvas;\nexports.getNumGroups = getNumGroups;\nexports.getFreshGroups = getFreshGroups;\nexports.getAllPops = getAllPops;\nexports.clearGroupPops = clearGroupPops;\nexports.getGroupPops = getGroupPops;\nexports.getPopCandidates = getPopCandidates;\nexports.setSha = setSha;\nvar config = require('./../../config');\n\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\nfunction hypot(a, b) {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)); // pythagorean!\n}\n\n// returns absolute value of the delta of two angles in radians\nfunction angleDelta(x, y) {\n  return Math.abs(Math.atan2(Math.sin(y - x), Math.cos(y - x)));;\n}\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\nfunction getTime() {\n  return new Date().toLocaleTimeString();\n}\n\nfunction getAllGroups() {\n  return paper.project.getItems({\n    className: 'Group'\n  });\n}\n\nfunction anyShapesOnCanvas() {\n  var groups = getAllGroups();\n  return groups.length > 0;\n}\n\nfunction getNumGroups() {\n  var groups = getAllGroups();\n  // console.log('numgroups', groups.length);\n  return groups.length;\n}\n\nfunction getFreshGroups() {\n  return paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return el.data && el.data.line === false && el.data.fresh === true;\n    }\n  });\n}\n\nfunction getAllPops() {\n  return paper.project.getItems({\n    match: function match(el) {\n      return el.data && el.data.pop === true;\n    }\n  });\n}\n\nfunction clearGroupPops(group) {\n  var pops = getGroupPops(group);\n  pops.forEach(function (pop) {\n    return pop.remove();\n  });\n}\n\nfunction getGroupPops(group) {\n  console.log('group pop group', group.id, group);\n  // const allPops = getAllPops();\n  // allPops.forEach((pop) => {\n  //   console.log('pop', pop.parent.id, pop);\n  // })\n  // return [];\n  if (group.children.length > 0) {\n    var groupPops = group.getItems({\n      match: function match(el) {\n        return el.data && el.data.pop === true;\n      }\n    });\n    return groupPops;\n  } else {\n    return [];\n  }\n}\n\nfunction getPopCandidates() {\n  return paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return el.data && el.data.line === false;\n    }\n  });\n}\n\nfunction setSha() {\n  $.get('/hash').done(function (res) {\n    console.log('current hash:', res);\n    window.kan.hash = res;\n  }).fail(function (e) {\n    console.error('error getting hash:', e);\n  });\n}\n\n},{\"./../../config\":1}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enterTutorialMode = enterTutorialMode;\nexports.exitTutorialMode = exitTutorialMode;\nexports.pauseVideo = pauseVideo;\nexports.playVideo = playVideo;\nvar config = require('./../../config');\n\nvar main = require('./main');\nvar overlays = require('./overlays');\nvar timing = require('./timing');\nvar ui = require('./ui');\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar videoPlayingClass = exports.videoPlayingClass = 'video-playing';\n\nvar $videoWrapper = $body.find('#video-wrap');\nvar $video = $videoWrapper.find('video');\n\nfunction enterTutorialMode() {\n  console.log('entering tutorial mode');\n  playVideo();\n  $body.addClass(videoPlayingClass);\n  clearTimeout(window.kan.inactivityTimeout);\n  clearInterval(window.kan.continueCountdownInterval);\n  $body.off(tapEvent, timing.preventInactivityTimeout);\n  $body.on(tapEvent, exitTutorialMode);\n  main.resetWindow();\n  ui.resetCanvas();\n  window.kan.refreshCheckInterval = setInterval(function () {\n    $.get('/hash').done(function (res) {\n      if (res !== window.kan.hash) {\n        console.log('different hash, reloading');\n        location.reload();\n      }\n    }).fail(function (e) {\n      console.error('error getting hash:', e);\n    });\n  }, timing.refreshCheckDelay);\n}\n\nfunction exitTutorialMode() {\n  console.log('exiting tutorial mode');\n  clearInterval(window.kan.refreshCheckInterval);\n\n  pauseVideo();\n  $body.off(tapEvent, exitTutorialMode);\n  $body.on(tapEvent, timing.preventInactivityTimeout);\n  $body.removeClass(videoPlayingClass);\n  clearTimeout(window.kan.inactivityTimeout);\n  clearInterval(window.kan.continueCountdownInterval);\n\n  overlays.openOverlay('intro');\n\n  window.kan.inactivityTimeout = setTimeout(function () {\n    overlays.openOverlay('continue');\n  }, timing.continueInactivityDelay);\n}\n\nfunction pauseVideo() {\n  $video.get(0).pause();\n}\n\nfunction playVideo() {\n  $video.get(0).play();\n}\n\n},{\"./../../config\":1,\"./main\":6,\"./overlays\":7,\"./timing\":10,\"./ui\":13}]},{},[6])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}