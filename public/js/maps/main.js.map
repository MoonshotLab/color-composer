{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","runAnimations","pop","canvasId","palette","colors","colorNames","#20171C","#1E2A43","#28377D","#352747","#CA2E26","#9A2A1F","#DA6C26","#453121","#916A47","#DAAD27","#7F7D31","#2B5E2E","gradients","pops","colorSize","selectedColorSize","contextualTuts","type","copy","2","window","document","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","hasOwnProperty","deprecate","method","name","message","deprecationMessage","stack","replace","log","console","warn","apply","this","arguments","inherit","child","base","properties","childP","baseP","prototype","Object","create","constructor","_super","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","handler","splitStr","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","value","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","defaults","id","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","item","add","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","define","amd","global","HowlerGlobal","Howler","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","match","isOldOpera","parseInt","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","createBufferSource","buffer","connect","destination","noteOn","onended","disconnect","suspend","_sounds","_paused","_suspendTimer","then","_resumeAfterSuspend","_autoResume","resume","_emit","Howl","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_duration","_state","_endTimers","_queue","_onend","onend","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","action","play","load","url","exec","location","protocol","Sound","loadBuffer","internal","num","_ended","_id","_inactiveSound","seek","max","_seek","duration","_start","_stop","playWebAudio","_refreshBuffer","setValueAtTime","currentTime","_playStart","bufferSource","noteGrainOn","Infinity","bind","isRunning","once","_clearTimer","playHtml5","playbackRate","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","fade","from","to","len","diff","dir","steps","stepLen","ceil","linearRampToValueAtTime","_interval","setInterval","soundId","min","clearInterval","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","sounds","_errorFn","_loadFn","remCache","cache","msg","_loadQueue","task","shift","_drain","limit","cnt","_panner","howl","_parent","random","createGain","createGainNode","paused","_errorListener","_loadListener","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_pos","_orientation","stereo","pan","pos","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_panningModel","_refDistance","_rolloffFactor","pa","panner","createPanner","RecordRTC","mediaStream","config","startRecording","disableLogs","debug","mediaRecorder","clearRecordedData","record","recordingDuration","handleRecordingDuration","initRecorder","initCallback","Recorder","GetRecorderType","stopRecording","_callback","__blob","recordRTC","blob","URL","createObjectURL","bytesToSize","size","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","WARNING","pauseRecording","resumeRecording","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","processInWebWorker","_function","Blob","toString","worker","Worker","revokeObjectURL","mozGetUserMedia","reader","FileReader","result","webWorker","onmessage","onRecordingStopped","RecordRTCConfiguration","returnObject","setRecordingDuration","milliseconds","getBlob","toURL","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","image","bufferSize","view","recorderType","WhammyRecorder","CanvasRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getAudioTracks","getVideoTracks","MediaRecorder","mimeType","bitsPerSecond","recorder","isChrome","isEdge","isOpera","isMediaRecorderCompatible","isTypeSupported","MultiStreamRecorder","MRecordRTC","addStream","_mediaStream","mediaType","audio","video","gif","audioRecorder","numberOfAudioChannels","newStream","videoTrack","MediaStream","addTrack","videoRecorder","canvas","frameInterval","gifRecorder","frameRate","quality","blobURL","callback00","webkitURL","_audioDataURL","_videoDataURL","writeToDisk","bytes","k","sizes","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","msSaveOrOpenBlob","msSaveBlob","hyperlink","href","download","onclick","body","documentElement","removeChild","appendChild","evt","MouseEvent","bubbles","cancelable","opera","chrome","isFirefox","InstallTrigger","verOffset","ix","nAgt","fullVersion","majorVersion","substring","isMediaStreamActive","active","ended","stream","recorderHints","canRecordMimeType","ignoreMutedMedia","ondataavailable","dontFireOnDataAvailableEvent","recordingCallback","getNativeBlob","onAudioProcessStarted","looper","mergeLeftRightBuffers","mergeAudioBuffers","cb","mergeBuffers","channelBuffer","rLength","Float64Array","lng","interleave","leftChannel","rightChannel","inputIndex","writeUTFBytes","string","setUint8","leftBuffers","rightBuffers","internalInterleavedLength","interleaved","interleavedLength","resultingBufferLength","ArrayBuffer","DataView","setUint32","setUint16","setInt16","workerURL","onAudioProcessDataAvailable","isPaused","jsAudioNode","recording","audioInput","isAudioProcessStarted","left","inputBuffer","getChannelData","leftchannel","Float32Array","right","rightchannel","recordingLength","byteLength","Storage","AudioContextConstructor","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","info","onaudioprocess","htmlElement","cloneCanvas","newCanvas","getContext","width","height","drawImage","drawCanvasFrame","isPausedRecording","lastTime","getTime","nodeName","whammy","frames","isRecording","html2canvas","grabMouse","showMousePointer","onrendered","toDataURL","isCanvasSupportsStreamCapturing","_isChrome","webkitRTCPeerConnection","webkitGetUserMedia","chromeVersion","matchArray","globalCanvas","mediaStreamRecorder","HTMLCanvasElement","CanvasRenderingContext2D","canvasMediaStream","captureStream","mozCaptureStream","webkitCaptureStream","mdStream","getWebPImages","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","that","compile","Whammy","Video","drawFrames","isStopDrawing","asyncLoop","functionToLoop","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","g","maxColorDifference","pixTolerance","frameTolerance","doNotCheckNext","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","colorDifference","HTMLVideoElement","cloneNode","srcObject","onloadedmetadata","_this","GIFEncoder","isHTMLObject","drawVideoFrame","lastAnimationFrame","requestAnimationFrame","lastFrameTime","onGifPreview","gifEncoder","addFrame","offsetWidth","offsetHeight","setRepeat","setDelay","setQuality","startTime","cancelAnimationFrame","endTime","bin","arrayOfMediaStreams","getMixedAudioStream","audioContext","audioSources","audioTracksLength","audioiDestination","createMediaStreamDestination","audioSource","getMixedVideoStream","getVideo","videos","capturedStream","drawVideosToCanvas","isStoppedRecording","videosLength","mixedVideoStream","mixedAudioStream","track","previewStream","clearRect","Fetch","_type","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","browserFakeUserAgent","getUserMedia","hash","screen","webkitRequestAnimationFrame","mozRequestAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","mozAudioContext","webkitMediaStream","getTracks","tracks","kind","WhammyVideo","whammyInWebWorker","ArrayToWebM","checkFrames","clusterMaxDuration","EBML","doubleToString","frameNumber","clusterTimecode","clusterFrames","clusterDuration","clusterCounter","cluster","getClusterData","generateEBML","map","block","makeSimpleBlock","discardable","invisible","keyframe","lacing","trackNum","timecode","numToBuffer","parts","reverse","strToBuffer","bitsToBuffer","bits","pad","substr","json","ebml","zeroes","sizeToString","padded","flags","out","String","fromCharCode","parseWebP","riff","VP8","RIFF","WEBP","frameStart","c","tmp","getStrLength","unpadded","parseRIFF","chunks","createObjectStore","dataBase","dataStoreName","putInDB","getFromStore","portionName","transaction","objectStore","onsuccess","db","put","indexedDB","dbVersion","dbName","request","onError","setVersion","onupgradeneeded","getPathColorName","path","hexColor","originalColor","getColorName","color","getRandomPop","getIndexedPopColor","defineProperty","transparent","Color","./../../config","6","root","factory","ShapeDetector","deg2Rad","d","Stroke","points","processStroke","patterns","_nbSamplePoints","nbSamplePoints","learn","_squareSize","_phi","_angleRange","_anglePrecision","_halfDiagonal","_origin","resample","setCentroid","rotateBy","indicativeAngle","scaleToSquare","translateToOrigin","localDistance","q","strokeLength","newPoints","point","cos","sin","box","minX","maxX","minY","maxY","distanceAtBestAngle","pattern","x1","f1","distanceAtAngle","x2","f2","strokePoints","patternPoints","defaultShapes","spot","patternName","score","stroke","bestDistance","bestPattern","bestScore","7","resetWindow","kan","composition","compositionInterval","compositionTimeout","soundTimeouts","lastEvent","interaction","moves","pinching","pinchedGroup","pinchedTut","pathData","shapePath","prevAngle","sides","side","corners","lastScale","lastRotation","originalPosition","tutorialCompletion","fill","pinch","swipe","inactivityTimeout","playPromptTimeout","userHasDrawnFirstShape","firstTimePlaying","shapesSinceTut","refreshCheckInterval","sha","scheduledOverlay","continueCountdownInterval","shapeSounds","ui","overlays","timing","util","$","run","setSha","fail","reload","./overlays","./sound","./timing","./touch","./ui","./util","./video","8","openOverlay","overlayName","allOverlays","includes","panning","preventInactivityTimeout","closeAndResetOverlays","tutorial","hideContextualTuts","$body","addClass","overlayActiveClass","tapEvent","openIntroOverlay","anyShapesOnCanvas","openPlayPromptOverlay","playPromptDelay","openSharePromptOverlay","openContinueOverlay","openTipsOverlay","openShareOverlay","resetContinueCountdown","html","continueInactivityDelay","$countdownNumWrap","enterTutorialMode","activateTipsCards","cardNavNext","$old","$new","next","$cardItems","first","$next","$third","slide","removeClass","updateCardCounter","cardsCount","cardInteractions","timeOfLastInteraction","closest","resetTips","$sharePhone","overlayOpenClasses","current","total","$footer","phoneNumberInputs","mask","$shareKeypad","phoneNumber","masked","randomCardGraphics","el","attr","initTips","initShare","hammerCanvas","$cardsWrap","overlay","./tutorial","9","destroyGroupPops","group","groupPopsBefore","getGroupPops","fillInGroupPopsById","groupId","paper","project","getItem","className","children","groupChild","toggleFill","interior","fillColor","strokeColor","cleanUpGroup","acceptableNames","updatePops","freshGroups","getFreshGroups","popCandidates","getPopCandidates","getAllPops","freshGroup","freshOuter","_namedChildren","bringToFront","otherGroup","otherGroupOuter","thisPop","intersect","popColor","popGroup","intersectingGroup","visible","closed","addChild","fresh","getOutlineGroup","truedShape","outerPath","Path","middlePath","lastAngle","firstTop","firstBottom","lastTop","lastBottom","Group","firstSegment","cumSize","avgSize","getPointAt","normal","getNormalAt","top","Point","bottom","insert","centerTop","centerBottom","flatten","simplify","selected","returnGroup","getTruedShape","pathClone","clone","completedPath","getCompletedPath","truedPath","strokeWidth","reduce","intersections","getIntersections","trimmedPath","getTrimmedPath","extendedPath","getExtendedPath","_intersections","_trimmedPath","replaceWith","getBruteExtendedPath","_intersections2","_trimmedPath2","getShapePrediction","prediction","shapeJSON","exportJSON","shapeData","processShapeData","shapePrediction","detector","closedShapes","randomPick","intersects","getIntegerPoint","stringifyPoint","parsePoint","pointStr","getClosestPointFromPathData","leastDistance","closestPoint","Base","datum","returnShape","jsonObj","parse","segments","segment","positionInfo","findInteriorCurves","interiorCurves","dividedPath","resolveCrossings","enclosedLoop","_enclosedLoop","thresholdDist","thresholdDistMultiplier","nextSegment","startAngle","inverseStartAngle","extendedStartPoint","lastSegment","penSegment","previous","endAngle","extendedEndPoint","firstPoint","lastPoint","unite","crossings","maxArea","maxChild","area","intersection","intersectionPoint","pathCrossings","subtract","_ret2","closedChildren","childClone","accumulator","_j","newPath","copyContent","copyAttributes","_typeof","hitTestGroupBounds","groups","getAllGroups","hitTestBounds","strokeBounds","isInside","Symbol","cornerThresholdDeg","shapeNames","./color","./lib/shape-detector","10","playComposition","getElementById","recordrtc","11","asyncInitShapeSounds","reinitShapeSounds","getShapeSoundObj","viewWidth","viewSize","initShapeSounds","shape","colorName","quantizedSoundStartTime","quantizeLength","bounds","compositionLength","quantizedSoundDuration","soundObj","pathId","spriteName","startPlaying","hasClass","playEnabledClass","playingClass","startComposition","stopPlaying","stopComposition","asyncGetShapeSoundFromShapeName","shapeName","shapeSoundJSONPath","getJSON","resp","shapeSoundData","formatShapeSoundData","promises","when","done","returnSounds","returnData","urls","smallestDuration","bpm","returnDuration","quantizePosition","position","smallestInterval","measures","returnPosition","animateShapePlay","animating","totalDuration","measureLength","animate","rotate","settings","easing","complete","removeShapeFromComposition","shapeGroup","getItems","_ret","clearSoundTimeouts","soundTimeout","playCompositionFirstTime","trimmedCompositionObj","getTrimmedCompositionObj","iterations","repeatComposition","playCompositionOnce","trimmedComposition","getCompositionStartTime","modifiedSound","shallowCopy","beatLength","./shape","howler","12","pauseVideo","exitTutorialMode","drawInactivityDelay","inputDelay","refreshCheckDelay","overlayDelay","13","hammerTips","tipsOverlay","doubleTap","panStart","panMove","panEnd","pinchStart","pinchMove","pinchEnd","enablePanAndPinchEvents","enablePanEvents","enablePinchEvents","enableTapEvents","disableTapEvents","disablePanEvents","disablePinchEvents","pointer","hitResult","hitTest","hitOptions","eventTargetIsOnCanvas","hideContextualTutByName","stopPropagation","strokeCap","maxShapeLength","angleDelta","prevPoint","halfPointX","halfPointY","halfPoint","topX","topY","bottomX","bottomY","smooth","speed","tooLong","draw","minShapeSize","shapeSize","centerPoint","rad","gradientSize","originX","originY","destinationX","destinationY","origin","gradient","stops","shapeSoundObj","outlineGroup","outline","outer","outlineCenter","middle","sendToBack","shapeMask","enclosedLoops","line","unditherButtonsByName","scaleFactor","allTutsCompleted","tutName","_groups","addContextualTut","tut","interacting","originalRotation","originalScale","thrown","$tut","$pinchedTut","currentScale","scaleDelta","currentRotation","rotationDelta","moveContextualTut","hypot","viewHypot","maxScaleFactor","move","hideContextualTut","throwPinchedGroup","velocityMultiplier","viewHeight","offScreen","newX","newY","newPos","tolerance","hammerjs","14","getTutByName","tutObj","tutorialCompletionObj","completion","shapeCenter","tutCopy","tutPos","getTutPositionFromCenter","css","visibility","$tuts","resetContextualTuts","tutWidth","outerWidth","tutHeight","outerHeight","leftPos","topPos","tutArrowHeight","15","initLogoRefresh","initColorPalette","initNewButton","initUndoButton","initPlayButton","initTipsButton","initShareButton","initContextualTuts","resetCanvas","ditherButtonsByName","buttonNames","undither","ditherButtonByName","buttonName","$button","ditheredClass","unditherButtonByName","newPressed","activeLayer","removeChildren","undoPressed","lastMove","clearGroupPops","numGroups","getNumGroups","tipsPressed","sharePressed","share","$paletteWrap","$paletteColors","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","$svg","clear","numCanvasses","randomCanvasIndex","canvasBg","Raster","scaleFactorHorizontal","scaleFactorVertical","Layer","./share","16","degrees","deg","radians","delta","toLocaleTimeString","returnPops","groupPops","intersectingPops","res","original","getPrototypeOf","getOwnPropertyNames","getOwnPropertyDescriptor","array","17","playVideo","videoPlayingClass","main","$video","$videoWrapper","./main"],"mappings":"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KAAM,SAENooC,SAAW9/B,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MACtpCxI,KAAM,SAENooC,SAAW9/B,EAAK,IAAKE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,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AAUE,EAAK,YAC7TxI,KAAM,aAENooC,SAAW9/B,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAC9hDxI,KAAM,aAENooC,SAAW9/B,EAAG,EAAGE,EAAG,IAAOF,EAAG,EAAGE,EAAG,KAAQF,EAAG,GAAIE,EAAG,KAAQF,EAAG,GAAIE,EAAG,IACxExI,KAAM,WAENooC,SAAW9/B,EAAG,EAAGE,EAAG,IAAOF,EAAG,EAAGE,EAAG,MAASF,EAAG,GAAIE,EAAG,MAASF,EAAG,GAAIE,EAAG,IAC1ExI,KAAM,WAENooC,SAAW9/B,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK;GAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MACl5DxI,KAAM,WAENooC,SAAW9/B,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MACvexI,KAAM,UAENooC,SAAW9/B,EAAK,GAAIE,EAAK,KAAQF,EAAK,IAAKE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,KACrNxI,KAAM,UAENooC,SAAW9/B,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,IAAKE,EAAK,KAAQF,EAAK,GAAIE,EAAK,KAAQF,EAAK,GAAIE,EAAK,MACzIxI,KAAM,UAENooC,SAAW9/B,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAC1vCxI,KAAM,UAENooC,SAAW9/B,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MACjhDxI,KAAM,UAENooC,SAAW9/B,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,GAAIE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE,EAAK,MAASF,EAAK,IAAKE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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nexports.runAnimations = false;\nexports.pop = true;\nexports.canvasId = 'canvas';\n\nexports.palette = {\n  colors: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#CA2E26\", \"#9A2A1F\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#DAAD27\", \"#7F7D31\", \"#2B5E2E\"],\n  colorNames: {\n    \"#20171C\": \"black\",\n    \"#1E2A43\": \"blue\",\n    \"#28377D\": \"blue\",\n    \"#352747\": \"blue\",\n    \"#CA2E26\": \"red\",\n    \"#9A2A1F\": \"red\",\n    \"#DA6C26\": \"orange\",\n    \"#453121\": \"brown\",\n    \"#916A47\": \"brown\",\n    \"#DAAD27\": \"orange\",\n    \"#7F7D31\": \"green\",\n    \"#2B5E2E\": \"green\"\n  },\n  gradients: {\n    '#20171C': ['#20171C', '#000000'],\n    '#1E2A43': ['#1E2A43', '#263166'],\n    '#28377D': ['#28377D', '#1E4695'],\n    '#352747': ['#352747', '#45005B'],\n    '#CA2E26': ['#CA2E26', '#9B352F'],\n    '#9A2A1F': ['#9A2A1F', '#CD3621'],\n    '#DA6C26': ['#DA6C26', '#BD4820'],\n    '#453121': ['#453121', '#281806'],\n    '#916A47': ['#916A47', '#623A22'],\n    '#DAAD27': ['#DAAD27', '#AF871D'],\n    '#7F7D31': ['#7F7D31', '#555827'],\n    '#2B5E2E': ['#2B5E2E', '#16451D']\n  },\n  pops: [\"#00ADEF\", \"#F285A5\", \"#7DC57F\", \"#F6EB16\", \"#F4EAE0\"],\n  colorSize: 20,\n  selectedColorSize: 30\n};\n\nexports.contextualTuts = [{\n  type: \"fill\",\n  copy: \"<strong>Double-tap</strong> a filled shape to <strong>UNFILL</strong> it. Repeat to <strong>FILL</strong> an unfilled shape.\"\n}, {\n  type: \"pinch\",\n  copy: \"<strong>Pinch</strong> shapes with <strong>TWO FINGERS</strong> to <strong>resize</strong> and <strong>move</strong> them.\"\n}, {\n  type: \"swipe\",\n  copy: \"To <strong>remove</strong> shapes, <strong>pinch</strong> with <strong>two fingers</strong> then <strong>swipe</strong> or hit <strong>undo</strong>.\"\n}];\n\n},{}],2:[function(require,module,exports){\n/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.value = vol;\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.value = muted ? 0 : self._volume;\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.state = 'resuming';\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Check if this extension is available.\n        if (Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If we have no sprite and the sound hasn't loaded, we must wait\n      // for the sound to load to get our audio's duration.\n      if (self._state !== 'loaded' && !self._sprite[sprite]) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(self._soundById(sound._id) ? sound._id : undefined);\n          }\n        });\n\n        return sound._id;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        var isRunning = (Howler.state === 'running');\n        if (self._state === 'loaded' && isRunning) {\n          playWebAudio();\n        } else {\n          // Wait for the audio to load and then begin playback.\n          self.once(isRunning ? 'load' : 'resume', playWebAudio, isRunning ? sound._id : null);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          setTimeout(function() {\n            node.play();\n\n            // Setup the new end timer.\n            if (timeout !== Infinity) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            if (!internal) {\n              self._emit('play', sound._id);\n            }\n          }, 0);\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                if (!internal) {\n                  self._emit('stop', sound._id);\n                }\n\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n        }\n\n        if (sound && !internal) {\n          self._emit('stop', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n      var diff = Math.abs(from - to);\n      var dir = from > to ? 'out' : 'in';\n      var steps = diff / 0.01;\n      var stepLen = (steps > 0) ? len / steps : len;\n\n      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.\n      if (stepLen < 4) {\n        steps = Math.ceil(steps / (4 / stepLen));\n        stepLen = 4;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          var vol = from;\n          sound._interval = setInterval(function(soundId, sound) {\n            // Update the volume amount, but only if the volume should change.\n            if (steps > 0) {\n              vol += (dir === 'in' ? 0.01 : -0.01);\n            }\n\n            // Make sure the volume is in the right bounds.\n            vol = Math.max(0, vol);\n            vol = Math.min(1, vol);\n\n            // Round to within 2 decimal points.\n            vol = Math.round(vol * 100) / 100;\n\n            // Change the volume.\n            if (self._webAudio) {\n              if (typeof id === 'undefined') {\n                self._volume = vol;\n              }\n\n              sound._volume = vol;\n            } else {\n              self.volume(vol, soundId, true);\n            }\n\n            // When the fade is complete, stop it and fire event.\n            if (vol === to) {\n              clearInterval(sound._interval);\n              sound._interval = null;\n              self.volume(vol, soundId);\n              self._emit('fade', soundId);\n            }\n          }.bind(self, ids[i], sound), stepLen);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.value = rate;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n          self._emit('end', sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading.\n          sounds[i]._node.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=';\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      if (fn) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          if (fn === events[i].fn && id === events[i].id) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.value = sound._rate;\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (self._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorListener, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.value = 1;\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.value = pan;\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or\n   * all in the group. The most common usage is to set the 'x' position for\n   * left/right panning. Setting any value higher than 1.0 will begin to\n   * decrease the volume of the sound as it moves further away.\n   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.\n   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of\n   *                      `coneOuterGain` outside this angle.\n   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.\n   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves\n   *                      away from listener. Can be `linear`, `inverse` or `exponential`.\n   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *     refDistance - (1 by default) A reference distance for reducing volume as the source\n   *                    moves away from the listener.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,\n            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,\n            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,\n            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,\n            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.panningModel = pa.panningModel;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.value = sound._stereo;\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id);\n    }\n  };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],4:[function(require,module,exports){\n(function (global){\n// Last time updated: 2017-02-13 9:58:18 AM UTC\n\n// ________________\n// RecordRTC v5.4.1\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n'use strict';\n\n// ____________\n// RecordRTC.js\n\n/**\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a JavaScript-based media-recording library for modern web-browsers (supporting WebRTC getUserMedia API). It is optimized for different devices and browsers to bring all client-side (pluginfree) recording solutions in single place.\n * @summary JavaScript audio/video recording library runs top over WebRTC getUserMedia API.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTC\n * @class\n * @example\n * var recordRTC = RecordRTC(mediaStream, {\n *     type: 'video' // audio or video or gif or canvas\n * });\n *\n * // or, you can also use the \"new\" keyword\n * var recordRTC = new RecordRTC(mediaStream[, config]);\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\nfunction RecordRTC(mediaStream, config) {\n    if (!mediaStream) {\n        throw 'MediaStream is mandatory.';\n    }\n\n    config = config || {\n        type: 'video'\n    };\n\n    config = new RecordRTCConfiguration(mediaStream, config);\n\n    // a reference to user's recordRTC object\n    var self = this;\n\n    function startRecording() {\n        if (!config.disableLogs) {\n            console.debug('started recording ' + config.type + ' stream.');\n        }\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder.record();\n\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n            return self;\n        }\n\n        initRecorder(function() {\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n        });\n\n        return self;\n    }\n\n    function initRecorder(initCallback) {\n        if (initCallback) {\n            config.initCallback = function() {\n                initCallback();\n                initCallback = config.initCallback = null; // recordRTC.initRecorder should be call-backed once.\n            };\n        }\n\n        var Recorder = new GetRecorderType(mediaStream, config);\n\n        mediaRecorder = new Recorder(mediaStream, config);\n        mediaRecorder.record();\n\n        if (!config.disableLogs) {\n            console.debug('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n        }\n    }\n\n    function stopRecording(callback) {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        /*jshint validthis:true */\n        var recordRTC = this;\n\n        if (!config.disableLogs) {\n            console.warn('Stopped recording ' + config.type + ' stream.');\n        }\n\n        if (config.type !== 'gif') {\n            mediaRecorder.stop(_callback);\n        } else {\n            mediaRecorder.stop();\n            _callback();\n        }\n\n        function _callback(__blob) {\n            for (var item in mediaRecorder) {\n                if (self) {\n                    self[item] = mediaRecorder[item];\n                }\n\n                if (recordRTC) {\n                    recordRTC[item] = mediaRecorder[item];\n                }\n            }\n\n            var blob = mediaRecorder.blob;\n\n            if (!blob) {\n                if (__blob) {\n                    mediaRecorder.blob = blob = __blob;\n                } else {\n                    throw 'Recording failed.';\n                }\n            }\n\n            if (callback) {\n                var url = URL.createObjectURL(blob);\n                callback(url);\n            }\n\n            if (blob && !config.disableLogs) {\n                console.debug(blob.type, '->', bytesToSize(blob.size));\n            }\n\n            if (!config.autoWriteToDisk) {\n                return;\n            }\n\n            getDataURL(function(dataURL) {\n                var parameter = {};\n                parameter[config.type + 'Blob'] = dataURL;\n                DiskStorage.Store(parameter);\n            });\n        }\n    }\n\n    function pauseRecording() {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        mediaRecorder.pause();\n\n        if (!config.disableLogs) {\n            console.debug('Paused recording.');\n        }\n    }\n\n    function resumeRecording() {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        // not all libs have this method yet\n        mediaRecorder.resume();\n\n        if (!config.disableLogs) {\n            console.debug('Resumed recording.');\n        }\n    }\n\n    function readFile(_blob) {\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\n    }\n\n    function getDataURL(callback, _mediaRecorder) {\n        if (!callback) {\n            throw 'Pass a callback function over getDataURL.';\n        }\n\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n        if (!blob) {\n            if (!config.disableLogs) {\n                console.warn('Blob encoder did not finish its job yet.');\n            }\n\n            setTimeout(function() {\n                getDataURL(callback, _mediaRecorder);\n            }, 1000);\n            return;\n        }\n\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n            var webWorker = processInWebWorker(readFile);\n\n            webWorker.onmessage = function(event) {\n                callback(event.data);\n            };\n\n            webWorker.postMessage(blob);\n        } else {\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload = function(event) {\n                callback(event.target.result);\n            };\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\n            ], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            URL.revokeObjectURL(blob);\n            return worker;\n        }\n    }\n\n    function handleRecordingDuration() {\n        setTimeout(function() {\n            stopRecording(self.onRecordingStopped);\n        }, self.recordingDuration);\n    }\n\n    var WARNING = 'It seems that \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n    var mediaRecorder;\n\n    var returnObject = {\n        /**\n         * This method starts recording. It doesn't take any arguments.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.startRecording();\n         */\n        startRecording: startRecording,\n\n        /**\n         * This method stops recording. It takes a single \"callback\" argument. It is suggested to get blob or URI in the callback to make sure all encoders finished their jobs.\n         * @param {function} callback - This callback function is invoked after completion of all encoding jobs.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function(videoURL) {\n         *     video.src = videoURL;\n         *     recordRTC.blob; recordRTC.buffer;\n         * });\n         */\n        stopRecording: stopRecording,\n\n        /**\n         * This method pauses the recording process.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.pauseRecording();\n         */\n        pauseRecording: pauseRecording,\n\n        /**\n         * This method resumes the recording process.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.resumeRecording();\n         */\n        resumeRecording: resumeRecording,\n\n        /**\n         * This method initializes the recording process.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.initRecorder();\n         */\n        initRecorder: initRecorder,\n\n        /**\n         * This method sets the recording duration.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.setRecordingDuration();\n         */\n        setRecordingDuration: function(milliseconds, callback) {\n            if (typeof milliseconds === 'undefined') {\n                throw 'milliseconds is required.';\n            }\n\n            if (typeof milliseconds !== 'number') {\n                throw 'milliseconds must be a number.';\n            }\n\n            self.recordingDuration = milliseconds;\n            self.onRecordingStopped = callback || function() {};\n\n            return {\n                onRecordingStopped: function(callback) {\n                    self.onRecordingStopped = callback;\n                }\n            };\n        },\n\n        /**\n         * This method can be used to clear/reset all the recorded data.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.clearRecordedData();\n         */\n        clearRecordedData: function() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            mediaRecorder.clearRecordedData();\n\n            if (!config.disableLogs) {\n                console.debug('Cleared old recorded data.');\n            }\n        },\n\n        /**\n         * It is equivalent to <code class=\"str\">\"recordRTC.blob\"</code> property.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var blob = recordRTC.getBlob();\n         *\n         *     // equivalent to: recordRTC.blob property\n         *     var blob = recordRTC.blob;\n         * });\n         */\n        getBlob: function() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            return mediaRecorder.blob;\n        },\n\n        /**\n         * This method returns the DataURL. It takes a single \"callback\" argument.\n         * @param {function} callback - DataURL is passed back over this callback.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     recordRTC.getDataURL(function(dataURL) {\n         *         video.src = dataURL;\n         *     });\n         * });\n         */\n        getDataURL: getDataURL,\n\n        /**\n         * This method returns the Virutal/Blob URL. It doesn't take any arguments.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     video.src = recordRTC.toURL();\n         * });\n         */\n        toURL: function() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            return URL.createObjectURL(mediaRecorder.blob);\n        },\n\n        /**\n         * This method saves the blob/file to disk (by invoking save-as dialog). It takes a single (optional) argument i.e. FileName\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     recordRTC.save('file-name');\n         * });\n         */\n        save: function(fileName) {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\n        },\n\n        /**\n         * This method gets a blob from indexed-DB storage. It takes a single \"callback\" argument.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.getFromDisk(function(dataURL) {\n         *     video.src = dataURL;\n         * });\n         */\n        getFromDisk: function(callback) {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            RecordRTC.getFromDisk(config.type, callback);\n        },\n\n        /**\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\n         * @type {Array.<Array>}\n         * @param {Array} arrayOfWebPImages - Array of webp images.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var arrayOfWebPImages = [];\n         * arrayOfWebPImages.push({\n         *     duration: index,\n         *     image: 'data:image/webp;base64,...'\n         * });\n         * recordRTC.setAdvertisementArray(arrayOfWebPImages);\n         */\n        setAdvertisementArray: function(arrayOfWebPImages) {\n            config.advertisement = [];\n\n            var length = arrayOfWebPImages.length;\n            for (var i = 0; i < length; i++) {\n                config.advertisement.push({\n                    duration: i,\n                    image: arrayOfWebPImages[i]\n                });\n            }\n        },\n\n        /**\n         * It is equivalent to <code class=\"str\">\"recordRTC.getBlob()\"</code> method.\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var blob = recordRTC.blob;\n         *\n         *     // equivalent to: recordRTC.getBlob() method\n         *     var blob = recordRTC.getBlob();\n         * });\n         */\n        blob: null,\n\n        /**\n         * @todo Add descriptions.\n         * @property {number} bufferSize - Either audio device's default buffer-size, or your custom value.\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var bufferSize = recordRTC.bufferSize;\n         * });\n         */\n        bufferSize: 0,\n\n        /**\n         * @todo Add descriptions.\n         * @property {number} sampleRate - Audio device's default sample rates.\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var sampleRate = recordRTC.sampleRate;\n         * });\n         */\n        sampleRate: 0,\n\n        /**\n         * @todo Add descriptions.\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var buffer = recordRTC.buffer;\n         * });\n         */\n        buffer: null,\n\n        /**\n         * @todo Add descriptions.\n         * @property {DataView} view - Audio DataView, supported only in Chrome.\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recordRTC.stopRecording(function() {\n         *     var dataView = recordRTC.view;\n         * });\n         */\n        view: null\n    };\n\n    if (!this) {\n        self = returnObject;\n        return returnObject;\n    }\n\n    // if someone wants to use RecordRTC with the \"new\" keyword.\n    for (var prop in returnObject) {\n        this[prop] = returnObject[prop];\n    }\n\n    self = this;\n\n    return returnObject;\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nRecordRTC.getFromDisk = function(type, callback) {\n    if (!callback) {\n        throw 'callback is mandatory.';\n    }\n\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n    DiskStorage.Fetch(function(dataURL, _type) {\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\n            callback(dataURL);\n        }\n\n        if (type === 'all' && callback) {\n            callback(dataURL, _type.replace('Blob', ''));\n        }\n    });\n};\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nRecordRTC.writeToDisk = function(options) {\n    console.log('Writing recorded blob(s) to disk!');\n    options = options || {};\n    if (options.audio && options.video && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                options.gif.getDataURL(function(gifDataURL) {\n                    DiskStorage.Store({\n                        audioBlob: audioDataURL,\n                        videoBlob: videoDataURL,\n                        gifBlob: gifDataURL\n                    });\n                });\n            });\n        });\n    } else if (options.audio && options.video) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    videoBlob: videoDataURL\n                });\n            });\n        });\n    } else if (options.audio && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.video && options.gif) {\n        options.video.getDataURL(function(videoDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    videoBlob: videoDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.audio) {\n        options.audio.getDataURL(function(audioDataURL) {\n            DiskStorage.Store({\n                audioBlob: audioDataURL\n            });\n        });\n    } else if (options.video) {\n        options.video.getDataURL(function(videoDataURL) {\n            DiskStorage.Store({\n                videoBlob: videoDataURL\n            });\n        });\n    } else if (options.gif) {\n        options.gif.getDataURL(function(gifDataURL) {\n            DiskStorage.Store({\n                gifBlob: gifDataURL\n            });\n        });\n    }\n};\n\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n    module.exports = RecordRTC;\n}\n\nif (typeof define === 'function' && define.amd) {\n    define('RecordRTC', [], function() {\n        return RecordRTC;\n    });\n}\n\n// __________________________\n// RecordRTC-Configuration.js\n\n/**\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCConfiguration\n * @class\n * @example\n * var options = RecordRTCConfiguration(mediaStream, options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n */\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n    if (config.recorderType && !config.type) {\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder) {\n            config.type = 'video';\n        } else if (config.recorderType === GifRecorder) {\n            config.type = 'gif';\n        } else if (config.recorderType === StereoAudioRecorder) {\n            config.type = 'audio';\n        } else if (config.recorderType === MediaStreamRecorder) {\n            if (mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n                config.type = 'video';\n            } else if (mediaStream.getAudioTracks().length && !mediaStream.getVideoTracks().length) {\n                config.type = 'audio';\n            } else if (!mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n                config.type = 'audio';\n            } else {\n                // config.type = 'UnKnown';\n            }\n        }\n    }\n\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (!config.mimeType) {\n            config.mimeType = 'video/webm';\n        }\n\n        if (!config.type) {\n            config.type = config.mimeType.split('/')[0];\n        }\n\n        if (!config.bitsPerSecond) {\n            // config.bitsPerSecond = 128000;\n        }\n    }\n\n    // consider default type=audio\n    if (!config.type) {\n        if (config.mimeType) {\n            config.type = config.mimeType.split('/')[0];\n        }\n        if (!config.type) {\n            config.type = 'audio';\n        }\n    }\n\n    return config;\n}\n\n// __________________\n// GetRecorderType.js\n\n/**\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\n * @summary It returns best recorder-type available for your browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GetRecorderType\n * @class\n * @example\n * var RecorderType = GetRecorderType(options);\n * var recorder = new RecorderType(options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\nfunction GetRecorderType(mediaStream, config) {\n    var recorder;\n\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n    if (isChrome || isEdge || isOpera) {\n        // Media Stream Recording API has not been implemented in chrome yet;\n        // That's why using WebAudio API to record stereo audio in WAV format\n        recorder = StereoAudioRecorder;\n    }\n\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n        recorder = MediaStreamRecorder;\n    }\n\n    // video recorder (in WebM format)\n    if (config.type === 'video' && (isChrome || isOpera)) {\n        recorder = WhammyRecorder;\n    }\n\n    // video recorder (in Gif format)\n    if (config.type === 'gif') {\n        recorder = GifRecorder;\n    }\n\n    // html2canvas recording!\n    if (config.type === 'canvas') {\n        recorder = CanvasRecorder;\n    }\n\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if ((mediaStream.getVideoTracks && mediaStream.getVideoTracks().length) || (mediaStream.getAudioTracks && mediaStream.getAudioTracks().length)) {\n            // audio-only recording\n            if (config.type === 'audio') {\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n                // else recorder = StereoAudioRecorder;\n            } else {\n                // video or screen tracks\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n            }\n        }\n    }\n\n    if (config.recorderType) {\n        recorder = config.recorderType;\n    }\n\n    if (mediaStream instanceof Array && mediaStream.length) {\n        recorder = MultiStreamRecorder;\n    }\n\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\n        console.debug('Using recorderType:', recorder.name || recorder.constructor.name);\n    }\n\n    return recorder;\n}\n\n// _____________\n// MRecordRTC.js\n\n/**\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MRecordRTC\n * @class\n * @example\n * var recorder = new MRecordRTC();\n * recorder.addStream(MediaStream);\n * recorder.mediaType = {\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n *     video: true, // or WhammyRecorder or MediaStreamRecorder\n *     gif: true    // or GifRecorder\n * };\n * // mimeType is optional and should be set only in advance cases.\n * recorder.mimeType = {\n *     audio: 'audio/wav',\n *     video: 'video/webm',\n *     gif:   'image/gif'\n * };\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n */\n\nfunction MRecordRTC(mediaStream) {\n\n    /**\n     * This method attaches MediaStream object to {@link MRecordRTC}.\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.addStream(MediaStream);\n     */\n    this.addStream = function(_mediaStream) {\n        if (_mediaStream) {\n            mediaStream = _mediaStream;\n        }\n    };\n\n    /**\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\n     * @memberof MRecordRTC\n     * @example\n     * var recorder = new MRecordRTC();\n     * recorder.mediaType = {\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder\n     *     gif  : true  // TRUE or GifRecorder\n     * };\n     */\n    this.mediaType = {\n        audio: true,\n        video: true\n    };\n\n    /**\n     * This method starts recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.startRecording();\n     */\n    this.startRecording = function() {\n        var mediaType = this.mediaType;\n        var recorderType;\n        var mimeType = this.mimeType || {\n            audio: null,\n            video: null,\n            gif: null\n        };\n\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && mediaStream.getAudioTracks && !mediaStream.getAudioTracks().length) {\n            // Firefox supports both audio/video in single blob\n            mediaType.audio = false;\n        }\n\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\n            // Firefox supports both audio/video in single blob\n            mediaType.video = false;\n        }\n\n        if (!mediaType.audio && !mediaType.video) {\n            throw 'MediaStream must have either audio or video tracks.';\n        }\n\n        if (!!mediaType.audio) {\n            recorderType = null;\n            if (typeof mediaType.audio === 'function') {\n                recorderType = mediaType.audio;\n            }\n\n            this.audioRecorder = new RecordRTC(mediaStream, {\n                type: 'audio',\n                bufferSize: this.bufferSize,\n                sampleRate: this.sampleRate,\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.audio\n            });\n\n            if (!mediaType.video) {\n                this.audioRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.video) {\n            recorderType = null;\n            if (typeof mediaType.video === 'function') {\n                recorderType = mediaType.video;\n            }\n\n            var newStream = mediaStream;\n\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n                var videoTrack = mediaStream.getVideoTracks()[0];\n\n                if (!!navigator.mozGetUserMedia) {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n\n                    if (recorderType && recorderType === WhammyRecorder) {\n                        // Firefox does NOT support webp-encoding yet\n                        recorderType = MediaStreamRecorder;\n                    }\n                } else {\n                    newStream = new MediaStream([videoTrack]);\n                }\n            }\n\n            this.videoRecorder = new RecordRTC(newStream, {\n                type: 'video',\n                video: this.video,\n                canvas: this.canvas,\n                frameInterval: this.frameInterval || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.video\n            });\n\n            if (!mediaType.audio) {\n                this.videoRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.audio && !!mediaType.video) {\n            var self = this;\n            if (isMediaRecorderCompatible()) {\n                self.audioRecorder = null;\n                self.videoRecorder.startRecording();\n            } else {\n                self.videoRecorder.initRecorder(function() {\n                    self.audioRecorder.initRecorder(function() {\n                        // Both recorders are ready to record things accurately\n                        self.videoRecorder.startRecording();\n                        self.audioRecorder.startRecording();\n                    });\n                });\n            }\n        }\n\n        if (!!mediaType.gif) {\n            recorderType = null;\n            if (typeof mediaType.gif === 'function') {\n                recorderType = mediaType.gif;\n            }\n            this.gifRecorder = new RecordRTC(mediaStream, {\n                type: 'gif',\n                frameRate: this.frameRate || 200,\n                quality: this.quality || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.gif\n            });\n            this.gifRecorder.startRecording();\n        }\n    };\n\n    /**\n     * This method stops recording.\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.stopRecording(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     */\n    this.stopRecording = function(callback) {\n        callback = callback || function() {};\n\n        if (this.audioRecorder) {\n            this.audioRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'audio');\n            });\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'video');\n            });\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'gif');\n            });\n        }\n    };\n\n    /**\n     * This method pauses recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.pauseRecording();\n     */\n    this.pauseRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.pauseRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.pauseRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.pauseRecording();\n        }\n    };\n\n    /**\n     * This method resumes recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.resumeRecording();\n     */\n    this.resumeRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.resumeRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.resumeRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.resumeRecording();\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs.\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getBlob(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     * // or\n     * var audioBlob = recorder.getBlob().audio;\n     * var videoBlob = recorder.getBlob().video;\n     */\n    this.getBlob = function(callback) {\n        var output = {};\n\n        if (this.audioRecorder) {\n            output.audio = this.audioRecorder.getBlob();\n        }\n\n        if (this.videoRecorder) {\n            output.video = this.videoRecorder.getBlob();\n        }\n\n        if (this.gifRecorder) {\n            output.gif = this.gifRecorder.getBlob();\n        }\n\n        if (callback) {\n            callback(output);\n        }\n\n        return output;\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs' DataURLs.\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getDataURL(function(recording){\n     *     var audioDataURL = recording.audio;\n     *     var videoDataURL = recording.video;\n     *     var gifDataURL   = recording.gif;\n     * });\n     */\n    this.getDataURL = function(callback) {\n        this.getBlob(function(blob) {\n            if (blob.audio && blob.video) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    getDataURL(blob.video, function(_videoDataURL) {\n                        callback({\n                            audio: _audioDataURL,\n                            video: _videoDataURL\n                        });\n                    });\n                });\n            } else if (blob.audio) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    callback({\n                        audio: _audioDataURL\n                    });\n                });\n            } else if (blob.video) {\n                getDataURL(blob.video, function(_videoDataURL) {\n                    callback({\n                        video: _videoDataURL\n                    });\n                });\n            }\n        });\n\n        function getDataURL(blob, callback00) {\n            if (typeof Worker !== 'undefined') {\n                var webWorker = processInWebWorker(function readFile(_blob) {\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\n                });\n\n                webWorker.onmessage = function(event) {\n                    callback00(event.data);\n                };\n\n                webWorker.postMessage(blob);\n            } else {\n                var reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onload = function(event) {\n                    callback00(event.target.result);\n                };\n            }\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\n            ], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            var url;\n            if (typeof URL !== 'undefined') {\n                url = URL;\n            } else if (typeof webkitURL !== 'undefined') {\n                url = webkitURL;\n            } else {\n                throw 'Neither URL nor webkitURL detected.';\n            }\n            url.revokeObjectURL(blob);\n            return worker;\n        }\n    };\n\n    /**\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.writeToDisk();\n     */\n    this.writeToDisk = function() {\n        RecordRTC.writeToDisk({\n            audio: this.audioRecorder,\n            video: this.videoRecorder,\n            gif: this.gifRecorder\n        });\n    };\n\n    /**\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.save({\n     *     audio: 'audio-file-name',\n     *     video: 'video-file-name',\n     *     gif  : 'gif-file-name'\n     * });\n     */\n    this.save = function(args) {\n        args = args || {\n            audio: true,\n            video: true,\n            gif: true\n        };\n\n        if (!!args.audio && this.audioRecorder) {\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n        }\n\n        if (!!args.video && this.videoRecorder) {\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n        }\n        if (!!args.gif && this.gifRecorder) {\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n        }\n    };\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function(that) {\n    if (!that) {\n        return;\n    }\n\n    if (typeof window !== 'undefined') {\n        return;\n    }\n\n    if (typeof global === 'undefined') {\n        return;\n    }\n\n    global.navigator = {\n        userAgent: browserFakeUserAgent,\n        getUserMedia: function() {}\n    };\n\n    if (!global.console) {\n        global.console = {};\n    }\n\n    if (typeof global.console.debug === 'undefined') {\n        global.console.debug = global.console.info = global.console.error = global.console.log = global.console.log || function() {\n            console.log(arguments);\n        };\n    }\n\n    if (typeof document === 'undefined') {\n        /*global document:true */\n        that.document = {};\n\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\n            var obj = {\n                getContext: function() {\n                    return obj;\n                },\n                play: function() {},\n                pause: function() {},\n                drawImage: function() {},\n                toDataURL: function() {\n                    return '';\n                }\n            };\n            return obj;\n        };\n\n        that.HTMLVideoElement = function() {};\n    }\n\n    if (typeof location === 'undefined') {\n        /*global location:true */\n        that.location = {\n            protocol: 'file:',\n            href: '',\n            hash: ''\n        };\n    }\n\n    if (typeof screen === 'undefined') {\n        /*global screen:true */\n        that.screen = {\n            width: 0,\n            height: 0\n        };\n    }\n\n    if (typeof URL === 'undefined') {\n        /*global screen:true */\n        that.URL = {\n            createObjectURL: function() {\n                return '';\n            },\n            revokeObjectURL: function() {\n                return '';\n            }\n        };\n    }\n\n    /*global window:true */\n    that.window = global;\n})(typeof global !== 'undefined' ? global : null);\n\n// _____________________________\n// Cross-Browser-Declarations.js\n\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\nvar requestAnimationFrame = window.requestAnimationFrame;\nif (typeof requestAnimationFrame === 'undefined') {\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = webkitRequestAnimationFrame;\n    }\n\n    if (typeof mozRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = mozRequestAnimationFrame;\n    }\n}\n\n/*jshint -W079 */\nvar cancelAnimationFrame = window.cancelAnimationFrame;\nif (typeof cancelAnimationFrame === 'undefined') {\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = webkitCancelAnimationFrame;\n    }\n\n    if (typeof mozCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = mozCancelAnimationFrame;\n    }\n}\n\n// WebAudio API representer\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = mozAudioContext;\n    }\n}\n\n/*jshint -W079 */\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia;\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n}\n\n/*global MediaStream:true */\nif (typeof MediaStream !== 'undefined') {\n    if (!('getVideoTracks' in MediaStream.prototype)) {\n        MediaStream.prototype.getVideoTracks = function() {\n            if (!this.getTracks) {\n                return [];\n            }\n\n            var tracks = [];\n            this.getTracks.forEach(function(track) {\n                if (track.kind.toString().indexOf('video') !== -1) {\n                    tracks.push(track);\n                }\n            });\n            return tracks;\n        };\n\n        MediaStream.prototype.getAudioTracks = function() {\n            if (!this.getTracks) {\n                return [];\n            }\n\n            var tracks = [];\n            this.getTracks.forEach(function(track) {\n                if (track.kind.toString().indexOf('audio') !== -1) {\n                    tracks.push(track);\n                }\n            });\n            return tracks;\n        };\n    }\n\n    if (!('stop' in MediaStream.prototype)) {\n        MediaStream.prototype.stop = function() {\n            this.getAudioTracks().forEach(function(track) {\n                if (!!track.stop) {\n                    track.stop();\n                }\n            });\n\n            this.getVideoTracks().forEach(function(track) {\n                if (!!track.stop) {\n                    track.stop();\n                }\n            });\n        };\n    }\n}\n\n// below function via: http://goo.gl/B3ae8c\n/**\n * @param {number} bytes - Pass bytes and get formafted string.\n * @returns {string} - formafted string\n * @example\n * bytesToSize(1024*1024*5) === '5 GB'\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction bytesToSize(bytes) {\n    var k = 1000;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\n/**\n * @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction invokeSaveAsDialog(file, fileName) {\n    if (!file) {\n        throw 'Blob object is required.';\n    }\n\n    if (!file.type) {\n        try {\n            file.type = 'video/webm';\n        } catch (e) {}\n    }\n\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n    if (fileName && fileName.indexOf('.') !== -1) {\n        var splitted = fileName.split('.');\n        fileName = splitted[0];\n        fileExtension = splitted[1];\n    }\n\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\n\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\n        return navigator.msSaveBlob(file, fileFullName);\n    }\n\n    var hyperlink = document.createElement('a');\n    hyperlink.href = URL.createObjectURL(file);\n    hyperlink.target = '_blank';\n    hyperlink.download = fileFullName;\n\n    if (!!navigator.mozGetUserMedia) {\n        hyperlink.onclick = function() {\n            (document.body || document.documentElement).removeChild(hyperlink);\n        };\n        (document.body || document.documentElement).appendChild(hyperlink);\n    }\n\n    var evt = new MouseEvent('click', {\n        view: window,\n        bubbles: true,\n        cancelable: true\n    });\n\n    hyperlink.dispatchEvent(evt);\n\n    if (!navigator.mozGetUserMedia) {\n        URL.revokeObjectURL(hyperlink.href);\n    }\n}\n\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * Storage.AudioContext === webkitAudioContext\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isChrome = !!window.chrome && !isOpera;\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n\n    if (isFirefox) {\n        return true;\n    }\n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if (isChrome || isOpera) {\n        verOffset = nAgt.indexOf('Chrome');\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return majorVersion >= 49;\n}\n\n// ______________________\n// MediaStreamRecorder.js\n\n/*\n * Implementation of https://dvcs.w3.org/hg/dap/raw-file/default/media-stream-capture/MediaRecorder.html\n * The MediaRecorder accepts a mediaStream as input source passed from UA. When recorder starts,\n * a MediaEncoder will be created and accept the mediaStream as input source.\n * Encoder will get the raw data by track data changes, encode it by selected MIME Type, then store the encoded in EncodedBufferCache object.\n * The encoded data will be extracted on every timeslice passed from Start function call or by RequestData function.\n * Thread model:\n * When the recorder starts, it creates a \"Media Encoder\" thread to read data from MediaEncoder object and store buffer in EncodedBufferCache object.\n * Also extract the encoded data and create blobs on every timeslice passed from start function or RequestData function called by UA.\n */\n\n/**\n * MediaStreamRecorder is an abstraction layer for \"MediaRecorder API\". It is used by {@link RecordRTC} to record MediaStream(s) in Firefox.\n * @summary Runs top over MediaRecorder API.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm',\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     getNativeBlob: true // by default: it is false\n * }\n * var recorder = new MediaStreamRecorder(MediaStream, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", onAudioProcessStarted: function}\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (mediaStream.getVideoTracks().length && mediaStream.getAudioTracks().length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(mediaStream.getAudioTracks()[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(mediaStream.getAudioTracks());\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        self.blob = null;\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // http://dxr.mozilla.org/mozilla-central/source/content/media/MediaRecorder.cpp\n        // https://wiki.mozilla.org/Gecko:MediaRecorder\n        // https://dvcs.w3.org/hg/dap/raw-file/default/media-stream-capture/MediaRecorder.html\n\n        // starting a recording session; which will initiate \"Reading Thread\"\n        // \"Reading Thread\" are used to prevent main-thread blocking scenarios\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n        } catch (e) {\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        if (!MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(config.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', config.mimeType);\n            }\n        }\n\n        // i.e. stop recording when <video> is paused by the user; and auto restart recording \n        // when video is resumed. E.g. yourStream.getVideoTracks()[0].muted = true; // it will auto-stop recording.\n        mediaRecorder.ignoreMutedMedia = config.ignoreMutedMedia || false;\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function(e) {\n            if (self.dontFireOnDataAvailableEvent) {\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: recorderHints.mimeType || 'video/webm'\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            /**\n             * @property {Blob} blob - Recorded frames in video/webm blob.\n             * @memberof MediaStreamRecorder\n             * @example\n             * recorder.stop(function() {\n             *     var blob = recorder.blob;\n             * });\n             */\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: recorderHints.mimeType || 'video/webm'\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onerror = function(error) {\n            if (!config.disableLogs) {\n                if (error.name === 'InvalidState') {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.');\n                } else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.');\n                } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.');\n                } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.');\n                } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                } else {\n                    console.error('MediaRecorder Error', error);\n                }\n            }\n\n            // When the stream is \"ended\" set recording to 'inactive' \n            // and stop gathering data. Callers should not rely on \n            // exactness of the timeSlice value, especially \n            // if the timeSlice value is small. Callers should \n            // consider timeSlice as a minimum value\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        // void start(optional long mTimeSlice)\n        // The interval of passing encoded data from EncodedBufferCache to onDataAvailable\n        // handler. \"mTimeSlice < 0\" means Session object does not push encoded data to\n        // onDataAvailable, instead, it passive wait the client side pull encoded data\n        // by calling requestData API.\n        mediaRecorder.start(3.6e+6);\n\n        // Start recording. If timeSlice has been provided, mediaRecorder will\n        // raise a dataavailable event containing the Blob of collected data on every timeSlice milliseconds.\n        // If timeSlice isn't provided, UA should call the RequestData to obtain the Blob data, also set the mTimeSlice to zero.\n\n        if (config.onAudioProcessStarted) {\n            config.onAudioProcessStarted();\n        }\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = function(blob) {\n            mediaRecorder = null;\n\n            if (callback) {\n                callback(blob);\n            }\n        };\n\n        // mediaRecorder.state === 'recording' means that media recorder is associated with \"session\"\n        // mediaRecorder.state === 'stopped' means that media recorder is detached from the \"session\" ... in this case; \"session\" will also be deleted.\n\n        if (mediaRecorder.state === 'recording') {\n            // \"stop\" method auto invokes \"requestData\"!\n            // mediaRecorder.requestData();\n            mediaRecorder.stop();\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (this.dontFireOnDataAvailableEvent) {\n            this.dontFireOnDataAvailableEvent = false;\n\n            var disableLogs = config.disableLogs;\n            config.disableLogs = true;\n            this.record();\n            config.disableLogs = disableLogs;\n            return;\n        }\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.pause();\n\n        this.dontFireOnDataAvailableEvent = true;\n        this.stop();\n    };\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or any track is ended.\n    (function looper() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n * @summary JavaScript standalone object for stereo audio recording.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef StereoAudioRecorder\n * @class\n * @example\n * var recorder = new StereoAudioRecorder(MediaStream, {\n *     sampleRate: 44100,\n *     bufferSize: 4096\n * });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n */\n\nfunction StereoAudioRecorder(mediaStream, config) {\n    if (!mediaStream.getAudioTracks().length) {\n        throw 'Your stream has no audio tracks.';\n    }\n\n    config = config || {};\n\n    var self = this;\n\n    // variables\n    var leftchannel = [];\n    var rightchannel = [];\n    var recording = false;\n    var recordingLength = 0;\n    var jsAudioNode;\n\n    var numberOfAudioChannels = 2;\n\n    // backward compatibility\n    if (config.leftChannel === true) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (config.numberOfAudioChannels === 1) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (!config.disableLogs) {\n        console.debug('StereoAudioRecorder is set to record number of channels: ', numberOfAudioChannels);\n    }\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        // reset the buffers for the new recording\n        leftchannel.length = rightchannel.length = 0;\n        recordingLength = 0;\n\n        if (audioInput) {\n            audioInput.connect(jsAudioNode);\n        }\n\n        // to prevent self audio to be connected with speakers\n        // jsAudioNode.connect(context.destination);\n\n        isAudioProcessStarted = isPaused = false;\n        recording = true;\n    };\n\n    function mergeLeftRightBuffers(config, callback) {\n        function mergeAudioBuffers(config, cb) {\n            var numberOfAudioChannels = config.numberOfAudioChannels;\n\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n            var leftBuffers = config.leftBuffers.slice(0);\n            var rightBuffers = config.rightBuffers.slice(0);\n            var sampleRate = config.sampleRate;\n            var internalInterleavedLength = config.internalInterleavedLength;\n\n            if (numberOfAudioChannels === 2) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n            }\n\n            if (numberOfAudioChannels === 1) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n            }\n\n            function mergeBuffers(channelBuffer, rLength) {\n                var result = new Float64Array(rLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n\n                for (var i = 0; i < lng; i++) {\n                    var buffer = channelBuffer[i];\n                    result.set(buffer, offset);\n                    offset += buffer.length;\n                }\n\n                return result;\n            }\n\n            function interleave(leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n\n                var result = new Float64Array(length);\n\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                    result[index++] = leftChannel[inputIndex];\n                    result[index++] = rightChannel[inputIndex];\n                    inputIndex++;\n                }\n                return result;\n            }\n\n            function writeUTFBytes(view, offset, string) {\n                var lng = string.length;\n                for (var i = 0; i < lng; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                }\n            }\n\n            // interleave both channels together\n            var interleaved;\n\n            if (numberOfAudioChannels === 2) {\n                interleaved = interleave(leftBuffers, rightBuffers);\n            }\n\n            if (numberOfAudioChannels === 1) {\n                interleaved = leftBuffers;\n            }\n\n            var interleavedLength = interleaved.length;\n\n            // create wav file\n            var resultingBufferLength = 44 + interleavedLength * 2;\n\n            var buffer = new ArrayBuffer(resultingBufferLength);\n\n            var view = new DataView(buffer);\n\n            // RIFF chunk descriptor/identifier \n            writeUTFBytes(view, 0, 'RIFF');\n\n            // RIFF chunk length\n            view.setUint32(4, 44 + interleavedLength * 2, true);\n\n            // RIFF type \n            writeUTFBytes(view, 8, 'WAVE');\n\n            // format chunk identifier \n            // FMT sub-chunk\n            writeUTFBytes(view, 12, 'fmt ');\n\n            // format chunk length \n            view.setUint32(16, 16, true);\n\n            // sample format (raw)\n            view.setUint16(20, 1, true);\n\n            // stereo (2 channels)\n            view.setUint16(22, numberOfAudioChannels, true);\n\n            // sample rate \n            view.setUint32(24, sampleRate, true);\n\n            // byte rate (sample rate * block align)\n            view.setUint32(28, sampleRate * 2, true);\n\n            // block align (channel count * bytes per sample) \n            view.setUint16(32, numberOfAudioChannels * 2, true);\n\n            // bits per sample \n            view.setUint16(34, 16, true);\n\n            // data sub-chunk\n            // data chunk identifier \n            writeUTFBytes(view, 36, 'data');\n\n            // data chunk length \n            view.setUint32(40, interleavedLength * 2, true);\n\n            // write the PCM samples\n            var lng = interleavedLength;\n            var index = 44;\n            var volume = 1;\n            for (var i = 0; i < lng; i++) {\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                index += 2;\n            }\n\n            if (cb) {\n                return cb({\n                    buffer: buffer,\n                    view: view\n                });\n            }\n\n            postMessage({\n                buffer: buffer,\n                view: view\n            });\n        }\n\n        if (!isChrome) {\n            // its Microsoft Edge\n            mergeAudioBuffers(config, function(data) {\n                callback(data.buffer, data.view);\n            });\n            return;\n        }\n\n\n        var webWorker = processInWebWorker(mergeAudioBuffers);\n\n        webWorker.onmessage = function(event) {\n            callback(event.data.buffer, event.data.view);\n\n            // release memory\n            URL.revokeObjectURL(webWorker.workerURL);\n        };\n\n        webWorker.postMessage(config);\n    }\n\n    function processInWebWorker(_function) {\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\n            ';this.onmessage =  function (e) {' + _function.name + '(e.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(workerURL);\n        worker.workerURL = workerURL;\n        return worker;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        // stop recording\n        recording = false;\n\n        // to make sure onaudioprocess stops firing\n        // audioInput.disconnect();\n\n        mergeLeftRightBuffers({\n            sampleRate: sampleRate,\n            numberOfAudioChannels: numberOfAudioChannels,\n            internalInterleavedLength: recordingLength,\n            leftBuffers: leftchannel,\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel\n        }, function(buffer, view) {\n            /**\n             * @property {Blob} blob - The recorded blob object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var blob = recorder.blob;\n             * });\n             */\n            self.blob = new Blob([view], {\n                type: 'audio/wav'\n            });\n\n            /**\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var buffer = recorder.buffer;\n             * });\n             */\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\n\n            /**\n             * @property {DataView} view - The recorded data-view object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var view = recorder.view;\n             * });\n             */\n            self.view = view;\n\n            self.sampleRate = sampleRate;\n            self.bufferSize = bufferSize;\n\n            // recorded audio length\n            self.length = recordingLength;\n\n            if (callback) {\n                callback();\n            }\n\n            isAudioProcessStarted = false;\n        });\n    };\n\n    if (!Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n\n    var context = Storage.AudioContextConstructor;\n\n    // creates an audio node from the microphone incoming stream\n    var audioInput = context.createMediaStreamSource(mediaStream);\n\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n\n    /**\n     * From the spec: This value controls how frequently the audioprocess event is\n     * dispatched and how many sample-frames need to be processed each call.\n     * Lower values for buffer size will result in a lower (better) latency.\n     * Higher values will be necessary to avoid audio breakup and glitches\n     * The size of the buffer (in sample-frames) which needs to\n     * be processed each time onprocessaudio is called.\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     bufferSize: 4096\n     * });\n     */\n\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\n        if (!config.disableLogs) {\n            console.warn('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n        }\n    }\n\n    if (context.createJavaScriptNode) {\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else if (context.createScriptProcessor) {\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else {\n        throw 'WebAudio API has no support on this browser.';\n    }\n\n    // connect the stream to the gain node\n    audioInput.connect(jsAudioNode);\n\n    if (!config.bufferSize) {\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\n    }\n\n    /**\n     * The sample rate (in sample-frames per second) at which the\n     * AudioContext handles audio. It is assumed that all AudioNodes\n     * in the context run at this rate. In making this assumption,\n     * sample-rate converters or \"varispeed\" processors are not supported\n     * in real-time processing.\n     * The sampleRate parameter describes the sample-rate of the\n     * linear PCM audio data in the buffer in sample-frames per second.\n     * An implementation must support sample-rates in at least\n     * the range 22050 to 96000.\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     sampleRate: 44100\n     * });\n     */\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n    if (sampleRate < 22050 || sampleRate > 96000) {\n        // Ref: http://stackoverflow.com/a/26303918/552182\n        if (!config.disableLogs) {\n            console.warn('sample-rate must be under range 22050 and 96000.');\n        }\n    }\n\n    if (!config.disableLogs) {\n        console.log('sample-rate', sampleRate);\n        console.log('buffer-size', bufferSize);\n    }\n\n    var isPaused = false;\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        if (!recording) {\n            if (!config.disableLogs) {\n                console.info('Seems recording has been restarted.');\n            }\n            this.record();\n            return;\n        }\n\n        isPaused = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        this.pause();\n\n        leftchannel.length = rightchannel.length = 0;\n        recordingLength = 0;\n    };\n\n    var isAudioProcessStarted = false;\n\n    function onAudioProcessDataAvailable(e) {\n        if (isPaused) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            jsAudioNode.disconnect();\n            recording = false;\n        }\n\n        if (!recording) {\n            audioInput.disconnect();\n            return;\n        }\n\n        /**\n         * This method is called on \"onaudioprocess\" event's first invocation.\n         * @method {function} onAudioProcessStarted\n         * @memberof StereoAudioRecorder\n         * @example\n         * recorder.onAudioProcessStarted: function() { };\n         */\n        if (!isAudioProcessStarted) {\n            isAudioProcessStarted = true;\n            if (config.onAudioProcessStarted) {\n                config.onAudioProcessStarted();\n            }\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        }\n\n        var left = e.inputBuffer.getChannelData(0);\n\n        // we clone the samples\n        leftchannel.push(new Float32Array(left));\n\n        if (numberOfAudioChannels === 2) {\n            var right = e.inputBuffer.getChannelData(1);\n            rightchannel.push(new Float32Array(right));\n        }\n\n        recordingLength += bufferSize;\n    }\n\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n\n    // to prevent self audio to be connected with speakers\n    jsAudioNode.connect(context.destination);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n}\n\n// _________________\n// CanvasRecorder.js\n\n/**\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\n * @summary HTML2Canvas recording into video WebM.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef CanvasRecorder\n * @class\n * @example\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\n * @param {object} config - {disableLogs:true, initCallback: function}\n */\n\nfunction CanvasRecorder(htmlElement, config) {\n    if (typeof html2canvas === 'undefined' && htmlElement.nodeName.toLowerCase() !== 'canvas') {\n        throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\n    }\n\n    config = config || {};\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    // via DetectRTC.js\n    var isCanvasSupportsStreamCapturing = false;\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\n        if (item in document.createElement('canvas')) {\n            isCanvasSupportsStreamCapturing = true;\n        }\n    });\n\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (_isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    if (_isChrome && chromeVersion < 52) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    var globalCanvas, mediaStreamRecorder;\n\n    if (isCanvasSupportsStreamCapturing) {\n        if (!config.disableLogs) {\n            console.debug('Your browser supports both MediRecorder API and canvas.captureStream!');\n        }\n\n        if (htmlElement instanceof HTMLCanvasElement) {\n            globalCanvas = htmlElement;\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\n            globalCanvas = htmlElement.canvas;\n        } else {\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n        }\n    } else if (!!navigator.mozGetUserMedia) {\n        if (!config.disableLogs) {\n            console.error('Canvas recording is NOT supported in Firefox.');\n        }\n    }\n\n    var isRecording;\n\n    /**\n     * This method records Canvas.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        isRecording = true;\n\n        if (isCanvasSupportsStreamCapturing) {\n            // CanvasCaptureMediaStream\n            var canvasMediaStream;\n            if ('captureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n            } else if ('mozCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\n            } else if ('webkitCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n            }\n\n            try {\n                var mdStream = new MediaStream();\n                mdStream.addTrack(canvasMediaStream.getVideoTracks()[0]);\n                canvasMediaStream = mdStream;\n            } catch (e) {}\n\n            if (!canvasMediaStream) {\n                throw 'captureStream API are NOT available.';\n            }\n\n            // Note: Jan 18, 2016 status is that, \n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n                mimeType: 'video/webm'\n            });\n            mediaStreamRecorder.record();\n        } else {\n            whammy.frames = [];\n            lastTime = new Date().getTime();\n            drawCanvasFrame();\n        }\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    this.getWebPImages = function(callback) {\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n            callback();\n            return;\n        }\n\n        var framesLength = whammy.frames.length;\n        whammy.frames.forEach(function(frame, idx) {\n            var framesRemaining = framesLength - idx;\n            if (!config.disableLogs) {\n                console.debug(framesRemaining + '/' + framesLength + ' frames remaining');\n            }\n\n            if (config.onEncodingCallback) {\n                config.onEncodingCallback(framesRemaining, framesLength);\n            }\n\n            var webp = frame.image.toDataURL('image/webp', 1);\n            whammy.frames[idx].image = webp;\n        });\n\n        if (!config.disableLogs) {\n            console.debug('Generating WebM');\n        }\n\n        callback();\n    };\n\n    /**\n     * This method stops recording Canvas.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        isRecording = false;\n\n        var that = this;\n\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n            mediaStreamRecorder.stop(callback);\n            return;\n        }\n\n        this.getWebPImages(function() {\n            /**\n             * @property {Blob} blob - Recorded frames in video/webm blob.\n             * @memberof CanvasRecorder\n             * @example\n             * recorder.stop(function() {\n             *     var blob = recorder.blob;\n             * });\n             */\n            whammy.compile(function(blob) {\n                if (!config.disableLogs) {\n                    console.debug('Recording finished!');\n                }\n\n                that.blob = blob;\n\n                if (that.blob.forEach) {\n                    that.blob = new Blob([], {\n                        type: 'video/webm'\n                    });\n                }\n\n                if (callback) {\n                    callback(that.blob);\n                }\n\n                whammy.frames = [];\n            });\n        });\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (!isRecording) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        this.pause();\n        whammy.frames = [];\n    };\n\n    function cloneCanvas() {\n        //create a new canvas\n        var newCanvas = document.createElement('canvas');\n        var context = newCanvas.getContext('2d');\n\n        //set dimensions\n        newCanvas.width = htmlElement.width;\n        newCanvas.height = htmlElement.height;\n\n        //apply the old canvas to the new one\n        context.drawImage(htmlElement, 0, 0);\n\n        //return the new canvas\n        return newCanvas;\n    }\n\n    function drawCanvasFrame() {\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawCanvasFrame, 500);\n        }\n\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n            var duration = new Date().getTime() - lastTime;\n            // via #206, by Jack i.e. @Seymourr\n            lastTime = new Date().getTime();\n\n            whammy.frames.push({\n                image: cloneCanvas(),\n                duration: duration\n            });\n\n            if (isRecording) {\n                setTimeout(drawCanvasFrame, config.frameInterval);\n            }\n            return;\n        }\n\n        html2canvas(htmlElement, {\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n            onrendered: function(canvas) {\n                var duration = new Date().getTime() - lastTime;\n                if (!duration) {\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n\n                // via #206, by Jack i.e. @Seymourr\n                lastTime = new Date().getTime();\n\n                whammy.frames.push({\n                    image: canvas.toDataURL('image/webp', 1),\n                    duration: duration\n                });\n\n                if (isRecording) {\n                    setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n            }\n        });\n    }\n\n    var lastTime = new Date().getTime();\n\n    var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.CanvasRecorder = CanvasRecorder;\n}\n\n// _________________\n// WhammyRecorder.js\n\n/**\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\n * @summary Video recording feature in Chrome.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WhammyRecorder\n * @class\n * @example\n * var recorder = new WhammyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n */\n\nfunction WhammyRecorder(mediaStream, config) {\n\n    config = config || {};\n\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    if (!config.disableLogs) {\n        console.log('Using frames-interval:', config.frameInterval);\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (!config.width) {\n            config.width = 320;\n        }\n\n        if (!config.height) {\n            config.height = 240;\n        }\n\n        if (!config.video) {\n            config.video = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        if (!config.canvas) {\n            config.canvas = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        canvas.width = config.canvas.width || 320;\n        canvas.height = config.canvas.height || 240;\n\n        context = canvas.getContext('2d');\n\n        // setting defaults\n        if (config.video && config.video instanceof HTMLVideoElement) {\n            video = config.video.cloneNode();\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        } else {\n            video = document.createElement('video');\n\n            if (typeof video.srcObject !== 'undefined') {\n                video.srcObject = mediaStream;\n            } else {\n                video.src = URL.createObjectURL(mediaStream);\n            }\n\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\n                if (config.initCallback) {\n                    config.initCallback();\n                }\n            };\n\n            video.width = config.video.width;\n            video.height = config.video.height;\n        }\n\n        video.muted = true;\n        video.play();\n\n        lastTime = new Date().getTime();\n        whammy = new Whammy.Video();\n\n        if (!config.disableLogs) {\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n        }\n\n        drawFrames(config.frameInterval);\n    };\n\n    /**\n     * Draw and push frames to Whammy\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\n     */\n    function drawFrames(frameInterval) {\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n\n        var duration = new Date().getTime() - lastTime;\n        if (!duration) {\n            return setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawFrames, 100);\n        }\n\n        // via #206, by Jack i.e. @Seymourr\n        lastTime = new Date().getTime();\n\n        if (video.paused) {\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n            // Tweak for Android Chrome\n            video.play();\n        }\n\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        whammy.frames.push({\n            duration: duration,\n            image: canvas.toDataURL('image/webp')\n        });\n\n        if (!isStopDrawing) {\n            setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n    }\n\n    function asyncLoop(o) {\n        var i = -1,\n            length = o.length;\n\n        var loop = function() {\n            i++;\n            if (i === length) {\n                o.callback();\n                return;\n            }\n            o.functionToLoop(loop, i);\n        };\n        loop(); //init\n    }\n\n\n    /**\n     * remove black frames from the beginning to the specified frame\n     * @param {Array} _frames - array of frames to be checked\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\n     * @returns {Array} - array of frames\n     */\n    // pull#293 by @volodalexey\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n        var localCanvas = document.createElement('canvas');\n        localCanvas.width = canvas.width;\n        localCanvas.height = canvas.height;\n        var context2d = localCanvas.getContext('2d');\n        var resultFrames = [];\n\n        var checkUntilNotBlack = _framesToCheck === -1;\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\n            _framesToCheck : _frames.length;\n        var sampleColor = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var maxColorDifference = Math.sqrt(\n            Math.pow(255, 2) +\n            Math.pow(255, 2) +\n            Math.pow(255, 2)\n        );\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n        var doNotCheckNext = false;\n\n        asyncLoop({\n            length: endCheckFrame,\n            functionToLoop: function(loop, f) {\n                var matchPixCount, endPixCheck, maxPixCount;\n\n                var finishImage = function() {\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n                    } else {\n                        // console.log('frame is passed : ' + f);\n                        if (checkUntilNotBlack) {\n                            doNotCheckNext = true;\n                        }\n                        resultFrames.push(_frames[f]);\n                    }\n                    loop();\n                };\n\n                if (!doNotCheckNext) {\n                    var image = new Image();\n                    image.onload = function() {\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n                        matchPixCount = 0;\n                        endPixCheck = imageData.data.length;\n                        maxPixCount = imageData.data.length / 4;\n\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\n                            var currentColor = {\n                                r: imageData.data[pix],\n                                g: imageData.data[pix + 1],\n                                b: imageData.data[pix + 2]\n                            };\n                            var colorDifference = Math.sqrt(\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\n                                Math.pow(currentColor.b - sampleColor.b, 2)\n                            );\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\n                                matchPixCount++;\n                            }\n                        }\n                        finishImage();\n                    };\n                    image.src = _frames[f].image;\n                } else {\n                    finishImage();\n                }\n            },\n            callback: function() {\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n                if (resultFrames.length <= 0) {\n                    // at least one last frame should be available for next manipulation\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n                    resultFrames.push(_frames[_frames.length - 1]);\n                }\n                callback(resultFrames);\n            }\n        });\n    }\n\n    var isStopDrawing = false;\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        isStopDrawing = true;\n\n        var _this = this;\n        // analyse of all frames takes some time!\n        setTimeout(function() {\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\n                whammy.frames = frames;\n\n                // to display advertisement images!\n                if (config.advertisement && config.advertisement.length) {\n                    whammy.frames = config.advertisement.concat(whammy.frames);\n                }\n\n                /**\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\n                 * @memberof WhammyRecorder\n                 * @example\n                 * recorder.stop(function() {\n                 *     var blob = recorder.blob;\n                 * });\n                 */\n                whammy.compile(function(blob) {\n                    _this.blob = blob;\n\n                    if (_this.blob.forEach) {\n                        _this.blob = new Blob([], {\n                            type: 'video/webm'\n                        });\n                    }\n\n                    if (callback) {\n                        callback(_this.blob);\n                    }\n                });\n            });\n        }, 10);\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (isStopDrawing) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        this.pause();\n        whammy.frames = [];\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    var video;\n    var lastTime;\n    var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WhammyRecorder = WhammyRecorder;\n}\n\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Whammy = (function() {\n    // a more abstract-ish API\n\n    function WhammyVideo(duration) {\n        this.frames = [];\n        this.duration = duration || 1;\n        this.quality = 0.8;\n    }\n\n    /**\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.add(canvas || context || 'image/webp');\n     * @param {string} frame - Canvas || Context || image/webp\n     * @param {number} duration - Stick a duration (in milliseconds)\n     */\n    WhammyVideo.prototype.add = function(frame, duration) {\n        if ('canvas' in frame) { //CanvasRenderingContext2D\n            frame = frame.canvas;\n        }\n\n        if ('toDataURL' in frame) {\n            frame = frame.toDataURL('image/webp', this.quality);\n        }\n\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n        }\n        this.frames.push({\n            image: frame,\n            duration: duration || this.duration\n        });\n    };\n\n    function processInWebWorker(_function) {\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\n            'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n\n    function whammyInWebWorker(frames) {\n        function ArrayToWebM(frames) {\n            var info = checkFrames(frames);\n            if (!info) {\n                return [];\n            }\n\n            var clusterMaxDuration = 30000;\n\n            var EBML = [{\n                'id': 0x1a45dfa3, // EBML\n                'data': [{\n                    'data': 1,\n                    'id': 0x4286 // EBMLVersion\n                }, {\n                    'data': 1,\n                    'id': 0x42f7 // EBMLReadVersion\n                }, {\n                    'data': 4,\n                    'id': 0x42f2 // EBMLMaxIDLength\n                }, {\n                    'data': 8,\n                    'id': 0x42f3 // EBMLMaxSizeLength\n                }, {\n                    'data': 'webm',\n                    'id': 0x4282 // DocType\n                }, {\n                    'data': 2,\n                    'id': 0x4287 // DocTypeVersion\n                }, {\n                    'data': 2,\n                    'id': 0x4285 // DocTypeReadVersion\n                }]\n            }, {\n                'id': 0x18538067, // Segment\n                'data': [{\n                    'id': 0x1549a966, // Info\n                    'data': [{\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\n                        'id': 0x2ad7b1 // TimecodeScale\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x4d80 // MuxingApp\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x5741 // WritingApp\n                    }, {\n                        'data': doubleToString(info.duration),\n                        'id': 0x4489 // Duration\n                    }]\n                }, {\n                    'id': 0x1654ae6b, // Tracks\n                    'data': [{\n                        'id': 0xae, // TrackEntry\n                        'data': [{\n                            'data': 1,\n                            'id': 0xd7 // TrackNumber\n                        }, {\n                            'data': 1,\n                            'id': 0x73c5 // TrackUID\n                        }, {\n                            'data': 0,\n                            'id': 0x9c // FlagLacing\n                        }, {\n                            'data': 'und',\n                            'id': 0x22b59c // Language\n                        }, {\n                            'data': 'V_VP8',\n                            'id': 0x86 // CodecID\n                        }, {\n                            'data': 'VP8',\n                            'id': 0x258688 // CodecName\n                        }, {\n                            'data': 1,\n                            'id': 0x83 // TrackType\n                        }, {\n                            'id': 0xe0, // Video\n                            'data': [{\n                                'data': info.width,\n                                'id': 0xb0 // PixelWidth\n                            }, {\n                                'data': info.height,\n                                'id': 0xba // PixelHeight\n                            }]\n                        }]\n                    }]\n                }]\n            }];\n\n            //Generate clusters (max duration)\n            var frameNumber = 0;\n            var clusterTimecode = 0;\n            while (frameNumber < frames.length) {\n\n                var clusterFrames = [];\n                var clusterDuration = 0;\n                do {\n                    clusterFrames.push(frames[frameNumber]);\n                    clusterDuration += frames[frameNumber].duration;\n                    frameNumber++;\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n                var clusterCounter = 0;\n                var cluster = {\n                    'id': 0x1f43b675, // Cluster\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n                }; //Add cluster to segment\n                EBML[1].data.push(cluster);\n                clusterTimecode += clusterDuration;\n            }\n\n            return generateEBML(EBML);\n        }\n\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n            return [{\n                'data': clusterTimecode,\n                'id': 0xe7 // Timecode\n            }].concat(clusterFrames.map(function(webp) {\n                var block = makeSimpleBlock({\n                    discardable: 0,\n                    frame: webp.data.slice(4),\n                    invisible: 0,\n                    keyframe: 1,\n                    lacing: 0,\n                    trackNum: 1,\n                    timecode: Math.round(clusterCounter)\n                });\n                clusterCounter += webp.duration;\n                return {\n                    data: block,\n                    id: 0xa3\n                };\n            }));\n        }\n\n        // sums the lengths of all the frames and gets the duration\n\n        function checkFrames(frames) {\n            if (!frames[0]) {\n                postMessage({\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n                });\n                return;\n            }\n\n            var width = frames[0].width,\n                height = frames[0].height,\n                duration = frames[0].duration;\n\n            for (var i = 1; i < frames.length; i++) {\n                duration += frames[i].duration;\n            }\n            return {\n                duration: duration,\n                width: width,\n                height: height\n            };\n        }\n\n        function numToBuffer(num) {\n            var parts = [];\n            while (num > 0) {\n                parts.push(num & 0xff);\n                num = num >> 8;\n            }\n            return new Uint8Array(parts.reverse());\n        }\n\n        function strToBuffer(str) {\n            return new Uint8Array(str.split('').map(function(e) {\n                return e.charCodeAt(0);\n            }));\n        }\n\n        function bitsToBuffer(bits) {\n            var data = [];\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data.push(parseInt(bits.substr(i, 8), 2));\n            }\n            return new Uint8Array(data);\n        }\n\n        function generateEBML(json) {\n            var ebml = [];\n            for (var i = 0; i < json.length; i++) {\n                var data = json[i].data;\n\n                if (typeof data === 'object') {\n                    data = generateEBML(data);\n                }\n\n                if (typeof data === 'number') {\n                    data = bitsToBuffer(data.toString(2));\n                }\n\n                if (typeof data === 'string') {\n                    data = strToBuffer(data);\n                }\n\n                var len = data.size || data.byteLength || data.length;\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n                var sizeToString = len.toString(2);\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\n\n                ebml.push(numToBuffer(json[i].id));\n                ebml.push(bitsToBuffer(size));\n                ebml.push(data);\n            }\n\n            return new Blob(ebml, {\n                type: 'video/webm'\n            });\n        }\n\n        function toBinStrOld(bits) {\n            var data = '';\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n            }\n            return data;\n        }\n\n        function makeSimpleBlock(data) {\n            var flags = 0;\n\n            if (data.keyframe) {\n                flags |= 128;\n            }\n\n            if (data.invisible) {\n                flags |= 8;\n            }\n\n            if (data.lacing) {\n                flags |= (data.lacing << 1);\n            }\n\n            if (data.discardable) {\n                flags |= 1;\n            }\n\n            if (data.trackNum > 127) {\n                throw 'TrackNumber > 127 not supported';\n            }\n\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\n                return String.fromCharCode(e);\n            }).join('') + data.frame;\n\n            return out;\n        }\n\n        function parseWebP(riff) {\n            var VP8 = riff.RIFF[0].WEBP[0];\n\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n            for (var i = 0, c = []; i < 4; i++) {\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\n            }\n\n            var width, height, tmp;\n\n            //the code below is literally copied verbatim from the bitstream spec\n            tmp = (c[1] << 8) | c[0];\n            width = tmp & 0x3FFF;\n            tmp = (c[3] << 8) | c[2];\n            height = tmp & 0x3FFF;\n            return {\n                width: width,\n                height: height,\n                data: VP8,\n                riff: riff\n            };\n        }\n\n        function getStrLength(string, offset) {\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\n                var unpadded = i.charCodeAt(0).toString(2);\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\n            }).join(''), 2);\n        }\n\n        function parseRIFF(string) {\n            var offset = 0;\n            var chunks = {};\n\n            while (offset < string.length) {\n                var id = string.substr(offset, 4);\n                var len = getStrLength(string, offset);\n                var data = string.substr(offset + 4 + 4, len);\n                offset += 4 + 4 + len;\n                chunks[id] = chunks[id] || [];\n\n                if (id === 'RIFF' || id === 'LIST') {\n                    chunks[id].push(parseRIFF(data));\n                } else {\n                    chunks[id].push(data);\n                }\n            }\n            return chunks;\n        }\n\n        function doubleToString(num) {\n            return [].slice.call(\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\n                return String.fromCharCode(e);\n            }).reverse().join('');\n        }\n\n        var webm = new ArrayToWebM(frames.map(function(frame) {\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n            webp.duration = frame.duration;\n            return webp;\n        }));\n\n        postMessage(webm);\n    }\n\n    /**\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.compile(function(blob) {\n     *    // blob.size - blob.type\n     * });\n     */\n    WhammyVideo.prototype.compile = function(callback) {\n        var webWorker = processInWebWorker(whammyInWebWorker);\n\n        webWorker.onmessage = function(event) {\n            if (event.data.error) {\n                console.error(event.data.error);\n                return;\n            }\n            callback(event.data);\n        };\n\n        webWorker.postMessage(this.frames);\n    };\n\n    return {\n        /**\n         * A more abstract-ish API.\n         * @method\n         * @memberof Whammy\n         * @example\n         * recorder = new Whammy().Video(0.8, 100);\n         * @param {?number} speed - 0.8\n         * @param {?number} quality - 100\n         */\n        Video: WhammyVideo\n    };\n})();\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Whammy = Whammy;\n}\n\n// ______________ (indexed-db)\n// DiskStorage.js\n\n/**\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\n * @summary Writing blobs into IndexedDB.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * DiskStorage.Store({\n *     audioBlob: yourAudioBlob,\n *     videoBlob: yourVideoBlob,\n *     gifBlob  : yourGifBlob\n * });\n * DiskStorage.Fetch(function(dataURL, type) {\n *     if(type === 'audioBlob') { }\n *     if(type === 'videoBlob') { }\n *     if(type === 'gifBlob')   { }\n * });\n * // DiskStorage.dataStoreName = 'recordRTC';\n * // DiskStorage.onError = function(error) { };\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\n * @property {function} Store - This method stores blobs in IndexedDB.\n * @property {function} onError - This function is invoked for any known/unknown error.\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar DiskStorage = {\n    /**\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.init();\n     */\n    init: function() {\n        var self = this;\n\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n            console.error('IndexedDB API are not available in this browser.');\n            return;\n        }\n\n        var dbVersion = 1;\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n            db;\n        var request = indexedDB.open(dbName, dbVersion);\n\n        function createObjectStore(dataBase) {\n            dataBase.createObjectStore(self.dataStoreName);\n        }\n\n        function putInDB() {\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n            if (self.videoBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n            }\n\n            if (self.gifBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n            }\n\n            if (self.audioBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n            }\n\n            function getFromStore(portionName) {\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\n                    if (self.callback) {\n                        self.callback(event.target.result, portionName);\n                    }\n                };\n            }\n\n            getFromStore('audioBlob');\n            getFromStore('videoBlob');\n            getFromStore('gifBlob');\n        }\n\n        request.onerror = self.onError;\n\n        request.onsuccess = function() {\n            db = request.result;\n            db.onerror = self.onError;\n\n            if (db.setVersion) {\n                if (db.version !== dbVersion) {\n                    var setVersion = db.setVersion(dbVersion);\n                    setVersion.onsuccess = function() {\n                        createObjectStore(db);\n                        putInDB();\n                    };\n                } else {\n                    putInDB();\n                }\n            } else {\n                putInDB();\n            }\n        };\n        request.onupgradeneeded = function(event) {\n            createObjectStore(event.target.result);\n        };\n    },\n    /**\n     * This method fetches stored blobs from IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Fetch(function(dataURL, type) {\n     *     if(type === 'audioBlob') { }\n     *     if(type === 'videoBlob') { }\n     *     if(type === 'gifBlob')   { }\n     * });\n     */\n    Fetch: function(callback) {\n        this.callback = callback;\n        this.init();\n\n        return this;\n    },\n    /**\n     * This method stores blobs in IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Store({\n     *     audioBlob: yourAudioBlob,\n     *     videoBlob: yourVideoBlob,\n     *     gifBlob  : yourGifBlob\n     * });\n     */\n    Store: function(config) {\n        this.audioBlob = config.audioBlob;\n        this.videoBlob = config.videoBlob;\n        this.gifBlob = config.gifBlob;\n\n        this.init();\n\n        return this;\n    },\n    /**\n     * This function is invoked for any known/unknown error.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.onError = function(error){\n     *     alerot( JSON.stringify(error) );\n     * };\n     */\n    onError: function(error) {\n        console.error(JSON.stringify(error, null, '\\t'));\n    },\n\n    /**\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.dataStoreName = 'recordRTC';\n     */\n    dataStoreName: 'recordRTC',\n    dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.DiskStorage = DiskStorage;\n}\n\n// ______________\n// GifRecorder.js\n\n/**\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GifRecorder\n * @class\n * @example\n * var recorder = new GifRecorder(mediaStream || canvas || context, { width: 1280, height: 720, frameRate: 200, quality: 10 });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     img.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\n */\n\nfunction GifRecorder(mediaStream, config) {\n    if (typeof GIFEncoder === 'undefined') {\n        throw 'Please link: https://cdn.webrtc-experiment.com/gif-recorder.js';\n    }\n\n    config = config || {};\n\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (!isHTMLObject) {\n            if (!config.width) {\n                config.width = video.offsetWidth || 320;\n            }\n\n            if (!this.height) {\n                config.height = video.offsetHeight || 240;\n            }\n\n            if (!config.video) {\n                config.video = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            if (!config.canvas) {\n                config.canvas = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            canvas.width = config.canvas.width || 320;\n            canvas.height = config.canvas.height || 240;\n\n            video.width = config.video.width || 320;\n            video.height = config.video.height || 240;\n        }\n\n        // external library to record as GIF images\n        gifEncoder = new GIFEncoder();\n\n        // void setRepeat(int iter) \n        // Sets the number of times the set of GIF frames should be played. \n        // Default is 1; 0 means play indefinitely.\n        gifEncoder.setRepeat(0);\n\n        // void setFrameRate(Number fps) \n        // Sets frame rate in frames per second. \n        // Equivalent to setDelay(1000/fps).\n        // Using \"setDelay\" instead of \"setFrameRate\"\n        gifEncoder.setDelay(config.frameRate || 200);\n\n        // void setQuality(int quality) \n        // Sets quality of color quantization (conversion of images to the \n        // maximum 256 colors allowed by the GIF specification). \n        // Lower values (minimum = 1) produce better colors, \n        // but slow processing significantly. 10 is the default, \n        // and produces good color mapping at reasonable speeds. \n        // Values greater than 20 do not yield significant improvements in speed.\n        gifEncoder.setQuality(config.quality || 10);\n\n        // Boolean start() \n        // This writes the GIF Header and returns false if it fails.\n        gifEncoder.start();\n\n        startTime = Date.now();\n\n        var self = this;\n\n        function drawVideoFrame(time) {\n            if (isPausedRecording) {\n                return setTimeout(function() {\n                    drawVideoFrame(time);\n                }, 100);\n            }\n\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n            if (typeof lastFrameTime === undefined) {\n                lastFrameTime = time;\n            }\n\n            // ~10 fps\n            if (time - lastFrameTime < 90) {\n                return;\n            }\n\n            if (!isHTMLObject && video.paused) {\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n                // Tweak for Android Chrome\n                video.play();\n            }\n\n            if (!isHTMLObject) {\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            }\n\n            if (config.onGifPreview) {\n                config.onGifPreview(canvas.toDataURL('image/png'));\n            }\n\n            gifEncoder.addFrame(context);\n            lastFrameTime = time;\n        }\n\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     img.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function() {\n        if (lastAnimationFrame) {\n            cancelAnimationFrame(lastAnimationFrame);\n        }\n\n        endTime = Date.now();\n\n        /**\n         * @property {Blob} blob - The recorded blob object.\n         * @memberof GifRecorder\n         * @example\n         * recorder.stop(function(){\n         *     var blob = recorder.blob;\n         * });\n         */\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n            type: 'image/gif'\n        });\n\n        // bug: find a way to clear old recorded blobs\n        gifEncoder.stream().bin = [];\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (!gifEncoder) {\n            return;\n        }\n\n        this.pause();\n\n        gifEncoder.stream().bin = [];\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    if (isHTMLObject) {\n        if (mediaStream instanceof CanvasRenderingContext2D) {\n            context = mediaStream;\n            canvas = context.canvas;\n        } else if (mediaStream instanceof HTMLCanvasElement) {\n            context = mediaStream.getContext('2d');\n            canvas = mediaStream;\n        }\n    }\n\n    if (!isHTMLObject) {\n        var video = document.createElement('video');\n        video.muted = true;\n        video.autoplay = true;\n\n        if (typeof video.srcObject !== 'undefined') {\n            video.srcObject = mediaStream;\n        } else {\n            video.src = URL.createObjectURL(mediaStream);\n        }\n\n        video.play();\n    }\n\n    var lastAnimationFrame = null;\n    var startTime, endTime, lastFrameTime;\n\n    var gifEncoder;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.GifRecorder = GifRecorder;\n}\n\n// ______________________\n// MultiStreamRecorder.js\n\n/*\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n */\n\n/**\n * MultiStreamRecorder can record multiple videos in single container.\n * @summary Multi-videos recorder.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MultiStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm'\n * }\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\n * @param {object} config - {disableLogs:true, frameInterval: 10, mimeType: \"video/webm\"}\n */\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n    var self = this;\n\n    options = options || {\n        mimeType: 'video/webm',\n        video: {\n            width: 320,\n            height: 240\n        }\n    };\n\n    if (!options.frameInterval) {\n        options.frameInterval = 10;\n    }\n\n    if (!options.video) {\n        options.video = {};\n    }\n\n    if (!options.video.width) {\n        options.video.width = 320;\n    }\n\n    if (!options.video.height) {\n        options.video.height = 240;\n    }\n\n    /**\n     * This method records all MediaStreams.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        isStoppedRecording = false;\n        var mixedVideoStream = getMixedVideoStream();\n\n        var mixedAudioStream = getMixedAudioStream();\n        if (mixedAudioStream) {\n            mixedAudioStream.getAudioTracks().forEach(function(track) {\n                mixedVideoStream.addTrack(track);\n            });\n        }\n\n        if (options.previewStream && typeof options.previewStream === 'function') {\n            options.previewStream(mixedVideoStream);\n        }\n\n        mediaRecorder = new MediaStreamRecorder(mixedVideoStream, {\n            mimeType: 'video/webm'\n        });\n\n        canvas.width = videos.length > 1 ? videos[0].width * 2 : videos[0].width;\n        canvas.height = videos.length > 2 ? videos[0].height * 2 : videos[0].height;\n\n        drawVideosToCanvas();\n\n        mediaRecorder.record();\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        isStoppedRecording = true;\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        mediaRecorder.stop(function(blob) {\n            callback(blob);\n        });\n    };\n\n    function getMixedAudioStream() {\n        // via: @pehrsons\n        var audioContext = new AudioContext();\n        var audioSources = [];\n\n        var audioTracksLength = 0;\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (!stream.getAudioTracks().length) {\n                return;\n            }\n\n            audioTracksLength++;\n\n            audioSources.push(audioContext.createMediaStreamSource(stream));\n        });\n\n        if (!audioTracksLength) {\n            return;\n        }\n\n        var audioiDestination = audioContext.createMediaStreamDestination();\n        audioSources.forEach(function(audioSource) {\n            audioSource.connect(audioiDestination);\n        });\n        return audioiDestination.stream;\n    }\n\n    var videos = [];\n    var mediaRecorder;\n\n    function getMixedVideoStream() {\n        // via: @adrian-ber\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (!stream.getVideoTracks().length) {\n                return;\n            }\n\n            var video = getVideo(stream);\n            video.width = options.video.width;\n            video.height = options.video.height;\n            videos.push(video);\n        });\n\n        var capturedStream;\n\n        if ('captureStream' in canvas) {\n            capturedStream = canvas.captureStream();\n        } else if ('mozCaptureStream' in canvas) {\n            capturedStream = canvas.mozCaptureStream();\n        } else if (!options.disableLogs) {\n            console.error('captureStream API requires this flag: chrome://flags/#enable-experimental-web-platform-features');\n        }\n\n        return capturedStream;\n    }\n\n    function getVideo(stream) {\n        var video = document.createElement('video');\n        video.src = URL.createObjectURL(stream);\n        video.play();\n        return video;\n    }\n\n    var isStoppedRecording = false;\n\n    function drawVideosToCanvas() {\n        if (isStoppedRecording) {\n            return;\n        }\n\n        var videosLength = videos.length;\n        videos.forEach(function(video, idx) {\n            if (videosLength === 1) {\n                context.drawImage(video, 0, 0, video.width, video.height);\n                return;\n            }\n\n            if (videosLength === 2) {\n                var x = 0;\n                var y = 0;\n\n                if (idx === 1) {\n                    x = video.width;\n                }\n\n                context.drawImage(video, x, y, video.width, video.height);\n                return;\n            }\n\n            if (videosLength === 3) {\n                var x = 0;\n                var y = 0;\n\n                if (idx === 1) {\n                    x = video.width;\n                }\n\n                if (idx === 2) {\n                    y = video.height;\n                }\n\n                context.drawImage(video, x, y, video.width, video.height);\n                return;\n            }\n\n            if (videosLength === 4) {\n                var x = 0;\n                var y = 0;\n\n                if (idx === 1) {\n                    x = video.width;\n                }\n\n                if (idx === 2) {\n                    y = video.height;\n                }\n\n                if (idx === 3) {\n                    x = video.width;\n                    y = video.height;\n                }\n\n                context.drawImage(video, x, y, video.width, video.height);\n                return;\n            }\n        });\n\n        setTimeout(drawVideosToCanvas, options.frameInterval);\n    }\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000;';\n\n    document.body.appendChild(canvas);\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (mediaRecorder) {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (mediaRecorder) {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        videos = [];\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        isStoppedRecording = false;\n        mediaRecorder = null;\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n        }\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathColorName = getPathColorName;\nexports.getColorName = getColorName;\nexports.getRandomPop = getRandomPop;\nexports.getIndexedPopColor = getIndexedPopColor;\nvar config = require('./../../config');\n\nvar transparent = exports.transparent = new Color(0, 0);\n\nfunction getPathColorName(path) {\n  var hexColor = path.parent.data.originalColor;\n  // let hexColor = path.strokeColor.toCSS(true); // This fails when it's a gradient\n  return getColorName(hexColor);\n}\n\nfunction getColorName(color) {\n  if (color) {\n    color = color.toUpperCase(); // make sure\n    if (color in config.palette.colorNames) {\n      return config.palette.colorNames[color];\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\nfunction getRandomPop() {\n  var pops = config.palette.pops;\n  return pops[Math.floor(Math.random() * pops.length)];\n}\n\nfunction getIndexedPopColor(index) {\n  var pops = config.palette.pops;\n  return pops[index % pops.length];\n}\n\n},{\"./../../config\":1}],6:[function(require,module,exports){\n\"use strict\";\n\n(function (root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.ShapeDetector = factory();\n  }\n})(undefined, function () {\n\n  var _nbSamplePoints;\n  var _squareSize = 250;\n  var _phi = 0.5 * (-1.0 + Math.sqrt(5.0));\n  var _angleRange = deg2Rad(45.0);\n  var _anglePrecision = deg2Rad(2.0);\n  var _halfDiagonal = Math.sqrt(_squareSize * _squareSize + _squareSize * _squareSize) * 0.5;\n  var _origin = {\n    x: 0,\n    y: 0\n  };\n\n  function deg2Rad(d) {\n\n    return d * Math.PI / 180.0;\n  };\n\n  function getDistance(a, b) {\n\n    var dx = b.x - a.x;\n    var dy = b.y - a.y;\n\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  function Stroke(points, name) {\n\n    this.points = points;\n    this.name = name;\n    this.processStroke();\n  };\n\n  Stroke.prototype.processStroke = function () {\n\n    this.points = this.resample();\n    this.setCentroid();\n    this.points = this.rotateBy(-this.indicativeAngle());\n    this.points = this.scaleToSquare();\n    this.setCentroid();\n    this.points = this.translateToOrigin();\n\n    return this;\n  };\n\n  Stroke.prototype.resample = function () {\n\n    var localDistance, q;\n    var interval = this.strokeLength() / (_nbSamplePoints - 1);\n    var distance = 0.0;\n    var newPoints = [this.points[0]];\n\n    for (var i = 1; i < this.points.length; i++) {\n      localDistance = getDistance(this.points[i - 1], this.points[i]);\n\n      if (distance + localDistance >= interval) {\n        q = {\n          x: this.points[i - 1].x + (interval - distance) / localDistance * (this.points[i].x - this.points[i - 1].x),\n          y: this.points[i - 1].y + (interval - distance) / localDistance * (this.points[i].y - this.points[i - 1].y)\n        };\n\n        newPoints.push(q);\n        this.points.splice(i, 0, q);\n        distance = 0.0;\n      } else {\n        distance += localDistance;\n      }\n    }\n\n    if (newPoints.length === _nbSamplePoints - 1) {\n      newPoints.push(this.points[this.points.length - 1]);\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.rotateBy = function (angle) {\n\n    var point;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var newPoints = [];\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: (point.x - this.c.x) * cos - (point.y - this.c.y) * sin + this.c.x,\n        y: (point.x - this.c.x) * sin + (point.y - this.c.y) * cos + this.c.y\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.scaleToSquare = function () {\n\n    var point;\n    var newPoints = [];\n    var box = {\n      minX: +Infinity,\n      maxX: -Infinity,\n      minY: +Infinity,\n      maxY: -Infinity\n    };\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      box.minX = Math.min(box.minX, point.x);\n      box.minY = Math.min(box.minY, point.y);\n      box.maxX = Math.max(box.maxX, point.x);\n      box.maxY = Math.max(box.maxY, point.y);\n    }\n\n    box.width = box.maxX - box.minX;\n    box.height = box.maxY - box.minY;\n\n    for (i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: point.x * (_squareSize / box.width),\n        y: point.y * (_squareSize / box.height)\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.translateToOrigin = function (points) {\n\n    var point;\n    var newPoints = [];\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      newPoints.push({\n        x: point.x + _origin.x - this.c.x,\n        y: point.y + _origin.y - this.c.y\n      });\n    }\n\n    return newPoints;\n  };\n\n  Stroke.prototype.setCentroid = function () {\n\n    var point;\n    this.c = {\n      x: 0.0,\n      y: 0.0\n    };\n\n    for (var i = 0; i < this.points.length; i++) {\n      point = this.points[i];\n\n      this.c.x += point.x;\n      this.c.y += point.y;\n    }\n\n    this.c.x /= this.points.length;\n    this.c.y /= this.points.length;\n\n    return this;\n  };\n\n  Stroke.prototype.indicativeAngle = function () {\n\n    return Math.atan2(this.c.y - this.points[0].y, this.c.x - this.points[0].x);\n  };\n\n  Stroke.prototype.strokeLength = function () {\n\n    var d = 0.0;\n\n    for (var i = 1; i < this.points.length; i++) {\n      d += getDistance(this.points[i - 1], this.points[i]);\n    }\n\n    return d;\n  };\n\n  Stroke.prototype.distanceAtBestAngle = function (pattern) {\n\n    var a = -_angleRange;\n    var b = _angleRange;\n    var x1 = _phi * a + (1.0 - _phi) * b;\n    var f1 = this.distanceAtAngle(pattern, x1);\n    var x2 = (1.0 - _phi) * a + _phi * b;\n    var f2 = this.distanceAtAngle(pattern, x2);\n\n    while (Math.abs(b - a) > _anglePrecision) {\n\n      if (f1 < f2) {\n        b = x2;\n        x2 = x1;\n        f2 = f1;\n        x1 = _phi * a + (1.0 - _phi) * b;\n        f1 = this.distanceAtAngle(pattern, x1);\n      } else {\n        a = x1;\n        x1 = x2;\n        f1 = f2;\n        x2 = (1.0 - _phi) * a + _phi * b;\n        f2 = this.distanceAtAngle(pattern, x2);\n      }\n    }\n\n    return Math.min(f1, f2);\n  };\n\n  Stroke.prototype.distanceAtAngle = function (pattern, angle) {\n\n    var strokePoints = this.rotateBy(angle);\n    var patternPoints = pattern.points;\n    var d = 0.0;\n\n    for (var i = 0; i < strokePoints.length; i++) {\n      d += getDistance(strokePoints[i], patternPoints[i]);\n    }\n\n    return d / strokePoints.length;\n  };\n\n  function ShapeDetector(patterns, options) {\n\n    options = options || {};\n    this.threshold = options.threshold || 0;\n    _nbSamplePoints = options.nbSamplePoints || 64;\n\n    this.patterns = [];\n\n    for (var i = 0; i < patterns.length; i++) {\n      this.learn(patterns[i].name, patterns[i].points);\n    }\n  }\n\n  ShapeDetector.defaultShapes = [{\n    points: [{ x: 0, y: 50 }, { x: 100, y: 50 }],\n    name: \"line\"\n  }, {\n    points: [{ x: 50, y: 0 }, { x: 50, y: 100 }],\n    name: \"line\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 100, y: 100 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 89, \"y\": 164 }, { \"x\": 90, \"y\": 162 }, { \"x\": 92, \"y\": 162 }, { \"x\": 94, \"y\": 164 }, { \"x\": 95, \"y\": 166 }, { \"x\": 96, \"y\": 169 }, { \"x\": 97, \"y\": 171 }, { \"x\": 99, \"y\": 175 }, { \"x\": 101, \"y\": 178 }, { \"x\": 103, \"y\": 182 }, { \"x\": 106, \"y\": 189 }, { \"x\": 108, \"y\": 194 }, { \"x\": 111, \"y\": 199 }, { \"x\": 114, \"y\": 204 }, { \"x\": 117, \"y\": 209 }, { \"x\": 119, \"y\": 214 }, { \"x\": 122, \"y\": 218 }, { \"x\": 124, \"y\": 222 }, { \"x\": 126, \"y\": 225 }, { \"x\": 128, \"y\": 228 }, { \"x\": 130, \"y\": 229 }, { \"x\": 133, \"y\": 233 }, { \"x\": 134, \"y\": 236 }, { \"x\": 136, \"y\": 239 }, { \"x\": 138, \"y\": 240 }, { \"x\": 139, \"y\": 242 }, { \"x\": 140, \"y\": 244 }, { \"x\": 142, \"y\": 242 }, { \"x\": 142, \"y\": 240 }, { \"x\": 142, \"y\": 237 }, { \"x\": 143, \"y\": 235 }, { \"x\": 143, \"y\": 233 }, { \"x\": 145, \"y\": 229 }, { \"x\": 146, \"y\": 226 }, { \"x\": 148, \"y\": 217 }, { \"x\": 149, \"y\": 208 }, { \"x\": 149, \"y\": 205 }, { \"x\": 151, \"y\": 196 }, { \"x\": 151, \"y\": 193 }, { \"x\": 153, \"y\": 182 }, { \"x\": 155, \"y\": 172 }, { \"x\": 157, \"y\": 165 }, { \"x\": 159, \"y\": 160 }, { \"x\": 162, \"y\": 155 }, { \"x\": 164, \"y\": 150 }, { \"x\": 165, \"y\": 148 }, { \"x\": 166, \"y\": 146 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 91, \"y\": 185 }, { \"x\": 93, \"y\": 185 }, { \"x\": 95, \"y\": 185 }, { \"x\": 97, \"y\": 185 }, { \"x\": 100, \"y\": 188 }, { \"x\": 102, \"y\": 189 }, { \"x\": 104, \"y\": 190 }, { \"x\": 106, \"y\": 193 }, { \"x\": 108, \"y\": 195 }, { \"x\": 110, \"y\": 198 }, { \"x\": 112, \"y\": 201 }, { \"x\": 114, \"y\": 204 }, { \"x\": 115, \"y\": 207 }, { \"x\": 117, \"y\": 210 }, { \"x\": 118, \"y\": 212 }, { \"x\": 120, \"y\": 214 }, { \"x\": 121, \"y\": 217 }, { \"x\": 122, \"y\": 219 }, { \"x\": 123, \"y\": 222 }, { \"x\": 124, \"y\": 224 }, { \"x\": 126, \"y\": 226 }, { \"x\": 127, \"y\": 229 }, { \"x\": 129, \"y\": 231 }, { \"x\": 130, \"y\": 233 }, { \"x\": 129, \"y\": 231 }, { \"x\": 129, \"y\": 228 }, { \"x\": 129, \"y\": 226 }, { \"x\": 129, \"y\": 224 }, { \"x\": 129, \"y\": 221 }, { \"x\": 129, \"y\": 218 }, { \"x\": 129, \"y\": 212 }, { \"x\": 129, \"y\": 208 }, { \"x\": 130, \"y\": 198 }, { \"x\": 132, \"y\": 189 }, { \"x\": 134, \"y\": 182 }, { \"x\": 137, \"y\": 173 }, { \"x\": 143, \"y\": 164 }, { \"x\": 147, \"y\": 157 }, { \"x\": 151, \"y\": 151 }, { \"x\": 155, \"y\": 144 }, { \"x\": 161, \"y\": 137 }, { \"x\": 165, \"y\": 131 }, { \"x\": 171, \"y\": 122 }, { \"x\": 174, \"y\": 118 }, { \"x\": 176, \"y\": 114 }, { \"x\": 177, \"y\": 112 }, { \"x\": 177, \"y\": 114 }, { \"x\": 175, \"y\": 116 }, { \"x\": 173, \"y\": 118 }],\n    name: \"line\"\n  }, {\n    points: [{ \"x\": 113, \"y\": 68 }, { \"x\": 86, \"y\": 79 }, { \"x\": 63, \"y\": 131 }, { \"x\": 78, \"y\": 147 }, { \"x\": 156, \"y\": 149 }, { \"x\": 195, \"y\": 100 }, { \"x\": 189, \"y\": 79 }, { \"x\": 125.73497, \"y\": 62.81168 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 98, \"y\": 67 }, { \"x\": 77, \"y\": 85 }, { \"x\": 77, \"y\": 162 }, { \"x\": 179, \"y\": 156 }, { \"x\": 197, \"y\": 123 }, { \"x\": 167, \"y\": 63 }, { \"x\": 141, \"y\": 61 }, { \"x\": 110, \"y\": 59 }, { \"x\": 106.51192, \"y\": 59.70407 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 60, \"y\": 47 }, { \"x\": 43, \"y\": 96 }, { \"x\": 52, \"y\": 206 }, { \"x\": 63, \"y\": 246 }, { \"x\": 118, \"y\": 296 }, { \"x\": 144, \"y\": 246 }, { \"x\": 141, \"y\": 147 }, { \"x\": 133, \"y\": 129 }, { \"x\": 113, \"y\": 80 }, { \"x\": 60.42738, \"y\": 45.76813 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 127, \"y\": 141 }, { \"x\": 124, \"y\": 140 }, { \"x\": 120, \"y\": 139 }, { \"x\": 118, \"y\": 139 }, { \"x\": 116, \"y\": 139 }, { \"x\": 111, \"y\": 140 }, { \"x\": 109, \"y\": 141 }, { \"x\": 104, \"y\": 144 }, { \"x\": 100, \"y\": 147 }, { \"x\": 96, \"y\": 152 }, { \"x\": 93, \"y\": 157 }, { \"x\": 90, \"y\": 163 }, { \"x\": 87, \"y\": 169 }, { \"x\": 85, \"y\": 175 }, { \"x\": 83, \"y\": 181 }, { \"x\": 82, \"y\": 190 }, { \"x\": 82, \"y\": 195 }, { \"x\": 83, \"y\": 200 }, { \"x\": 84, \"y\": 205 }, { \"x\": 88, \"y\": 213 }, { \"x\": 91, \"y\": 216 }, { \"x\": 96, \"y\": 219 }, { \"x\": 103, \"y\": 222 }, { \"x\": 108, \"y\": 224 }, { \"x\": 111, \"y\": 224 }, { \"x\": 120, \"y\": 224 }, { \"x\": 133, \"y\": 223 }, { \"x\": 142, \"y\": 222 }, { \"x\": 152, \"y\": 218 }, { \"x\": 160, \"y\": 214 }, { \"x\": 167, \"y\": 210 }, { \"x\": 173, \"y\": 204 }, { \"x\": 178, \"y\": 198 }, { \"x\": 179, \"y\": 196 }, { \"x\": 182, \"y\": 188 }, { \"x\": 182, \"y\": 177 }, { \"x\": 178, \"y\": 167 }, { \"x\": 170, \"y\": 150 }, { \"x\": 163, \"y\": 138 }, { \"x\": 152, \"y\": 130 }, { \"x\": 143, \"y\": 129 }, { \"x\": 140, \"y\": 131 }, { \"x\": 129, \"y\": 136 }, { \"x\": 126, \"y\": 139 }],\n    name: \"circle\"\n  }, {\n    points: [{ \"x\": 516, \"y\": 284 }, { \"x\": 496, \"y\": 319 }, { \"x\": 496, \"y\": 329 }, { \"x\": 513, \"y\": 329 }, { \"x\": 550, \"y\": 324 }, { \"x\": 696, \"y\": 305 }, { \"x\": 737, \"y\": 298 }, { \"x\": 746, \"y\": 292 }, { \"x\": 734, \"y\": 278 }, { \"x\": 709, \"y\": 252 }, { \"x\": 664, \"y\": 193 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 179, \"y\": 159 }, { \"x\": 152, \"y\": 290 }, { \"x\": 143, \"y\": 336 }, { \"x\": 142, \"y\": 355 }, { \"x\": 160, \"y\": 348 }, { \"x\": 208, \"y\": 337 }, { \"x\": 241, \"y\": 330 }, { \"x\": 256, \"y\": 328 }, { \"x\": 254, \"y\": 315 }, { \"x\": 238, \"y\": 277 }, { \"x\": 210, \"y\": 200 }, { \"x\": 182.94356, \"y\": 110.45656 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 105, \"y\": 335 }, { \"x\": 115, \"y\": 362 }, { \"x\": 128, \"y\": 338 }, { \"x\": 163, \"y\": 271 }, { \"x\": 241, \"y\": 135 }, { \"x\": 261, \"y\": 104 }, { \"x\": 267, \"y\": 98 }, { \"x\": 261, \"y\": 102 }, { \"x\": 236, \"y\": 119 }, { \"x\": 151, \"y\": 195 }, { \"x\": 108, \"y\": 235 }, { \"x\": 83, \"y\": 267 }, { \"x\": 79.92616, \"y\": 270.93451 }],\n    name: \"triangle\"\n  }, {\n    points: [{ \"x\": 137, \"y\": 139 }, { \"x\": 135, \"y\": 141 }, { \"x\": 133, \"y\": 144 }, { \"x\": 132, \"y\": 146 }, { \"x\": 130, \"y\": 149 }, { \"x\": 128, \"y\": 151 }, { \"x\": 126, \"y\": 155 }, { \"x\": 123, \"y\": 160 }, { \"x\": 120, \"y\": 166 }, { \"x\": 116, \"y\": 171 }, { \"x\": 112, \"y\": 177 }, { \"x\": 107, \"y\": 183 }, { \"x\": 102, \"y\": 188 }, { \"x\": 100, \"y\": 191 }, { \"x\": 95, \"y\": 195 }, { \"x\": 90, \"y\": 199 }, { \"x\": 86, \"y\": 203 }, { \"x\": 82, \"y\": 206 }, { \"x\": 80, \"y\": 209 }, { \"x\": 75, \"y\": 213 }, { \"x\": 73, \"y\": 213 }, { \"x\": 70, \"y\": 216 }, { \"x\": 67, \"y\": 219 }, { \"x\": 64, \"y\": 221 }, { \"x\": 61, \"y\": 223 }, { \"x\": 60, \"y\": 225 }, { \"x\": 62, \"y\": 226 }, { \"x\": 65, \"y\": 225 }, { \"x\": 67, \"y\": 226 }, { \"x\": 74, \"y\": 226 }, { \"x\": 77, \"y\": 227 }, { \"x\": 85, \"y\": 229 }, { \"x\": 91, \"y\": 230 }, { \"x\": 99, \"y\": 231 }, { \"x\": 108, \"y\": 232 }, { \"x\": 116, \"y\": 233 }, { \"x\": 125, \"y\": 233 }, { \"x\": 134, \"y\": 234 }, { \"x\": 145, \"y\": 233 }, { \"x\": 153, \"y\": 232 }, { \"x\": 160, \"y\": 233 }, { \"x\": 170, \"y\": 234 }, { \"x\": 177, \"y\": 235 }, { \"x\": 179, \"y\": 236 }, { \"x\": 186, \"y\": 237 }, { \"x\": 193, \"y\": 238 }, { \"x\": 198, \"y\": 239 }, { \"x\": 200, \"y\": 237 }, { \"x\": 202, \"y\": 239 }, { \"x\": 204, \"y\": 238 }, { \"x\": 206, \"y\": 234 }, { \"x\": 205, \"y\": 230 }, { \"x\": 202, \"y\": 222 }, { \"x\": 197, \"y\": 216 }, { \"x\": 192, \"y\": 207 }, { \"x\": 186, \"y\": 198 }, { \"x\": 179, \"y\": 189 }, { \"x\": 174, \"y\": 183 }, { \"x\": 170, \"y\": 178 }, { \"x\": 164, \"y\": 171 }, { \"x\": 161, \"y\": 168 }, { \"x\": 154, \"y\": 160 }, { \"x\": 148, \"y\": 155 }, { \"x\": 143, \"y\": 150 }, { \"x\": 138, \"y\": 148 }, { \"x\": 136, \"y\": 148 }],\n    name: \"triangle\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 0, y: 50 }, { x: 50, y: 50 }, { x: 50, y: 0 }],\n    name: \"square\"\n  }, {\n    points: [{ x: 0, y: 0 }, { x: 0, y: 100 }, { x: 50, y: 100 }, { x: 50, y: 0 }],\n    name: \"square\"\n  }, {\n    points: [{ \"x\": 78, \"y\": 149 }, { \"x\": 78, \"y\": 153 }, { \"x\": 78, \"y\": 157 }, { \"x\": 78, \"y\": 160 }, { \"x\": 79, \"y\": 162 }, { \"x\": 79, \"y\": 164 }, { \"x\": 79, \"y\": 167 }, { \"x\": 79, \"y\": 169 }, { \"x\": 79, \"y\": 173 }, { \"x\": 79, \"y\": 178 }, { \"x\": 79, \"y\": 183 }, { \"x\": 80, \"y\": 189 }, { \"x\": 80, \"y\": 193 }, { \"x\": 80, \"y\": 198 }, { \"x\": 80, \"y\": 202 }, { \"x\": 81, \"y\": 208 }, { \"x\": 81, \"y\": 210 }, { \"x\": 81, \"y\": 216 }, { \"x\": 82, \"y\": 222 }, { \"x\": 82, \"y\": 224 }, { \"x\": 82, \"y\": 227 }, { \"x\": 83, \"y\": 229 }, { \"x\": 83, \"y\": 231 }, { \"x\": 85, \"y\": 230 }, { \"x\": 88, \"y\": 232 }, { \"x\": 90, \"y\": 233 }, { \"x\": 92, \"y\": 232 }, { \"x\": 94, \"y\": 233 }, { \"x\": 99, \"y\": 232 }, { \"x\": 102, \"y\": 233 }, { \"x\": 106, \"y\": 233 }, { \"x\": 109, \"y\": 234 }, { \"x\": 117, \"y\": 235 }, { \"x\": 123, \"y\": 236 }, { \"x\": 126, \"y\": 236 }, { \"x\": 135, \"y\": 237 }, { \"x\": 142, \"y\": 238 }, { \"x\": 145, \"y\": 238 }, { \"x\": 152, \"y\": 238 }, { \"x\": 154, \"y\": 239 }, { \"x\": 165, \"y\": 238 }, { \"x\": 174, \"y\": 237 }, { \"x\": 179, \"y\": 236 }, { \"x\": 186, \"y\": 235 }, { \"x\": 191, \"y\": 235 }, { \"x\": 195, \"y\": 233 }, { \"x\": 197, \"y\": 233 }, { \"x\": 200, \"y\": 233 }, { \"x\": 201, \"y\": 235 }, { \"x\": 201, \"y\": 233 }, { \"x\": 199, \"y\": 231 }, { \"x\": 198, \"y\": 226 }, { \"x\": 198, \"y\": 220 }, { \"x\": 196, \"y\": 207 }, { \"x\": 195, \"y\": 195 }, { \"x\": 195, \"y\": 181 }, { \"x\": 195, \"y\": 173 }, { \"x\": 195, \"y\": 163 }, { \"x\": 194, \"y\": 155 }, { \"x\": 192, \"y\": 145 }, { \"x\": 192, \"y\": 143 }, { \"x\": 192, \"y\": 138 }, { \"x\": 191, \"y\": 135 }, { \"x\": 191, \"y\": 133 }, { \"x\": 191, \"y\": 130 }, { \"x\": 190, \"y\": 128 }, { \"x\": 188, \"y\": 129 }, { \"x\": 186, \"y\": 129 }, { \"x\": 181, \"y\": 132 }, { \"x\": 173, \"y\": 131 }, { \"x\": 162, \"y\": 131 }, { \"x\": 151, \"y\": 132 }, { \"x\": 149, \"y\": 132 }, { \"x\": 138, \"y\": 132 }, { \"x\": 136, \"y\": 132 }, { \"x\": 122, \"y\": 131 }, { \"x\": 120, \"y\": 131 }, { \"x\": 109, \"y\": 130 }, { \"x\": 107, \"y\": 130 }, { \"x\": 90, \"y\": 132 }, { \"x\": 81, \"y\": 133 }, { \"x\": 76, \"y\": 133 }],\n    name: \"square\"\n  }, {\n    points: [{ \"x\": 67, \"y\": 172 }, { \"x\": 80, \"y\": 85 }, { \"x\": 83, \"y\": 58 }, { \"x\": 83, \"y\": 54 }, { \"x\": 136, \"y\": 110 }, { \"x\": 157, \"y\": 136 }, { \"x\": 162, \"y\": 140 }, { \"x\": 166, \"y\": 143 }, { \"x\": 80, \"y\": 124 }, { \"x\": 45, \"y\": 116 }, { \"x\": 37, \"y\": 114 }, { \"x\": 31, \"y\": 113 }, { \"x\": 52, \"y\": 106 }, { \"x\": 101, \"y\": 86 }, { \"x\": 131, \"y\": 75 }, { \"x\": 157, \"y\": 63 }, { \"x\": 163, \"y\": 62 }, { \"x\": 158, \"y\": 64 }, { \"x\": 153, \"y\": 73 }, { \"x\": 128, \"y\": 103 }, { \"x\": 71, \"y\": 170 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 30, \"y\": 69 }, { \"x\": 116, \"y\": 118 }, { \"x\": 90, \"y\": 164 }, { \"x\": 75, \"y\": 117 }, { \"x\": 157, \"y\": 83 }, { \"x\": 182, \"y\": 140 }, { \"x\": 155, \"y\": 163 }, { \"x\": 144, \"y\": 119 }, { \"x\": 221, \"y\": 54 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 87, \"y\": 76 }, { \"x\": 62, \"y\": 73 }, { \"x\": 100, \"y\": 98 }, { \"x\": 107, \"y\": 57 }, { \"x\": 61, \"y\": 38 }, { \"x\": 73, \"y\": 137 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 123, \"y\": 129 }, { \"x\": 123, \"y\": 131 }, { \"x\": 124, \"y\": 133 }, { \"x\": 125, \"y\": 136 }, { \"x\": 127, \"y\": 140 }, { \"x\": 129, \"y\": 142 }, { \"x\": 133, \"y\": 148 }, { \"x\": 137, \"y\": 154 }, { \"x\": 143, \"y\": 158 }, { \"x\": 145, \"y\": 161 }, { \"x\": 148, \"y\": 164 }, { \"x\": 153, \"y\": 170 }, { \"x\": 158, \"y\": 176 }, { \"x\": 160, \"y\": 178 }, { \"x\": 164, \"y\": 183 }, { \"x\": 168, \"y\": 188 }, { \"x\": 171, \"y\": 191 }, { \"x\": 175, \"y\": 196 }, { \"x\": 178, \"y\": 200 }, { \"x\": 180, \"y\": 202 }, { \"x\": 181, \"y\": 205 }, { \"x\": 184, \"y\": 208 }, { \"x\": 186, \"y\": 210 }, { \"x\": 187, \"y\": 213 }, { \"x\": 188, \"y\": 215 }, { \"x\": 186, \"y\": 212 }, { \"x\": 183, \"y\": 211 }, { \"x\": 177, \"y\": 208 }, { \"x\": 169, \"y\": 206 }, { \"x\": 162, \"y\": 205 }, { \"x\": 154, \"y\": 207 }, { \"x\": 145, \"y\": 209 }, { \"x\": 137, \"y\": 210 }, { \"x\": 129, \"y\": 214 }, { \"x\": 122, \"y\": 217 }, { \"x\": 118, \"y\": 218 }, { \"x\": 111, \"y\": 221 }, { \"x\": 109, \"y\": 222 }, { \"x\": 110, \"y\": 219 }, { \"x\": 112, \"y\": 217 }, { \"x\": 118, \"y\": 209 }, { \"x\": 120, \"y\": 207 }, { \"x\": 128, \"y\": 196 }, { \"x\": 135, \"y\": 187 }, { \"x\": 138, \"y\": 183 }, { \"x\": 148, \"y\": 167 }, { \"x\": 157, \"y\": 153 }, { \"x\": 163, \"y\": 145 }, { \"x\": 165, \"y\": 142 }, { \"x\": 172, \"y\": 133 }, { \"x\": 177, \"y\": 127 }, { \"x\": 179, \"y\": 127 }, { \"x\": 180, \"y\": 125 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 81, \"y\": 219 }, { \"x\": 84, \"y\": 218 }, { \"x\": 86, \"y\": 220 }, { \"x\": 88, \"y\": 220 }, { \"x\": 90, \"y\": 220 }, { \"x\": 92, \"y\": 219 }, { \"x\": 95, \"y\": 220 }, { \"x\": 97, \"y\": 219 }, { \"x\": 99, \"y\": 220 }, { \"x\": 102, \"y\": 218 }, { \"x\": 105, \"y\": 217 }, { \"x\": 107, \"y\": 216 }, { \"x\": 110, \"y\": 216 }, { \"x\": 113, \"y\": 214 }, { \"x\": 116, \"y\": 212 }, { \"x\": 118, \"y\": 210 }, { \"x\": 121, \"y\": 208 }, { \"x\": 124, \"y\": 205 }, { \"x\": 126, \"y\": 202 }, { \"x\": 129, \"y\": 199 }, { \"x\": 132, \"y\": 196 }, { \"x\": 136, \"y\": 191 }, { \"x\": 139, \"y\": 187 }, { \"x\": 142, \"y\": 182 }, { \"x\": 144, \"y\": 179 }, { \"x\": 146, \"y\": 174 }, { \"x\": 148, \"y\": 170 }, { \"x\": 149, \"y\": 168 }, { \"x\": 151, \"y\": 162 }, { \"x\": 152, \"y\": 160 }, { \"x\": 152, \"y\": 157 }, { \"x\": 152, \"y\": 155 }, { \"x\": 152, \"y\": 151 }, { \"x\": 152, \"y\": 149 }, { \"x\": 152, \"y\": 146 }, { \"x\": 149, \"y\": 142 }, { \"x\": 148, \"y\": 139 }, { \"x\": 145, \"y\": 137 }, { \"x\": 141, \"y\": 135 }, { \"x\": 139, \"y\": 135 }, { \"x\": 134, \"y\": 136 }, { \"x\": 130, \"y\": 140 }, { \"x\": 128, \"y\": 142 }, { \"x\": 126, \"y\": 145 }, { \"x\": 122, \"y\": 150 }, { \"x\": 119, \"y\": 158 }, { \"x\": 117, \"y\": 163 }, { \"x\": 115, \"y\": 170 }, { \"x\": 114, \"y\": 175 }, { \"x\": 117, \"y\": 184 }, { \"x\": 120, \"y\": 190 }, { \"x\": 125, \"y\": 199 }, { \"x\": 129, \"y\": 203 }, { \"x\": 133, \"y\": 208 }, { \"x\": 138, \"y\": 213 }, { \"x\": 145, \"y\": 215 }, { \"x\": 155, \"y\": 218 }, { \"x\": 164, \"y\": 219 }, { \"x\": 166, \"y\": 219 }, { \"x\": 177, \"y\": 219 }, { \"x\": 182, \"y\": 218 }, { \"x\": 192, \"y\": 216 }, { \"x\": 196, \"y\": 213 }, { \"x\": 199, \"y\": 212 }, { \"x\": 201, \"y\": 211 }],\n    name: \"other\"\n  }, {\n    points: [{ \"x\": 75, \"y\": 250 }, { \"x\": 75, \"y\": 247 }, { \"x\": 77, \"y\": 244 }, { \"x\": 78, \"y\": 242 }, { \"x\": 79, \"y\": 239 }, { \"x\": 80, \"y\": 237 }, { \"x\": 82, \"y\": 234 }, { \"x\": 82, \"y\": 232 }, { \"x\": 84, \"y\": 229 }, { \"x\": 85, \"y\": 225 }, { \"x\": 87, \"y\": 222 }, { \"x\": 88, \"y\": 219 }, { \"x\": 89, \"y\": 216 }, { \"x\": 91, \"y\": 212 }, { \"x\": 92, \"y\": 208 }, { \"x\": 94, \"y\": 204 }, { \"x\": 95, \"y\": 201 }, { \"x\": 96, \"y\": 196 }, { \"x\": 97, \"y\": 194 }, { \"x\": 98, \"y\": 191 }, { \"x\": 100, \"y\": 185 }, { \"x\": 102, \"y\": 178 }, { \"x\": 104, \"y\": 173 }, { \"x\": 104, \"y\": 171 }, { \"x\": 105, \"y\": 164 }, { \"x\": 106, \"y\": 158 }, { \"x\": 107, \"y\": 156 }, { \"x\": 107, \"y\": 152 }, { \"x\": 108, \"y\": 145 }, { \"x\": 109, \"y\": 141 }, { \"x\": 110, \"y\": 139 }, { \"x\": 112, \"y\": 133 }, { \"x\": 113, \"y\": 131 }, { \"x\": 116, \"y\": 127 }, { \"x\": 117, \"y\": 125 }, { \"x\": 119, \"y\": 122 }, { \"x\": 121, \"y\": 121 }, { \"x\": 123, \"y\": 120 }, { \"x\": 125, \"y\": 122 }, { \"x\": 125, \"y\": 125 }, { \"x\": 127, \"y\": 130 }, { \"x\": 128, \"y\": 133 }, { \"x\": 131, \"y\": 143 }, { \"x\": 136, \"y\": 153 }, { \"x\": 140, \"y\": 163 }, { \"x\": 144, \"y\": 172 }, { \"x\": 145, \"y\": 175 }, { \"x\": 151, \"y\": 189 }, { \"x\": 156, \"y\": 201 }, { \"x\": 161, \"y\": 213 }, { \"x\": 166, \"y\": 225 }, { \"x\": 169, \"y\": 233 }, { \"x\": 171, \"y\": 236 }, { \"x\": 174, \"y\": 243 }, { \"x\": 177, \"y\": 247 }, { \"x\": 178, \"y\": 249 }, { \"x\": 179, \"y\": 251 }, { \"x\": 180, \"y\": 253 }, { \"x\": 180, \"y\": 255 }, { \"x\": 179, \"y\": 257 }, { \"x\": 177, \"y\": 257 }, { \"x\": 174, \"y\": 255 }, { \"x\": 169, \"y\": 250 }, { \"x\": 164, \"y\": 247 }, { \"x\": 160, \"y\": 245 }, { \"x\": 149, \"y\": 238 }, { \"x\": 138, \"y\": 230 }, { \"x\": 127, \"y\": 221 }, { \"x\": 124, \"y\": 220 }, { \"x\": 112, \"y\": 212 }, { \"x\": 110, \"y\": 210 }, { \"x\": 96, \"y\": 201 }, { \"x\": 84, \"y\": 195 }, { \"x\": 74, \"y\": 190 }, { \"x\": 64, \"y\": 182 }, { \"x\": 55, \"y\": 175 }, { \"x\": 51, \"y\": 172 }, { \"x\": 49, \"y\": 170 }, { \"x\": 51, \"y\": 169 }, { \"x\": 56, \"y\": 169 }, { \"x\": 66, \"y\": 169 }, { \"x\": 78, \"y\": 168 }, { \"x\": 92, \"y\": 166 }, { \"x\": 107, \"y\": 164 }, { \"x\": 123, \"y\": 161 }, { \"x\": 140, \"y\": 162 }, { \"x\": 156, \"y\": 162 }, { \"x\": 171, \"y\": 160 }, { \"x\": 173, \"y\": 160 }, { \"x\": 186, \"y\": 160 }, { \"x\": 195, \"y\": 160 }, { \"x\": 198, \"y\": 161 }, { \"x\": 203, \"y\": 163 }, { \"x\": 208, \"y\": 163 }, { \"x\": 206, \"y\": 164 }, { \"x\": 200, \"y\": 167 }, { \"x\": 187, \"y\": 172 }, { \"x\": 174, \"y\": 179 }, { \"x\": 172, \"y\": 181 }, { \"x\": 153, \"y\": 192 }, { \"x\": 137, \"y\": 201 }, { \"x\": 123, \"y\": 211 }, { \"x\": 112, \"y\": 220 }, { \"x\": 99, \"y\": 229 }, { \"x\": 90, \"y\": 237 }, { \"x\": 80, \"y\": 244 }, { \"x\": 73, \"y\": 250 }, { \"x\": 69, \"y\": 254 }, { \"x\": 69, \"y\": 252 }],\n    name: \"other\"\n  }];\n\n  ShapeDetector.prototype.spot = function (points, patternName) {\n\n    if (patternName == null) {\n      patternName = '';\n    }\n\n    var distance, pattern, score;\n    var stroke = new Stroke(points);\n    var bestDistance = +Infinity;\n    var bestPattern = null;\n    var bestScore = 0;\n\n    for (var i = 0; i < this.patterns.length; i++) {\n      pattern = this.patterns[i];\n\n      if (pattern.name.indexOf(patternName) > -1) {\n        distance = stroke.distanceAtBestAngle(pattern);\n        score = 1.0 - distance / _halfDiagonal;\n\n        if (distance < bestDistance && score > this.threshold) {\n          bestDistance = distance;\n          bestPattern = pattern.name;\n          bestScore = score;\n        }\n      }\n    }\n\n    return {\n      pattern: bestPattern,\n      score: bestScore\n    };\n  };\n\n  ShapeDetector.prototype.learn = function (name, points) {\n\n    return this.patterns.push(new Stroke(points, name));\n  };\n\n  return ShapeDetector;\n});\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetWindow = resetWindow;\nvar touch = require('./touch');\nvar ui = require('./ui');\nvar overlays = require('./overlays');\nvar video = require('./video');\nvar timing = require('./timing');\nvar util = require('./util');\nvar sound = require('./sound');\n\nfunction resetWindow() {\n  window.kan = {\n    currentColor: '#2B5E2E',\n    composition: [],\n    compositionInterval: null,\n    compositionTimeout: null,\n    soundTimeouts: [],\n    lastEvent: null,\n    interaction: false,\n    moves: [],\n    playing: false,\n    pinching: false,\n    pinchedGroup: null,\n    pinchedTut: null,\n    pathData: {},\n    shapePath: null,\n    prevAngle: null,\n    sides: [],\n    side: [],\n    corners: [],\n    lastScale: 1,\n    lastRotation: 0,\n    originalPosition: null,\n    tutorialCompletion: {\n      \"fill\": false,\n      \"pinch\": false,\n      \"swipe\": false\n    },\n    inactivityTimeout: null,\n    playPromptTimeout: null,\n    userHasDrawnFirstShape: false,\n    firstTimePlaying: true,\n    shapesSinceTut: 0,\n    refreshCheckInterval: null,\n    sha: null,\n    scheduledOverlay: null,\n    continueCountdownInterval: null,\n    shapeSounds: null\n  };\n}\n\n$(window).on('load', function () {\n  function run() {\n    resetWindow();\n    util.setSha();\n    ui.init();\n    overlays.init();\n    timing.init();\n    sound.init().then(function () {\n      // sound.init() is async because it loads in the sound files\n      touch.init();\n    }).fail(function (e) {\n      console.error('error initting shape sounds:', e);\n      location.reload();\n    });\n  }\n\n  try {\n    run();\n  } catch (e) {\n    console.error(e);\n    setTimeout(function () {\n      // wait 5 seconds then reload\n      location.reload();\n    }, 5 * 1000);\n  }\n});\n\n},{\"./overlays\":8,\"./sound\":11,\"./timing\":12,\"./touch\":13,\"./ui\":15,\"./util\":16,\"./video\":17}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.openOverlay = openOverlay;\nexports.resetContinueCountdown = resetContinueCountdown;\nexports.cardNavNext = cardNavNext;\nexports.closeAndResetOverlays = closeAndResetOverlays;\nexports.init = init;\nvar config = require('./../../config');\n\nvar touch = require('./touch');\nvar video = require('./video');\nvar timing = require('./timing');\nvar tutorial = require('./tutorial');\nvar util = require('./util');\n\nvar hammerCanvas = touch.hammerCanvas;\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar $cardsWrap = $body.find('.overlay.tips .card-wrap');\nvar $cardItems = $cardsWrap.find('article');\nvar cardsCount = $cardItems.length;\nvar $footer = $body.find('.overlay.tips .footer');\n\nvar $sharePhone = $body.find('#phone');\nvar $shareKeypad = $body.find('.keypad');\n\nvar allOverlays = ['intro', 'play-prompt', 'share-prompt', 'continue', 'tips', 'share'];\nvar overlayOpenClasses = allOverlays.map(function (overlay) {\n  return overlay + '-active';\n}).join(' ');\n\nvar overlayActiveClass = 'overlay-active';\n\nfunction openOverlay(overlayName) {\n  // console.log('attempting to open overlay', overlayName);\n  if (window.kan.overlays === false) return;\n  if (allOverlays.includes(overlayName)) {\n    if (window.kan.pinching === true || window.kan.panning === true) {\n      if (overlayName === 'continue') {\n        timing.preventInactivityTimeout();\n      } else {\n        // console.log('scheduling overlay', overlayName);\n        window.kan.scheduledOverlay = overlayName;\n      }\n      return;\n    }\n    closeAndResetOverlays();\n    tutorial.hideContextualTuts();\n    $body.addClass(overlayActiveClass);\n    $body.find('.overlay:not(.tips)').on(tapEvent, function () {\n      closeAndResetOverlays();\n    });\n\n    switch (overlayName) {\n      case 'intro':\n        openIntroOverlay();\n        break;\n      case 'play-prompt':\n        if (util.anyShapesOnCanvas()) {\n          openPlayPromptOverlay();\n        } else {\n          window.kan.playPromptTimeout = setTimeout(function () {\n            openOverlay('play-prompt');\n          }, timing.playPromptDelay / 2);\n        }\n        break;\n      case 'share-prompt':\n        openSharePromptOverlay();\n        break;\n      case 'continue':\n        openContinueOverlay();\n        break;\n      case 'tips':\n        openTipsOverlay();\n        break;\n      case 'share':\n        openShareOverlay();\n        break;\n    }\n  } else {\n    // console.log('unable to open unknown overlay', overlayName);\n  }\n}\n\nfunction openIntroOverlay() {\n  $body.addClass('intro-active');\n}\n\nfunction openPlayPromptOverlay() {\n  $body.addClass('play-prompt-active');\n}\n\nfunction openSharePromptOverlay() {\n  $body.addClass('share-prompt-active');\n}\n\nfunction resetContinueCountdown() {\n  $('.overlay.continue .countdown-num').html(parseInt(timing.continueInactivityDelay / 1000));\n  clearInterval(window.kan.continueCountdownInterval);\n}\n\nfunction openContinueOverlay() {\n  $body.addClass('continue-active');\n\n  resetContinueCountdown();\n  clearTimeout(window.kan.inactivityTimeout);\n  clearTimeout(window.kan.playPromptTimeout);\n\n  window.kan.continueCountdownInterval = setInterval(function () {\n    var $countdownNumWrap = $('.overlay.continue .countdown-num');\n    var count = parseInt($countdownNumWrap.html());\n    if (count > 1) {\n      $countdownNumWrap.html(count - 1);\n    }\n  }, 1000);\n\n  window.kan.inactivityTimeout = setTimeout(function () {\n    video.enterTutorialMode();\n  }, timing.continueInactivityDelay);\n}\n\nfunction openTipsOverlay() {\n  $body.addClass('tips-active');\n  activateTipsCards();\n}\n\nfunction openShareOverlay() {\n  $body.addClass('share-active');\n}\n\n// card slider navigation\nfunction cardNavNext() {\n  var $old = $body.find('.card-wrap .current');\n  var $new = $old.next().length ? $old.next() : $cardItems.first();\n  var $next = $new.next().length ? $new.next() : $cardItems.first();\n  var $third = $next.next().length ? $next.next() : $cardItems.first().next();\n  var slide = $new.index();\n  $old.removeClass().addClass('remove');\n  $new.removeClass().addClass('current');\n  $next.removeClass().addClass('next');\n  $third.removeClass().addClass('third');\n  updateCardCounter(slide + 1, cardsCount);\n  setTimeout(function () {\n    $old.removeClass();\n  }, 600);\n}\n\n// tips card interactions\nfunction cardInteractions() {\n  var timeOfLastInteraction = 0;\n\n  $body.find('.overlay').on(tapEvent, function (e) {\n    var currentTime = Date.now();\n    if (timeOfLastInteraction > currentTime - 250) {\n      return;\n    }\n    timeOfLastInteraction = currentTime;\n\n    if ($(e.target).closest('.card-wrap').length == 1) {\n      // directly on a card, navigate to the next one\n      cardNavNext();\n    } else {\n      // outside elements, close everything and reset\n      closeAndResetOverlays();\n    }\n  });\n}\n\nfunction resetTips() {\n  $cardItems.removeClass();\n  $sharePhone.html('');\n}\n\n// close and reset tips\nfunction closeAndResetOverlays() {\n  $body.removeClass('overlay-active');\n  $body.removeClass(overlayOpenClasses);\n  resetTips();\n}\n\n// deal a fresh stack of cards\nfunction activateTipsCards() {\n  var $new = $cardItems.first();\n  var $next = $new.next().length ? $new.next() : $cardItems.first();\n  var $third = $next.next().length ? $next.next() : $cardItems.first().next();\n  $cardItems.removeClass();\n  $new.removeClass().addClass('current');\n  $next.removeClass().addClass('next');\n  $third.removeClass().addClass('third');\n  updateCardCounter(1, cardsCount);\n}\n\n// counting cards\nfunction updateCardCounter(current, total) {\n  $footer.find('.current').html(current);\n  $footer.find('.next').html(total);\n}\n\n// phone inputs\nfunction phoneNumberInputs() {\n  // mask the output\n  $sharePhone.mask('000-000-0000');\n  // get interactions from the keypad\n  $shareKeypad.find('.num').on(tapEvent, function (e) {\n    var phoneNumber = $sharePhone.html().toString() + $(e.target).html().toString();\n    phoneNumber = $sharePhone.masked(phoneNumber);\n    $sharePhone.html(phoneNumber);\n  });\n  // clear the display\n  $shareKeypad.find('.clear').on(tapEvent, function (e) {\n    $sharePhone.html('');\n  });\n  // FIXME: send sms\n  // $shareKeypad.find('.send').on(tapEvent, e => {});\n}\n\n// \"randomly\" place fiddly bits on the cards\nfunction randomCardGraphics() {\n  $body.find('.card-wrap article').each(function (i, el) {\n    $(el).attr('data-bg', i);\n  });\n}\n\nfunction initTips() {\n  cardInteractions();\n}\n\nfunction initShare() {\n  phoneNumberInputs();\n  randomCardGraphics();\n}\n\nfunction init() {\n  initTips();\n  initShare();\n}\n\n},{\"./../../config\":1,\"./timing\":12,\"./touch\":13,\"./tutorial\":14,\"./util\":16,\"./video\":17}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.destroyGroupPops = destroyGroupPops;\nexports.fillInGroupPopsById = fillInGroupPopsById;\nexports.toggleFill = toggleFill;\nexports.cleanUpGroup = cleanUpGroup;\nexports.updatePops = updatePops;\nexports.getOutlineGroup = getOutlineGroup;\nexports.getTruedShape = getTruedShape;\nexports.getCompletedPath = getCompletedPath;\nexports.getShapePrediction = getShapePrediction;\nexports.getIntegerPoint = getIntegerPoint;\nexports.stringifyPoint = stringifyPoint;\nexports.parsePoint = parsePoint;\nexports.getClosestPointFromPathData = getClosestPointFromPathData;\nexports.processShapeData = processShapeData;\nexports.findInteriorCurves = findInteriorCurves;\nexports.getExtendedPath = getExtendedPath;\nexports.getBruteExtendedPath = getBruteExtendedPath;\nexports.getTrimmedPath = getTrimmedPath;\nexports.hitTestGroupBounds = hitTestGroupBounds;\nexports.hitTestBounds = hitTestBounds;\nvar ShapeDetector = require('./lib/shape-detector');\n\nvar config = require('./../../config');\n\nvar util = require('./util');\nvar color = require('./color');\n\nvar cornerThresholdDeg = exports.cornerThresholdDeg = 30;\nvar thresholdDistMultiplier = exports.thresholdDistMultiplier = 0.1;\n\nvar detector = exports.detector = new ShapeDetector(ShapeDetector.defaultShapes);\n\nvar shapeNames = exports.shapeNames = [\"line\", \"circle\", \"square\", \"triangle\", \"other\"];\n\nfunction clearPops() {\n  var pops = util.getAllPops();\n  pops.forEach(function (pop) {\n    return pop.remove();\n  });\n}\n\nfunction destroyGroupPops(group) {\n  // console.log('destroying pops');\n  var groupPopsBefore = util.getGroupPops(group);\n  // console.log('pops to be destroyed', groupPopsBefore);\n  if (groupPopsBefore.length > 0) {\n    groupPopsBefore.forEach(function (pop) {\n      return pop.remove();\n    });\n  }\n  var groupPopsAfter = util.getGroupPops(group);\n  // console.log('group pops after', groupPopsAfter);\n}\n\nfunction fillInGroupPopsById(groupId) {\n  var group = paper.project.getItem({\n    className: 'Group',\n    match: function match(el) {\n      return el.id === groupId;\n    }\n  });\n\n  if (!!group && group.children.length > 0) {\n    group.children.forEach(function (groupChild) {\n      if (groupChild.name === 'loop') {\n        toggleFill(groupChild);\n      }\n    });\n  }\n}\n\nfunction toggleFill(item) {\n  var transparent = color.transparent;\n  // console.log('hit');\n  var parent = item.parent;\n\n  // console.log('hit item', item);\n  // console.log('hit parent', parent);\n\n  if (item.data.interior) {\n    // console.log('interior');\n    item.data.transparent = !item.data.transparent;\n\n    if (item.data.transparent) {\n      // console.log('transparent');\n      item.fillColor = transparent;\n      item.strokeColor = transparent;\n    } else {\n      // console.log('not transparent');\n      item.fillColor = parent.data.color;\n      item.strokeColor = parent.data.color;\n    }\n\n    window.kan.moves.push({\n      type: 'fillChange',\n      id: item.id,\n      fill: parent.data.color,\n      transparent: item.data.transparent\n    });\n  } else {\n    // console.log('not interior');\n    // check if item is a pop, because then we'll fill the pop's parent\n    if (!!item.data && item.data.pop === true) {\n      if (!!item.parent) {\n        if (config.pop === true) {\n          fillInGroupPopsById(item.parent.id);\n        }\n      }\n    }\n  }\n}\n\nfunction cleanUpGroup(group) {\n  // console.log('cleaning up group');\n  var acceptableNames = ['mask', 'outer', 'shapePath', 'loop', 'pop'];\n\n  group.children.forEach(function (groupChild) {\n    if (groupChild.name === null || !acceptableNames.includes(groupChild.name) || !groupChild.length > 0) {\n      groupChild.remove();\n    }\n  });\n\n  return group;\n}\n\nfunction updatePops() {\n  var freshGroups = util.getFreshGroups();\n  var popCandidates = util.getPopCandidates();\n  var allPops = util.getAllPops();\n  popCandidates.reverse();\n  // console.log('freshGroups', freshGroups);\n  // console.log('popCandidates', popCandidates);\n  // clearPops();\n\n  freshGroups.forEach(function (freshGroup, i) {\n    // if (i >= 4) return;\n    // console.log('freshGroup', freshGroup);\n\n    var freshOuter = freshGroup._namedChildren.mask[0];\n    freshOuter.bringToFront();\n    // freshOuter.visible = true;\n    // freshOuter.fillColor = 'black';\n    // freshOuter.selected = true;\n    // console.log('freshOuter', freshOuter);\n    // freshOuter.selected = true;\n    popCandidates.forEach(function (otherGroup, j) {\n      var otherGroupOuter = otherGroup._namedChildren.mask[0];\n      if (freshGroup.id !== otherGroup.id) {\n        // console.log('otherGroup', otherGroup);\n        // console.log('otherGroupOuter', otherGroupOuter);\n        // otherGroupOuter.fillColor = 'white';\n        otherGroupOuter.bringToFront();\n        var thisPop = freshOuter.intersect(otherGroupOuter);\n        if (!!thisPop && thisPop.length > 0) {\n          // const popColor = color.getIndexedPopColor(i + j);\n          var popColor = color.getRandomPop();\n          thisPop.fillColor = popColor;\n          thisPop.strokeColor = popColor;\n          thisPop.data.pop = true;\n          thisPop.name = 'pop';\n          thisPop.data.popGroup = freshGroup.id;\n          thisPop.data.intersectingGroup = otherGroup.id;\n          thisPop.visible = true;\n          thisPop.closed = true;\n          thisPop.bringToFront();\n          freshGroup.addChild(thisPop);\n        }\n\n        cleanUpGroup(freshGroup);\n\n        // figure out if this pop intersects any other pops\n        // allPops.forEach((otherPop, k) => {\n        //   console.log('checking other pop', otherPop);\n        //   if (thisPop.id !== otherPop.id && thisPop.intersects(otherPop)) {\n        //     let popIntersection = thisPop.getIntersections(otherPop);\n        //     if (!!popIntersection && popIntersection.length > 0) {\n        //       popIntersection = new Path([popIntersection])\n        //       console.log('popIntersection', popIntersection);\n        //       // const popColor = color.getIndexedPopColor(i + j + k);\n        //       const popColor = color.getRandomPop();\n        //       popIntersection.data.pop = true;\n        //       popIntersection.fillColor = popColor\n        //       popIntersection.strokeColor = popColor;\n        //       popIntersection.visible = true;\n        //       popIntersection.closed = true;\n        //       popIntersection.bringToFront();\n        //     }\n        //   }\n        // });\n      }\n    });\n\n    freshGroup.data.fresh = false;\n  });\n}\n\nfunction getOutlineGroup(truedShape) {\n  // console.log('truedShape', truedShape);\n  var outerPath = new Path();\n  outerPath.name = 'outer';\n  outerPath.visible = true;\n\n  var middlePath = new Path();\n  middlePath.name = 'middle';\n  var sizes = [];\n  var angle = null,\n      lastAngle = null,\n      angleDelta = void 0;\n\n  var firstTop = null,\n      firstBottom = null;\n  var lastTop = null,\n      lastBottom = null;\n\n  if (!(truedShape.length > 0)) return new Group(outerPath, middlePath);\n\n  middlePath.add(truedShape.firstSegment.point);\n\n  for (var i = 0; i < truedShape.length; i += 10) {\n    while (sizes.length > 10) {\n      sizes.shift();\n    }\n\n    var size = Math.random() * 9; // This is just random variance\n    sizes.push(size);\n\n    var cumSize = 0;\n    for (var j = 0; j < sizes.length; j++) {\n      cumSize += sizes[j];\n    }\n    var avgSize = Math.max(5, (cumSize / sizes.length + size) / 2);\n\n    var point = truedShape.getPointAt(i);\n    var normal = truedShape.getNormalAt(i);\n\n    var top = new Point(point.x + normal.x * avgSize, point.y + normal.y * avgSize);\n    var bottom = new Point(point.x - normal.x * avgSize, point.y - normal.y * avgSize);\n\n    // console.log('point', point, 'normal', normal);\n    // console.log('top', top, 'bottom', bottom);\n\n    outerPath.add(top);\n    outerPath.insert(0, bottom);\n    middlePath.add(point);\n\n    lastAngle = angle;\n\n    if (i == 10) {\n      firstTop = top;\n      firstBottom = bottom;\n    } else {\n      lastTop = top;\n      lastBottom = bottom;\n    }\n  }\n\n  if (truedShape.closed === true) {\n    var centerTop = new Point((firstTop.x + lastTop.x) / 2, (firstTop.y + lastTop.y) / 2);\n    var centerBottom = new Point((firstBottom.x + lastBottom.x) / 2, (firstBottom.y + lastBottom.y) / 2);\n    var center = new Point((centerTop.x + centerBottom.x) / 2, (centerTop.y + centerBottom.y) / 2);\n\n    outerPath.add(centerTop);\n    outerPath.insert(0, centerBottom);\n    middlePath.add(center);\n\n    outerPath.add(firstTop);\n    outerPath.insert(0, firstBottom);\n    middlePath.closed = true;\n  }\n\n  outerPath.flatten(50);\n  middlePath.flatten(50);\n  outerPath.simplify();\n  middlePath.simplify();\n\n  outerPath.selected = false;\n  // middlePath.selected = true;\n  outerPath.name = 'outer';\n  middlePath.name = 'middle';\n  var returnGroup = new Group(outerPath, middlePath);\n  return returnGroup;\n}\n\nfunction getTruedShape(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n  // console.log('pathClone', pathClone);\n  var completedPath = getCompletedPath(pathClone);\n  // completedPath.reduce();\n\n  // true the path!\n  var truedPath = completedPath;\n  // console.log('truedPath', truedPath);\n\n  truedPath.strokeWidth = pathClone.strokeWidth;\n\n  pathClone.remove();\n  return truedPath;\n}\n\n// extend or trim path if the ends are close\nfunction getCompletedPath(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n  pathClone.reduce();\n  pathClone.simplify();\n\n  var intersections = pathClone.getIntersections();\n\n  if (intersections.length > 0) {\n    // trim path if ends are close\n    var trimmedPath = getTrimmedPath(pathClone);\n\n    pathClone.remove();\n\n    return trimmedPath;\n  } else {\n    // extend path to see if an intersection is near\n    var extendedPath = getExtendedPath(pathClone);\n    var _intersections = extendedPath.getIntersections();\n\n    // pathClone.remove();\n\n    if (_intersections.length > 0) {\n      // trim extra extended path\n      var _trimmedPath = getTrimmedPath(extendedPath);\n      extendedPath.remove();\n      return _trimmedPath;\n    } else {\n      // extended path does not intersect, return the original path\n      extendedPath.replaceWith(getBruteExtendedPath(pathClone));\n      if (extendedPath !== null) {\n        var _intersections2 = extendedPath.getIntersections();\n\n        if (_intersections2.length > 0) {\n          var _trimmedPath2 = getTrimmedPath(extendedPath);\n          extendedPath.remove();\n          return _trimmedPath2;\n        }\n\n        if (!!extendedPath && extendedPath.length > 0) {\n          extendedPath.remove();\n        }\n      }\n\n      pathClone.visible = true;\n      return pathClone;\n    }\n  }\n}\n\nfunction getShapePrediction(path) {\n  var prediction = {};\n\n  var shapeJSON = path.exportJSON();\n  var shapeData = processShapeData(shapeJSON);\n  // console.log(JSON.stringify(shapeData));\n  var shapePrediction = detector.spot(shapeData);\n\n  if (shapePrediction.score === 0) {\n    // algorithm doesn't like vertical lines for some reason\n    // if the certainty is 0 it's probably a line\n    prediction.pattern = \"line\";\n    prediction.score = 0.9;\n  } else {\n    if (shapePrediction.score > 0.5) {\n      prediction.pattern = shapePrediction.pattern;\n    } else {\n      prediction.pattern = \"other\";\n    }\n    prediction.score = shapePrediction.score;\n  }\n\n  if (path.closed === true) {\n    var closedShapes = ['triangle', 'square', 'circle'];\n    if (closedShapes.includes(prediction.pattern) === false) {\n      // closed shape should be one of the above, make a random pick\n      prediction.pattern = util.randomPick(closedShapes);\n    }\n  } else if (path.intersects(path) === true) {\n    prediction.pattern = 'other';\n    // const intersectingShapes = ['triangle', 'square', 'circle', 'other'];\n    // if (intersectingShapes.includes(prediction.pattern) === false) {\n    //   prediction.pattern = util.randomPick(intersectingShapes);\n    // }\n  } else {\n    prediction.pattern = 'line'; // lines are the only shape that is not closed and does not intersect\n  }\n\n  // console.log('shape prediction', prediction);\n\n  return prediction;\n}\n\n// floors the coordinates of a point\nfunction getIntegerPoint(point) {\n  return new Point(Math.floor(point.x), Math.floor(point.y));\n}\n\nfunction stringifyPoint(point) {\n  return Math.floor(point.x) + ',' + Math.floor(point.y);\n}\n\nfunction parsePoint(pointStr) {\n  var split = pointStr.split(',').map(function (num) {\n    return Math.floor(num);\n  });\n\n  if (split.length >= 2) {\n    return new Point(split[0], split[1]);\n  }\n\n  return null;\n}\n\nfunction getClosestPointFromPathData(point, pathData) {\n  var leastDistance = void 0,\n      closestPoint = void 0;\n\n  Base.each(pathData, function (datum, i) {\n    var distance = point.getDistance(datum.point);\n    if (!leastDistance || distance < leastDistance) {\n      leastDistance = distance;\n      closestPoint = datum.point;\n    }\n  });\n\n  return closestPoint || point;\n}\n\nfunction processShapeData(json) {\n  var returnShape = [];\n  var jsonObj = JSON.parse(json)[1]; // zero index is stringified type (e.g. \"Path\")\n\n  if ('segments' in jsonObj) {\n    var segments = jsonObj.segments;\n    Base.each(segments, function (segment, i) {\n      if (segment.length === 3) {\n        var positionInfo = segment[0]; // indexes 1 and 2 are superfluous matrix details\n        returnShape.push({\n          x: positionInfo[0],\n          y: positionInfo[1]\n        });\n      } else {\n        returnShape.push({\n          x: segment[0],\n          y: segment[1]\n        });\n      };\n    });\n  }\n  return returnShape;\n}\n\nfunction findInteriorCurves(path) {\n  var transparent = color.transparent;\n\n  var interiorCurves = [];\n\n  var pathClone = path.clone();\n  var intersections = pathClone.getIntersections();\n\n  if (intersections.length > 0) {\n    var dividedPath = pathClone.resolveCrossings();\n    // console.log(dividedPath);\n\n    if (dividedPath.className === 'CompoundPath') {\n      Base.each(dividedPath.children, function (child, i) {\n        if (child.length > 0 && child.closed) {\n          var enclosedLoop = child.clone();\n          if (pathClone.closed) {\n            enclosedLoop.fillColor = pathClone.strokeColor;\n            enclosedLoop.data.interior = true;\n            enclosedLoop.data.transparent = false;\n          } else {\n            enclosedLoop.fillColor = transparent;\n            enclosedLoop.data.transparent = true;\n          }\n          enclosedLoop.data.interior = true;\n          enclosedLoop.visible = true;\n          enclosedLoop.closed = true;\n          interiorCurves.push(enclosedLoop);\n        }\n      });\n    } else {\n      if (pathClone.closed) {\n        var enclosedLoop = pathClone.clone();\n        enclosedLoop.visible = true;\n        enclosedLoop.fillColor = pathClone.strokeColor;\n        enclosedLoop.data.interior = true;\n        enclosedLoop.data.transparent = false;\n        interiorCurves.push(enclosedLoop);\n      }\n    }\n  } else {\n    if (pathClone.closed) {\n      var _enclosedLoop = pathClone.clone();\n      _enclosedLoop.visible = true;\n      _enclosedLoop.fillColor = pathClone.strokeColor;\n      _enclosedLoop.data.interior = true;\n      _enclosedLoop.data.transparent = false;\n      interiorCurves.push(_enclosedLoop);\n    }\n  }\n\n  return interiorCurves;\n}\n\nfunction getExtendedPath(path) {\n  var bruteForce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var extendedPath = path.clone();\n  extendedPath.visible = false;\n\n  var thresholdDist = thresholdDistMultiplier * extendedPath.length;\n\n  var firstSegment = extendedPath.firstSegment;\n  var nextSegment = firstSegment.next;\n  var startAngle = Math.atan2(nextSegment.point.y - firstSegment.point.y, nextSegment.point.x - firstSegment.point.x); // rad\n  var inverseStartAngle = startAngle + Math.PI;\n  var extendedStartPoint = new Point(firstSegment.point.x + Math.cos(inverseStartAngle) * thresholdDist / 2, firstSegment.point.y + Math.sin(inverseStartAngle) * thresholdDist / 2);\n  extendedPath.insert(0, extendedStartPoint);\n\n  var lastSegment = extendedPath.lastSegment;\n  var penSegment = lastSegment.previous; // penultimate\n  var endAngle = Math.atan2(lastSegment.point.y - penSegment.point.y, lastSegment.point.x - penSegment.point.x); // rad\n  var extendedEndPoint = new Point(lastSegment.point.x + Math.cos(endAngle) * thresholdDist / 2, lastSegment.point.y + Math.sin(endAngle) * thresholdDist / 2);\n  extendedPath.add(extendedEndPoint);\n\n  // extendedPath.visible = true;\n\n  return extendedPath;\n}\n\nfunction getBruteExtendedPath(path) {\n  var extendedPath = path.clone();\n  extendedPath.visible = false;\n\n  var thresholdDist = thresholdDistMultiplier * extendedPath.length;\n  var firstPoint = extendedPath.firstSegment.point;\n  var lastPoint = extendedPath.lastSegment.point;\n\n  if (firstPoint.getDistance(lastPoint) < thresholdDist) {\n    extendedPath.insert(0, lastPoint);\n    extendedPath.add(firstPoint);\n    extendedPath.closed = true;\n    extendedPath.unite();\n    var crossings = extendedPath.resolveCrossings();\n    if (!!crossings && !!crossings.children && crossings.children.length > 0) {\n      (function () {\n        var maxArea = 0,\n            maxChild = null;\n        crossings.children.forEach(function (child) {\n          if (child.area > maxArea) {\n            maxChild = child;\n            maxArea = child.area;\n          }\n        });\n\n        extendedPath = maxChild;\n      })();\n    }\n  }\n\n  return extendedPath;\n}\n\nfunction getTrimmedPath(path) {\n  var pathClone = path.clone();\n  pathClone.visible = false;\n\n  var firstPoint = pathClone.firstSegment.point;\n  var lastPoint = pathClone.lastSegment.point;\n  var thresholdDist = thresholdDistMultiplier * pathClone.length;\n\n  var intersections = pathClone.getIntersections();\n  intersections.forEach(function (intersection, i) {\n    if (intersection.offset === 0) {\n      intersections.splice(i, 1);\n    }\n  });\n\n  // console.log('intersections', intersections);\n\n  if (intersections.length == 1) {\n    for (var i = 0; i < intersections.length; i++) {\n      var intersectionPoint = intersections[i].point;\n\n      // if the average of the distance between the first and last points and the intersection point is within the threshold, trim\n      if (firstPoint.getDistance(intersectionPoint) + lastPoint.getDistance(intersectionPoint) < 2 * thresholdDist) {\n        // console.log('trimming path');\n        var dividedPath = pathClone.clone(); // resolve crossings seems to modify the path it was passed, so make an extra clone to be safe\n        dividedPath.visible = false;\n        var pathCrossings = dividedPath.resolveCrossings();\n\n        if (pathCrossings.className === 'CompoundPath' && pathCrossings.children.length > 0) {\n          for (var j = 0; j < pathCrossings.children.length; j++) {\n            var child = pathCrossings.children[j];\n            if (child.closed) {\n              // child.selected = true;\n              dividedPath = dividedPath.subtract(child);\n            }\n          }\n        }\n\n        // dividedPath.selected = true;\n\n        var trimmedPath = pathClone.subtract(dividedPath);\n        if (trimmedPath.length === 0) return pathClone;\n        if (trimmedPath.className === 'CompoundPath' && trimmedPath.children.length > 0) {\n          var _ret2 = function () {\n            var closedChildren = [];\n            trimmedPath.children.forEach(function (child, i) {\n              if (child.length > 0 && child.closed) {\n                var childClone = child.clone();\n                childClone.visible = false;\n                closedChildren.push(childClone);\n              }\n            });\n\n            if (closedChildren.length > 0) {\n              if (closedChildren.length > 1) {\n                // for some reason there are more than one closed children, merge them\n                var accumulator = closedChildren[0];\n\n                for (var _j = 1; _j < closedChildren.length; _j++) {\n                  accumulator = accumulator.unite(closedChildren[_j]);\n                }\n\n                if (accumulator.length > 0 && accumulator.className === 'Path') {\n                  // console.log('trimmed accumulator', accumulator);\n                  var newPath = new Path();\n                  newPath.copyContent(accumulator);\n                  newPath.copyAttributes(pathClone);\n                  accumulator.remove();\n                  pathClone.remove();\n                  dividedPath.remove();\n                  trimmedPath.remove();\n                  return {\n                    v: newPath\n                  };\n                }\n              }\n\n              pathClone.remove();\n              dividedPath.remove();\n              trimmedPath.remove();\n              // console.log('trimmed closedChildren[0]', closedChildren[0]);\n              return {\n                v: closedChildren[0]\n              };\n            }\n          }();\n\n          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n        }\n\n        // console.log('trimmed path return', trimmedPath);\n        // console.log('path clone', pathClone);\n        // console.log('dividedPath', dividedPath);\n        pathClone.remove();\n        dividedPath.remove();\n        return trimmedPath;\n      }\n    }\n\n    // no close intersection were found so nothing can be trimmed\n    return pathClone;\n  } else {\n    return path;\n  }\n}\n\nfunction hitTestGroupBounds(point) {\n  var groups = util.getAllGroups();\n  return hitTestBounds(point, groups);\n}\n\nfunction hitTestBounds(point, children) {\n  if (!point) return null;\n\n  for (var i = children.length - 1; i >= 0; i--) {\n    var child = children[i];\n    var bounds = child.strokeBounds;\n    if (point.isInside(child.strokeBounds)) {\n      return child;\n    }\n  }\n\n  return null;\n}\n\n},{\"./../../config\":1,\"./color\":5,\"./lib/shape-detector\":6,\"./util\":16}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.record = record;\nvar config = require('./../../config');\n\nvar RecordRTC = require('recordrtc');\n\nvar ui = require('./ui');\nvar sound = require('./sound');\n\nvar canvas = document.getElementById(config.canvasId);\nvar recorder = RecordRTC(canvas, {\n  type: 'canvas'\n});\n\nfunction record() {\n  console.log('starting recording');\n  sound.playComposition();\n  // recorder.startRecording();\n  // setTimeout(stopRecording, 5000);\n}\n\nfunction stopRecording() {\n  recorder.stopRecording(function () {\n    console.log('stopping recording');\n    var blob = recorder.getBlob();\n    download(blob, 'blob.webm');\n  });\n}\n\n},{\"./../../config\":1,\"./sound\":11,\"./ui\":15,\"recordrtc\":4}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.init = init;\nexports.reinitShapeSounds = reinitShapeSounds;\nexports.getShapeSoundObj = getShapeSoundObj;\nexports.startPlaying = startPlaying;\nexports.stopPlaying = stopPlaying;\nexports.asyncInitShapeSounds = asyncInitShapeSounds;\nexports.formatShapeSoundData = formatShapeSoundData;\nexports.quantizeLength = quantizeLength;\nexports.quantizePosition = quantizePosition;\nexports.removeShapeFromComposition = removeShapeFromComposition;\nexports.clearSoundTimeouts = clearSoundTimeouts;\nexports.startComposition = startComposition;\nexports.playComposition = playComposition;\nexports.stopComposition = stopComposition;\nexports.getTrimmedCompositionObj = getTrimmedCompositionObj;\nrequire('howler');\n\nvar ui = require('./ui');\nvar shape = require('./shape');\nvar color = require('./color');\nvar overlays = require('./overlays');\nvar tutorial = require('./tutorial');\nvar util = require('./util');\n\nvar $body = $('body');\n\nvar measures = 4;\nvar bpm = 120;\nvar beatLength = 60 / bpm * 1000; // ms\nvar measureLength = beatLength * 4;\nvar compositionLength = exports.compositionLength = measureLength * measures;\n\nvar playingClass = exports.playingClass = 'playing';\nvar playEnabledClass = exports.playEnabledClass = 'play-enabled';\n\nfunction init() {\n  return asyncInitShapeSounds();\n}\n\nfunction reinitShapeSounds() {\n  return asyncInitShapeSounds();\n}\n\nfunction getShapeSoundObj(path) {\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var shapeSounds = window.kan.shapeSounds || initShapeSounds();\n  // alert(JSON.stringify(window.kan.shapeSounds));\n  // console.log(JSON.stringify(window.kan.shapeSounds));\n\n  var shapePrediction = shape.getShapePrediction(path);\n  var colorName = color.getPathColorName(path);\n  if (colorName === null) colorName = 'black'; // just in case\n\n  var quantizedSoundStartTime = quantizeLength(path.bounds.x / viewWidth * compositionLength); // ms\n  var quantizedSoundDuration = quantizeLength(path.bounds.width / viewWidth * compositionLength); // ms\n\n  var soundObj = {};\n  soundObj.sound = shapeSounds[shapePrediction.pattern];\n  soundObj.startTime = quantizedSoundStartTime;\n  soundObj.duration = quantizedSoundDuration;\n  soundObj.pathId = path.id;\n  soundObj.spriteName = colorName;\n\n  if (!!path.parent && path.parent.className === 'Group') {\n    soundObj.groupId = path.parent.id;\n  }\n\n  return soundObj;\n}\n\nfunction startPlaying() {\n  // console.log('first time', window.kan.firstTimePlaying);\n  if ($body.hasClass(playEnabledClass)) {\n    $body.addClass(playingClass);\n\n    Howler.mute(false);\n\n    window.kan.playing = true;\n\n    if (window.kan.firstTimePlaying === true) {\n      window.kan.firstTimePlaying = false;\n      startComposition(window.kan.composition, false);\n    } else {\n      startComposition(window.kan.composition, true);\n    }\n  } else {\n    window.kan.playing = false;\n    $body.removeClass(playingClass);\n  }\n}\n\nfunction stopPlaying() {\n  var mute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!!mute) {\n    Howler.mute(true);\n  }\n\n  window.kan.playing = false;\n  $body.removeClass(playingClass);\n\n  stopComposition();\n}\n\nfunction asyncGetShapeSoundFromShapeName(shapeName) {\n  var shapeSoundJSONPath = './audio/shapes/' + shapeName + '/' + shapeName + '.json';\n  return $.getJSON(shapeSoundJSONPath).then(function (resp) {\n    var shapeSoundData = formatShapeSoundData(shapeName, resp);\n    var sound = new Howl(shapeSoundData);\n    return {\n      shapeName: shapeName,\n      sound: sound\n    };\n  });\n}\n\nfunction asyncInitShapeSounds() {\n  var returnSounds = {};\n  var extensions = ['ogg', 'm4a', 'mp3', 'ac3'];\n\n  var shapeNames = shape.shapeNames;\n  var promises = [];\n  Base.each(shapeNames, function (shapeName) {\n    promises.push(asyncGetShapeSoundFromShapeName(shapeName));\n  });\n\n  return $.when.apply($, promises).done(function () {\n    var returnSounds = {};\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      returnSounds[arg.shapeName] = arg.sound;\n    }\n\n    window.kan.shapeSounds = returnSounds;\n    return returnSounds;\n  });\n}\n\nfunction formatShapeSoundData(shapeName, data) {\n  var returnData = {};\n\n  returnData.src = data.urls.map(function (url) {\n    return './audio/shapes/' + shapeName + '/' + url;\n  });\n  returnData.sprite = data.sprite;\n  returnData.html5 = true;\n  returnData.loop = false;\n\n  return returnData;\n}\n\nfunction quantizeLength(duration) {\n  var smallestDuration = 60 / bpm;\n  var returnDuration = Math.floor(duration / smallestDuration) * smallestDuration;\n\n  if (returnDuration > 0) {\n    return returnDuration;\n  } else {\n    // always return something greater than zero\n    return smallestDuration;\n  }\n}\n\nfunction quantizePosition(position, viewWidth) {\n  var smallestInterval = viewWidth / (4 * measures);\n  return returnPosition = Math.floor(position / smallestInterval) * smallestInterval;\n}\n\nfunction animateShapePlay(shape) {\n  var item = paper.project.getItem({\n    className: 'Path',\n    match: function match(el) {\n      return el.id === shape.pathId;\n    }\n  });\n  if (!!item) {\n    var group = item.parent;\n    group.data.animating = true;\n    var totalDuration = measureLength / 2;\n    group.animate([{\n      properties: {\n        scale: 1,\n        rotate: -5\n      },\n      settings: {\n        duration: totalDuration / 4,\n        easing: \"easeInOut\"\n      }\n    }, {\n      properties: {\n        scale: 1.15,\n        rotate: 5\n      },\n      settings: {\n        duration: totalDuration / 2,\n        easing: \"easeInOut\"\n      }\n    }, {\n      properties: {\n        scale: 1,\n        rotate: 0\n      },\n      settings: {\n        duration: totalDuration / 4,\n        easing: \"easeInOut\",\n        complete: function complete() {\n          this.data.animating = false;\n          // console.log('animation step 3')\n        }\n      }\n    }]);\n  }\n}\n\nfunction removeShapeFromComposition(shapeGroup) {\n  var _loop = function _loop(i) {\n    var sound = window.kan.composition[i];\n\n    if ('groupId' in sound) {\n      if (sound.groupId === shapeGroup.id) {\n        window.kan.composition.splice(i, 1);\n        return {\n          v: void 0\n        };\n      }\n    } else if ('pathId' in sound) {\n      var item = getItems({\n        match: function match(el) {\n          return el.id === sound.pathId;\n        }\n      });\n      if (item.length > 0) {\n        if (!!item.parent && item.parent.className === 'Group' && item.parent.id === shapeGroup.id) {\n          window.kan.composition.splice(i, 1);\n          return {\n            v: void 0\n          };\n        }\n      }\n    }\n  };\n\n  for (var i = 0; i < window.kan.composition.length; i++) {\n    var _ret = _loop(i);\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n}\n\nfunction clearSoundTimeouts() {\n  if (window.kan.soundTimeouts.length > 0) {\n    window.kan.soundTimeouts.forEach(function (soundTimeout) {\n      clearTimeout(soundTimeout);\n    });\n  }\n\n  window.kan.soundTimeouts = [];\n}\n\nfunction startComposition(composition) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  stopComposition();\n  tutorial.hideContextualTuts();\n\n  clearTimeout(window.kan.playPromptTimeout);\n\n  var iterations = 0;\n  playCompositionFirstTime();\n\n  function playCompositionFirstTime() {\n    clearSoundTimeouts();\n    // console.log('playing composition first time');\n    var trimmedCompositionObj = getTrimmedCompositionObj(composition);\n\n    Base.each(trimmedCompositionObj.composition, function (shape, i) {\n      var soundTimeout = setTimeout(function () {\n        if (!window.kan.playing) {\n          // console.log('not playing, returning');\n          return;\n        }\n\n        if (shape.spriteName === null) {\n          // console.log('%cshape is null', 'color:red', shape);\n          return;\n        }\n\n        // console.log('playing: ', shape.sound, shape.spriteName, shape.startTime);\n        shape.sound.play(shape.spriteName);\n        animateShapePlay(shape);\n      }, shape.startTime);\n      window.kan.soundTimeouts.push(soundTimeout);\n    });\n\n    iterations++;\n    window.kan.compositionTimeout = setTimeout(repeatComposition, compositionLength - trimmedCompositionObj.startTime);\n  }\n\n  function playCompositionOnce() {\n    clearSoundTimeouts();\n    // console.log('repeat');\n    Base.each(composition, function (shape, i) {\n      var soundTimeout = setTimeout(function () {\n        if (!window.kan.playing) {\n          // console.log('not playing, returing');\n          return;\n        }\n\n        // console.log('playing: ', shape.sound, shape.spriteName, shape.startTime);\n        shape.sound.play(shape.spriteName);\n        animateShapePlay(shape);\n      }, shape.startTime);\n      window.kan.soundTimeouts.push(soundTimeout);\n    });\n    iterations++;\n  }\n\n  function repeatComposition() {\n    if (loop === true) {\n      playCompositionOnce();\n      window.kan.compositionInterval = setInterval(playCompositionOnce, compositionLength);\n    } else {\n      if (iterations < 2) {\n        playCompositionOnce();\n        setTimeout(repeatComposition, compositionLength);\n      } else {\n        stopPlaying();\n        overlays.openOverlay('share-prompt');\n      }\n    }\n  }\n}\n\nfunction playComposition() {\n  var composition = window.kan.composition;\n  clearSoundTimeouts();\n  // console.log('repeat');\n  Base.each(composition, function (shape, i) {\n    var soundTimeout = setTimeout(function () {\n      // console.log('playing: ', shape.sound, shape.spriteName, shape.startTime);\n      shape.sound.play(shape.spriteName);\n      animateShapePlay(shape);\n    }, shape.startTime);\n    window.kan.soundTimeouts.push(soundTimeout);\n  });\n}\n\nfunction stopComposition() {\n  clearInterval(window.kan.compositionInterval);\n  clearTimeout(window.kan.compositionTimeout);\n  clearSoundTimeouts();\n}\n\nfunction getTrimmedCompositionObj(composition) {\n  var firstTime = 0;\n  var trimmedComposition = [];\n  var startTime = getCompositionStartTime(composition);\n\n  composition.forEach(function (sound) {\n    var modifiedSound = util.shallowCopy(sound);\n    modifiedSound.startTime = sound.startTime - startTime;\n    if (modifiedSound.startTime < 0) modifiedSound.startTime = 0; // this shouldn't happen\n    trimmedComposition.push(modifiedSound);\n  });\n\n  return {\n    composition: trimmedComposition,\n    startTime: startTime\n  };\n}\n\nfunction getCompositionStartTime(composition) {\n  var startTime = compositionLength;\n\n  composition.forEach(function (sound) {\n    // console.log(sound);\n    // console.log(sound.startTime)\n    if ('startTime' in sound && sound.startTime < startTime) {\n      startTime = sound.startTime;\n    }\n  });\n\n  // console.log('start time', startTime);\n\n  if (startTime !== compositionLength) {\n    return startTime;\n  } else {\n    return 0;\n  }\n}\n\n},{\"./color\":5,\"./overlays\":8,\"./shape\":9,\"./tutorial\":14,\"./ui\":15,\"./util\":16,\"howler\":3}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.preventInactivityTimeout = preventInactivityTimeout;\nvar overlays = require('./overlays');\nvar video = require('./video');\nvar util = require('./util');\n\nvar $body = $('body');\n\nvar drawInactivityDelay = exports.drawInactivityDelay = 40 * 1000; // ms\nvar continueInactivityDelay = exports.continueInactivityDelay = 30 * 1000; // ms\nvar playPromptDelay = exports.playPromptDelay = 60 * 1000; // ms;\nvar inputDelay = exports.inputDelay = 100; // ms\nvar refreshCheckDelay = exports.refreshCheckDelay = 60 * 1000; // ms\nvar overlayDelay = exports.overlayDelay = 1000; // ms\n\nfunction init() {\n  if (window.location.hash.length > 0 && window.location.hash == '#dev') {\n    window.kan.overlays = false;\n    video.pauseVideo();\n    video.exitTutorialMode();\n  } else {\n    video.enterTutorialMode();\n  }\n}\n\nfunction preventInactivityTimeout() {\n  console.log('prevent timeout: ' + util.getTime());\n  // overlays.closeAndResetOverlays();\n\n  clearTimeout(window.kan.inactivityTimeout);\n  clearInterval(window.kan.continueCountdownInterval);\n\n  window.kan.inactivityTimeout = setTimeout(function () {\n    overlays.openOverlay('continue');\n  }, drawInactivityDelay);\n}\n\n},{\"./overlays\":8,\"./util\":16,\"./video\":17}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nrequire('hammerjs');\n\nvar config = require('./../../config');\nvar sound = require('./sound');\nvar color = require('./color');\nvar shape = require('./shape');\nvar util = require('./util');\nvar tutorial = require('./tutorial');\nvar timing = require('./timing');\nvar overlays = require('./overlays');\nvar ui = require('./ui');\n\nvar $body = $('body');\n\nvar hitOptions = {\n  segments: false,\n  stroke: true,\n  fill: true,\n  tolerance: 5\n};\n\nvar minShapeSize = 100;\nvar maxShapeLength = 5000;\nvar maxScaleFactor = 0.8;\n\nvar outerPath = void 0;\nvar sizes = [];\nvar size = void 0;\nvar cumSize = void 0;\nvar prevPoint = void 0;\n\nvar hammerTips = exports.hammerTips = void 0;\nvar hammerCanvas = exports.hammerCanvas = void 0;\n\nfunction init() {\n  exports.hammerTips = hammerTips = new Hammer.Manager(ui.tipsOverlay);\n  hammerTips.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_ALL }));\n  hammerTips.on('swipe', overlays.cardNavNext);\n\n  exports.hammerCanvas = hammerCanvas = new Hammer.Manager(ui.canvas);\n  hammerCanvas.add(new Hammer.Tap({ event: 'doubletap', taps: 2, interval: 400, time: 150, posThreshold: 50 }));\n  hammerCanvas.add(new Hammer.Tap({ event: 'singletap' }));\n  hammerCanvas.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n  hammerCanvas.add(new Hammer.Pinch());\n\n  hammerCanvas.get('doubletap').recognizeWith('singletap');\n  // hammerCanvas.get('singletap').requireFailure('doubletap');\n  hammerCanvas.get('pan').requireFailure('pinch');\n  hammerCanvas.get('pinch').requireFailure('pan');\n\n  // hammerCanvas.on('singletap', singleTap);\n  hammerCanvas.on('doubletap', doubleTap);\n\n  hammerCanvas.on('panstart', panStart);\n  hammerCanvas.on('panmove', panMove);\n  hammerCanvas.on('panend', panEnd);\n  // hammerCanvas.on('pancancel', panCancel);\n\n  hammerCanvas.on('pinchstart', pinchStart);\n  hammerCanvas.on('pinchmove', pinchMove);\n  hammerCanvas.on('pinchend', pinchEnd);\n  // hammerCanvas.on('pinchcancel', pinchCancel);\n}\n\nfunction enablePanAndPinchEvents() {\n  enablePanEvents();\n  enablePinchEvents();\n}\n\nfunction enableTapEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n  hammerCanvas.get('singletap').set({ enable: enable });\n  hammerCanvas.get('doubletap').set({ enable: enable });\n}\n\nfunction disableTapEvents() {\n  enableTapEvents(false);\n}\n\nfunction enablePanEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n\n  hammerCanvas.get('pan').set({ enable: enable });\n  // hammerCanvas.get('panstart').set({enable: enable});\n  // hammerCanvas.get('panmove').set({enable: enable});\n  // hammerCanvas.get('panend').set({enable: enable});\n}\n\nfunction disablePanEvents() {\n  enablePanEvents(false);\n}\n\nfunction enablePinchEvents() {\n  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  enable = enable === true;\n\n  hammerCanvas.get('pinch').set({ enable: enable });\n  // hammerCanvas.get('pinchstart').set({enable: enable});\n  // hammerCanvas.get('pinchmove').set({enable: enable});\n  // hammerCanvas.get('pinchend').set({enable: enable});\n}\n\nfunction disablePinchEvents() {\n  enablePinchEvents(false);\n}\n\nfunction singleTap(event) {\n  // console.log(event.target);\n  // event.preventDefault();\n  // if (!eventTargetIsOnCanvas(event)) return;\n  tutorial.hideContextualTuts();\n  // $(event.target).click();\n\n  // sound.stopPlaying();\n  // if (!eventTargetIsOnCanvas(event)) return;\n  // console.log(event);\n  // tutorial.hideContextualTuts();\n  //\n  // sound.stopPlaying();\n  //\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  if (hitResult) {\n    var item = hitResult.item;\n    // item.selected = !item.selected;\n    console.log(item);\n  }\n}\n\nfunction doubleTap(event) {\n  event.preventDefault();\n  // console.log('doubletap');\n\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  if (!eventTargetIsOnCanvas(event)) return;\n\n  if (hitResult) {\n    shape.toggleFill(hitResult.item);\n    tutorial.hideContextualTutByName('fill');\n  } else {\n    window.kan.pinchedGroup = null;\n    // console.log('hit no item');\n  }\n}\n\nfunction panStart(event) {\n  // console.log(event);\n  // console.log('panstart');\n  // paper.project.activeLayer.removeChildren(); // REMOVE\n  // event.preventDefault();\n  timing.preventInactivityTimeout();\n\n  if (!eventTargetIsOnCanvas(event)) {\n    window.kan.panning = false;\n    // check if tips modal is up\n    if ($body.hasClass('overlay-active tips-active')) {\n      // if so, go to next tip card\n      overlays.cardNavNext();\n    }\n    event.srcEvent.stopPropagation();\n    return;\n  }\n\n  window.kan.panning = true;\n  tutorial.hideContextualTuts();\n\n  hammerCanvas.off('panstart');\n  // hammerCanvas.get('pan').set({enable: false});\n  disablePinchEvents();\n  disableTapEvents();\n\n  // ignore other touch inputs\n  // if (window.kan.pinching) return;\n  // if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n  // if (event.changedPointers.length > 1) {\n  //   console.log('event.changedPointers > 1');\n  // }\n\n  sound.stopPlaying();\n\n  window.kan.prevAngle = Math.atan2(event.velocityY, event.velocityX);\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  outerPath = new Path();\n  outerPath.fillColor = window.kan.currentColor;\n  // outerPath.fillColor = new Color(0, 0.5);\n\n  sizes = [];\n\n  var shapePath = new Path({\n    strokeColor: window.kan.currentColor,\n    name: 'shapePath',\n    strokeWidth: 5,\n    visible: false,\n    strokeCap: 'round'\n  });\n\n  shapePath.add(point);\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    first: true\n  };\n\n  window.kan.shapePath = shapePath;\n}\n\nfunction panMove(event) {\n  // console.log('panmove');\n  // event.preventDefault();\n  if (!eventTargetIsOnCanvas(event)) {\n    event.srcEvent.stopPropagation();\n    return;\n  }\n  if (window.kan.panning !== true) return;\n\n  // don't let the user draw past the max length\n  if (window.kan.shapePath.length <= maxShapeLength) {\n    var pointer = event.center;\n    var point = new Point(pointer.x, pointer.y);\n\n    var angle = Math.atan2(event.velocityY, event.velocityX);\n    var prevAngle = window.kan.prevAngle;\n    var angleDelta = util.angleDelta(angle, prevAngle);\n    window.kan.prevAngle = angle;\n\n    while (sizes.length > 10) {\n      sizes.shift();\n    }\n    if (sizes.length > 0) {\n      var dist = prevPoint.getDistance(point);\n\n      // These are based on acceleration\n      size = Math.random() * 10; // This is just random variance\n\n      cumSize = 0;\n      for (var j = 0; j < sizes.length; j++) {\n        cumSize += sizes[j];\n      }\n      // const avgSize = ((cumSize / sizes.length) + size) / 2;\n      var avgSize = Math.max(5, (cumSize / sizes.length + size) / 2);\n\n      var halfPointX = (point.x + prevPoint.x) / 2;\n      var halfPointY = (point.y + prevPoint.y) / 2;\n      var halfPoint = new Point(halfPointX, halfPointY);\n\n      var topX = halfPoint.x + Math.cos(angle - Math.PI / 2) * avgSize;\n      var topY = halfPoint.y + Math.sin(angle - Math.PI / 2) * avgSize;\n      var top = new Point(topX, topY);\n\n      var bottomX = halfPoint.x + Math.cos(angle + Math.PI / 2) * avgSize;\n      var bottomY = halfPoint.y + Math.sin(angle + Math.PI / 2) * avgSize;\n      var bottom = new Point(bottomX, bottomY);\n\n      outerPath.add(top);\n      outerPath.insert(0, bottom);\n      outerPath.smooth();\n    } else {\n      size = 5;\n    }\n\n    sizes.push(size);\n    prevPoint = point;\n\n    window.kan.pathData[shape.stringifyPoint(point)] = {\n      point: point,\n      speed: Math.abs(event.overallVelocity),\n      angle: angle\n    };\n\n    window.kan.shapePath.add(point);\n  } else {\n    window.kan.shapePath.data.tooLong = true;\n  }\n\n  paper.view.draw();\n}\n\nfunction panEnd(event) {\n  // console.log('panend');\n  // event.preventDefault();\n  if (!eventTargetIsOnCanvas(event)) {\n    event.srcEvent.stopPropagation();\n    return;\n  }\n  if (window.kan.panning !== true) return;\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var transparent = color.transparent;\n  var colorName = color.getColorName(window.kan.currentColor);\n\n  var shapePath = window.kan.shapePath;\n\n  if (shapePath.length <= maxShapeLength) {\n    shapePath.add(point);\n  }\n  outerPath.visible = false;\n\n  if (shapePath.length < minShapeSize || shapePath.data && shapePath.data.tooLong === true) {\n    // console.log('path is too short');\n    shapePath.remove();\n    hammerCanvas.on('panstart', panStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n    window.kan.panning = false;\n    return;\n  }\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    last: true\n  };\n\n  var group = new Group();\n\n  var truedShape = shape.getTruedShape(shapePath);\n\n  // group.data.color = truedShape.strokeColor;\n  // console.log('currentGradient:', config.palette.gradients[window.kan.currentColor]);\n\n  var shapeSize = truedShape.strokeBounds;\n  var centerPoint = new Point(shapeSize.width / 2, shapeSize.height / 2);\n  var angle = util.rad(Math.random() * 360);\n  var gradientSize = (shapeSize.width + shapeSize.height) / 4;\n  var originX = centerPoint.x + Math.cos(angle - Math.PI / 2) * gradientSize;\n  var originY = centerPoint.y + Math.sin(angle - Math.PI / 2) * gradientSize;\n  var destinationX = centerPoint.x + Math.cos(angle + Math.PI / 2) * gradientSize;\n  var destinationY = centerPoint.y + Math.sin(angle + Math.PI / 2) * gradientSize;\n\n  var origin = new Point(originX + shapeSize.x, originY + shapeSize.y);\n  var destination = new Point(destinationX + shapeSize.x, destinationY + shapeSize.y);\n  // group.addChild(new Path.Circle({\n  //   center: origin,\n  //   radius: 5,\n  //   fillColor: 'red',\n  // }));\n  // group.addChild(new Path.Circle({\n  //   center: destination,\n  //   radius: 5,\n  //   fillColor: 'green',\n  // }));\n  group.data.originalColor = window.kan.currentColor;\n  group.data.color = {\n    gradient: {\n      stops: config.palette.gradients[window.kan.currentColor]\n    },\n    origin: origin,\n    destination: destination\n  };\n  group.data.scale = 1; // init variable to track scale changes\n  group.data.rotation = 0; // init variable to track rotation changes\n  group.data.fresh = true;\n\n  shapePath.remove();\n  truedShape.visible = false;\n  truedShape.strokeColor = new Color(0, 0);\n  window.kan.shapePath = truedShape;\n  truedShape.name = 'shapePath';\n\n  if (!(truedShape.length > 0)) {\n    truedShape.remove();\n    group.remove();\n    window.kan.panning = false;\n    return;\n  }\n\n  group.addChild(truedShape);\n\n  var shapeSoundObj = sound.getShapeSoundObj(truedShape);\n  window.kan.composition.push(shapeSoundObj);\n\n  truedShape.visible = false;\n  var outlineGroup = shape.getOutlineGroup(truedShape);\n  var outline = outlineGroup._namedChildren.outer[0].clone();\n  outline.name = 'outer';\n  outline.fillColor = window.kan.currentColor;\n  outline.fillColor = group.data.color;\n\n  var outlineCenter = outlineGroup._namedChildren.middle[0].clone();\n  outlineCenter.strokeColor = group.data.color;\n  outlineCenter.visible = false;\n  group.addChild(outline);\n  outline.sendToBack();\n\n  outlineGroup.remove();\n\n  var shapeMask = outline.clone();\n  shapeMask.fillColor = outline.fillColor;\n  shapeMask.strokeColor = outline.strokeColor;\n  shapeMask.closed = true;\n\n  var enclosedLoops = shape.findInteriorCurves(outlineCenter);\n  if (enclosedLoops.length > 0 || truedShape.closed === true) {\n    group.data.line = false;\n  } else {\n    group.data.line = true;\n  }\n\n  enclosedLoops.forEach(function (loop) {\n    shapeMask.unite(loop);\n    shapeMask.sendToBack();\n    loop.name = 'loop';\n    loop.data.loop = true;\n    loop.visible = true;\n    group.addChild(loop);\n  });\n\n  shapeMask.unite();\n  var crossings = shapeMask.resolveCrossings();\n  if (!!crossings && !!crossings.children && crossings.children.length > 0) {\n    (function () {\n      var maxArea = 0,\n          maxChild = null;\n      crossings.children.forEach(function (child) {\n        if (child.area > maxArea) {\n          maxChild = child;\n          maxArea = child.area;\n        }\n      });\n\n      shapeMask = maxChild;\n    })();\n  }\n\n  outlineCenter.remove();\n  shapeMask.visible = false;\n  shapeMask.name = 'mask';\n  shapeMask.data.mask = true;\n  group.addChild(shapeMask);\n  shapeMask.sendToBack();\n\n  shape.cleanUpGroup(group);\n\n  window.kan.moves.push({\n    type: 'newGroup',\n    id: group.id\n  });\n\n  ui.unditherButtonsByName(['new', 'undo']);\n\n  if (window.kan.userHasDrawnFirstShape !== true) {\n    // first shape!\n    // set play prompt timeout\n    window.kan.playPromptTimeout = setTimeout(function () {\n      overlays.openOverlay('play-prompt');\n    }, timing.playPromptDelay);\n\n    window.kan.userHasDrawnFirstShape = true;\n  } else {\n    var groups = util.getAllGroups();\n    if (groups.length >= 3) {\n      $body.addClass(sound.playEnabledClass);\n      ui.unditherButtonsByName(['play-stop', 'share']);\n    }\n    // console.log(groups.length, $body.hasClass(sound.playEnabledClass));\n  }\n\n  if (config.runAnimations) {\n    var scaleFactor = 0.9;\n    group.animate([{\n      properties: {\n        scale: scaleFactor\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeOut\"\n      }\n    }, {\n      properties: {\n        scale: 1 / scaleFactor\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeIn\"\n      }\n    }]);\n  }\n\n  if (!tutorial.allTutsCompleted()) {\n    var tutorialCompletion = window.kan.tutorialCompletion;\n    var tutName = null;\n\n    if (!tutorialCompletion['fill'] && truedShape.closed) {\n      tutName = 'fill';\n    } else {\n      var _groups = paper.project.getItems({\n        match: function match(el) {\n          return el.className === 'Group';\n        }\n      });\n      if (!tutorialCompletion['pinch'] && _groups.length >= 3) {\n        tutName = 'pinch';\n      } else if (!tutorialCompletion['swipe'] && _groups.length >= 5) {\n        tutName = 'swipe';\n      }\n    }\n\n    if (tutName !== null) {\n      // console.log(`${tutName} tutorial`);\n      tutorial.addContextualTut(tutName);\n      window.kan.tutorialCompletion[tutName] = true;\n      group.data.tut = tutName;\n    }\n  }\n\n  if (window.kan.scheduledOverlay !== null) {\n    (function () {\n      var scheduledOverlay = window.kan.scheduledOverlay;\n      window.kan.scheduledOverlay = null;\n      setTimeout(function () {\n        overlays.openOverlay(scheduledOverlay);\n      }, timing.overlayDelay);\n    })();\n  }\n\n  // console.log('pan done');\n  hammerCanvas.set({ enable: false });\n  setTimeout(function () {\n    hammerCanvas.set({ enable: true });\n    console.log('touch enabled');\n    hammerCanvas.on('panstart', panStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n\n    window.kan.panning = false;\n  }, timing.inputDelay);\n\n  if (config.pop === true) {\n    shape.updatePops();\n  }\n}\n\nfunction panCancel(event) {\n  console.log('pancancel');\n  event.srcEvent.stopPropagation();\n  // event.preventDefault();\n\n  hammerCanvas.set({ enable: true });\n  hammerCanvas.on('panstart', panStart);\n  enablePanAndPinchEvents();\n  enableTapEvents();\n  window.kan.panning = false;\n}\n\nfunction pinchStart(event) {\n  // console.log('pinchstart');\n  timing.preventInactivityTimeout();\n  tutorial.hideContextualTuts();\n  window.kan.interacting = true;\n  window.kan.pinching = true;\n  // event.preventDefault();\n\n  // hammerCanvas.get('pinchstart').set({enable: false});\n  hammerCanvas.off('pinchstart');\n  disablePanEvents();\n  disableTapEvents();\n\n  if (!eventTargetIsOnCanvas(event)) return;\n\n  sound.stopPlaying();\n\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = shape.hitTestGroupBounds(point);\n\n  if (hitResult) {\n    window.kan.pinching = true;\n    window.kan.pinchedGroup = hitResult;\n    window.kan.lastScale = 1;\n    window.kan.lastRotation = event.rotation;\n\n    window.kan.originalPosition = hitResult.position;\n    window.kan.originalRotation = hitResult.data.rotation;\n    window.kan.originalScale = hitResult.data.scale;\n    hitResult.data.thrown = false;\n\n    if (config.pop === true) {\n      shape.destroyGroupPops(hitResult);\n    }\n\n    hitResult.bringToFront();\n\n    if (hitResult.data.tut && hitResult.data.tut.length > 0) {\n      var $tut = $('.tut[data-tut-type=\\'' + hitResult.data.tut + '\\']');\n      if ($tut) {\n        window.kan.pinchedTut = $tut;\n      } else {\n        window.kan.pinchedTut = null;\n      }\n    } else {\n      window.kan.pinchedTut = null;\n    }\n\n    // if (config.runAnimations) {\n    //   hitResult.animate({\n    //     properties: {\n    //       scale: 1.25\n    //     },\n    //     settings: {\n    //       duration: 100,\n    //       easing: \"easeOut\",\n    //     }\n    //   });\n    // }\n  } else {\n    window.kan.pinchedGroup = null;\n    window.kan.pinchedTut = null;\n    // console.log('hit no item');\n  }\n}\n\nfunction pinchMove(event) {\n  // console.log('pinchMove');\n  // event.preventDefault();\n\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var pinchedGroup = window.kan.pinchedGroup;\n  var $pinchedTut = window.kan.pinchedTut;\n\n  if (!!pinchedGroup) {\n    var currentScale = event.scale;\n    var scaleDelta = void 0;\n\n    tutorial.hideContextualTutByName('pinch');\n\n    if (pinchedGroup.bounds.width < minShapeSize || pinchedGroup.bounds.height < minShapeSize) {\n      // only allow a shape to scale down if it is larger than the minimum size\n      scaleDelta = 1.1;\n    } else if (pinchedGroup.bounds.width >= paper.view.viewSize.width || pinchedGroup.bounds.height >= paper.view.viewSize.height) {\n      // only allow shape to scale up if it fits in the viewport\n      scaleDelta = 0.9;\n    } else {\n      scaleDelta = currentScale / window.kan.lastScale;\n    }\n\n    window.kan.lastScale = currentScale;\n\n    var currentRotation = event.rotation;\n    var rotationDelta = currentRotation - window.kan.lastRotation;\n    window.kan.lastRotation = currentRotation;\n\n    // console.log(`scaling by ${scaleDelta}`);\n    // console.log(`rotating by ${rotationDelta}`);\n\n    var centerPoint = event.center;\n    pinchedGroup.position = centerPoint;\n    if (!!$pinchedTut) {\n      tutorial.moveContextualTut($pinchedTut, centerPoint);\n    }\n\n    if (scaleDelta !== 1) {\n      pinchedGroup.scale(scaleDelta);\n\n      // check if scaling went awry, cannot be too big or too small\n      // hypotenuse must fit within view bounds\n      var hypot = util.hypot(pinchedGroup.bounds.width, pinchedGroup.bounds.height);\n      var viewHypot = util.hypot(paper.view.viewSize.width, paper.view.viewSize.height);\n      if (hypot >= viewHypot) {\n        // shape is too big, bring it back down to size\n        scaleDelta = viewHypot * maxScaleFactor / hypot;\n        pinchedGroup.scale(scaleDelta);\n      } else if (hypot <= minShapeSize) {\n        scaleDelta = minShapeSize / hypot;\n        pinchedGroup.scale(scaleDelta);\n      }\n    }\n    pinchedGroup.rotate(rotationDelta);\n\n    pinchedGroup.data.scale *= scaleDelta;\n    pinchedGroup.data.rotation += rotationDelta;\n  }\n}\n\nfunction pinchEnd(event) {\n  // event.preventDefault();\n\n  window.kan.lastEvent = event;\n  var pinchedGroup = window.kan.pinchedGroup;\n  var $pinchedTut = window.kan.pinchedTut;\n  var originalPosition = window.kan.originalPosition;\n  var originalRotation = window.kan.originalRotation;\n  var originalScale = window.kan.originalScale;\n\n  if (!!pinchedGroup) {\n    pinchedGroup.data.fresh = true;\n    var move = {\n      id: pinchedGroup.id,\n      type: 'transform'\n    };\n    if (pinchedGroup.position != originalPosition) {\n      move.position = originalPosition;\n    }\n\n    if (pinchedGroup.data.rotation != originalRotation) {\n      move.rotation = originalRotation - pinchedGroup.data.rotation;\n    }\n\n    if (pinchedGroup.data.scale != originalScale) {\n      move.scale = originalScale / pinchedGroup.data.scale;\n    }\n\n    if (pinchedGroup.children.length > 0 && pinchedGroup._namedChildren.shapePath && pinchedGroup._namedChildren.shapePath.length > 0) {\n      // update shapePath sound object if possible\n      sound.removeShapeFromComposition(pinchedGroup); // sound is now wrong\n\n      var shapePath = pinchedGroup._namedChildren.shapePath[0];\n      var shapeSoundObj = sound.getShapeSoundObj(shapePath);\n      window.kan.composition.push(shapeSoundObj);\n    }\n\n    window.kan.moves.push(move);\n\n    if (Math.abs(event.velocity) > 1) {\n      tutorial.hideContextualTutByName('swipe');\n\n      // hide any connected tuts\n      if (!!$pinchedTut) {\n        tutorial.hideContextualTut($pinchedTut);\n      }\n      // dispose of group offscreen\n      if (config.pop === true) {\n        shape.destroyGroupPops(pinchedGroup);\n        pinchedGroup.data.fresh = false;\n      }\n\n      pinchedGroup.data.thrown = true;\n      throwPinchedGroup();\n    }\n\n    // if (config.runAnimations) {\n    //   pinchedGroup.animate({\n    //     properties: {\n    //       scale: 0.8\n    //     },\n    //     settings: {\n    //       duration: 100,\n    //       easing: \"easeOut\",\n    //     }\n    //   });\n    // }\n  } else {\n    window.kan.pinchedGroup = null;\n  }\n\n  // if an overlay was interrupted, open it up now\n  if (window.kan.scheduledOverlay !== null) {\n    (function () {\n      var scheduledOverlay = window.kan.scheduledOverlay;\n      window.kan.scheduledOverlay = null;\n      setTimeout(function () {\n        overlays.openOverlay(scheduledOverlay);\n      }, timing.overlayDelay);\n    })();\n  }\n\n  window.kan.pinching = false;\n\n  if (config.pop === true) {\n    shape.updatePops();\n  }\n\n  // console.log('pinch done');\n  // hammerCanvas.set({ enable: false });\n  setTimeout(function () {\n    console.log('touch enabled');\n    hammerCanvas.on('pinchstart', pinchStart);\n    enablePanAndPinchEvents();\n    enableTapEvents();\n    // hammerCanvas.set({ enable: true });\n    // hammerCanvas.on('pinchstart', pinchStart);\n    // enablePanAndPinchEvents();\n    // enableTapEvents();\n    // window.kan.pinching = false;\n    // window.kan.pinchedGroup = null;\n  }, timing.inputDelay);\n}\n\nfunction pinchCancel(event) {\n  // console.log(event);\n  event.srcEvent.stopPropagation();\n  console.log('pinchcancel');\n  // event.preventDefault();\n\n  hammerCanvas.set({ enable: true });\n  hammerCanvas.on('pinchstart', pinchStart);\n  enablePanAndPinchEvents();\n  enableTapEvents();\n\n  window.kan.pinching = false;\n}\n\nfunction throwPinchedGroup() {\n\n  var velocityMultiplier = 25;\n  var lastEvent = window.kan.lastEvent;\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var pinchedGroup = window.kan.pinchedGroup;\n\n  if (pinchedGroup === null || pinchedGroup.data && pinchedGroup.data.thrown === false) return;\n  if (pinchedGroup.position.x <= 0 - pinchedGroup.bounds.width || pinchedGroup.position.x >= viewWidth + pinchedGroup.bounds.width || pinchedGroup.position.y <= 0 - pinchedGroup.bounds.height || pinchedGroup.position.y >= viewHeight + pinchedGroup.bounds.height) {\n    pinchedGroup.data.offScreen = true;\n    pinchedGroup.visible = false;\n    sound.removeShapeFromComposition(pinchedGroup);\n    window.kan.pinchedGroup = null;\n    return;\n  }\n  requestAnimationFrame(throwPinchedGroup);\n  var newX = pinchedGroup.position.x + lastEvent.velocityX * velocityMultiplier;\n  var newY = pinchedGroup.position.y + lastEvent.velocityY * velocityMultiplier;\n  var newPos = new Point(newX, newY);\n  pinchedGroup.position = newPos;\n}\n\nfunction eventTargetIsOnCanvas(event) {\n  if (!event) return false;\n  if (event.target != ui.canvas) return false;\n  return true;\n}\n\n},{\"./../../config\":1,\"./color\":5,\"./overlays\":8,\"./shape\":9,\"./sound\":11,\"./timing\":12,\"./tutorial\":14,\"./ui\":15,\"./util\":16,\"hammerjs\":2}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTutByName = getTutByName;\nexports.allTutsCompleted = allTutsCompleted;\nexports.addContextualTut = addContextualTut;\nexports.hideContextualTut = hideContextualTut;\nexports.hideContextualTutByName = hideContextualTutByName;\nexports.hideContextualTuts = hideContextualTuts;\nexports.resetContextualTuts = resetContextualTuts;\nexports.moveContextualTut = moveContextualTut;\nexports.getTutPositionFromCenter = getTutPositionFromCenter;\nvar config = require('./../../config');\n\nvar contextualTuts = config.contextualTuts;\nvar tutArrowHeight = 16;\n\nfunction getTutByName(tutName) {\n  for (var i = 0; i < contextualTuts.length; i++) {\n    var tutObj = contextualTuts[i];\n\n    if (tutObj.type === tutName) {\n      return tutObj.copy;\n    }\n  }\n\n  return null;\n}\n\nfunction allTutsCompleted() {\n  var tutorialCompletionObj = window.kan.tutorialCompletion;\n  var completion = true;\n\n  Object.keys(tutorialCompletionObj).forEach(function (key, val) {\n    completion = completion && tutorialCompletionObj[key];\n  });\n\n  return completion === true;\n}\n\nfunction addContextualTut(tutName) {\n  if (!!window.kan.shapePath && window.kan.shapePath.length > 0) {\n    hideContextualTuts();\n    window.kan.shapesSinceTut = 0;\n\n    var shapePath = window.kan.shapePath;\n    var shapeCenter = shapePath.bounds.center;\n\n    var tutCopy = getTutByName(tutName);\n\n    if (tutCopy !== null) {\n      var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n      if ($tut.length > 0) {\n        var tutPos = getTutPositionFromCenter($tut, shapeCenter);\n        $tut.css({ top: tutPos.y + 'px', left: tutPos.x + 'px', visibility: 'visible' });\n        $tut.addClass('animated bounceIn');\n      }\n    }\n  }\n}\n\nfunction hideContextualTut($tut) {\n  $tut.css({ visibility: 'hidden' });\n}\n\nfunction hideContextualTutByName(tutName) {\n  var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n  hideContextualTut($tut);\n}\n\nfunction hideContextualTuts() {\n  var $tuts = $('.contextual-tuts .tut');\n  $tuts.css({ visibility: 'hidden' });\n}\n\nfunction resetContextualTuts() {\n  hideContextualTuts();\n  window.kan.tutorialCompletion = {\n    \"fill\": false,\n    \"pinch\": false,\n    \"swipe\": false\n  };\n}\n\nfunction moveContextualTut($tut, centerPoint) {\n  var tutPos = getTutPositionFromCenter($tut, centerPoint);\n  $tut.css({ top: tutPos.y + 'px', left: tutPos.x + 'px' });\n}\n\nfunction getTutPositionFromCenter($tut, centerPoint) {\n  var tutWidth = $tut.outerWidth();\n  var tutHeight = $tut.outerHeight();\n  var leftPos = centerPoint.x - tutWidth / 2;\n  var topPos = centerPoint.y - tutHeight - tutArrowHeight;\n  return new Point(leftPos, topPos);\n}\n\n},{\"./../../config\":1}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.ditherButtonsByName = ditherButtonsByName;\nexports.unditherButtonsByName = unditherButtonsByName;\nexports.ditherButtonByName = ditherButtonByName;\nexports.unditherButtonByName = unditherButtonByName;\nexports.resetCanvas = resetCanvas;\nvar config = require('./../../config');\n\nvar sound = require('./sound');\nvar tutorial = require('./tutorial');\nvar overlays = require('./overlays');\nvar util = require('./util');\nvar color = require('./color');\nvar shape = require('./shape');\nvar share = require('./share');\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar playingClass = sound.playingClass;\nvar playEnabledClass = sound.playEnabledClass;\n\nvar $newButton = $('.controls .new');\nvar $undoButton = $('.controls .undo');\nvar $playButton = $('.controls .play-stop');\nvar $shareButton = $('.controls .share');\nvar $tipsButton = $('.controls .tips');\n\nvar canvas = exports.canvas = $('#canvas')[0];\nvar tipsOverlay = exports.tipsOverlay = $('.overlay.tips')[0];\n\nvar ditheredClass = 'dithered';\n\nfunction init() {\n  initLogoRefresh();\n  initColorPalette();\n  initNewButton();\n  initUndoButton();\n  initPlayButton();\n  initTipsButton();\n  initShareButton();\n  initContextualTuts();\n  resetCanvas();\n}\n\nfunction unditherAllButtons() {\n  $('.controls .' + ditheredClass).removeClass(ditheredClass);\n}\n\nfunction ditherButtonsByName(buttonNames) {\n  var undither = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (buttonNames.length > 0) {\n    if ($.isArray(buttonNames)) {\n      buttonNames.forEach(function (name) {\n        return ditherButtonByName(name, undither);\n      });\n    } else {\n      ditherButtonByName(buttonNames, undither);\n    }\n  }\n}\n\nfunction unditherButtonsByName(buttonNames) {\n  ditherButtonsByName(buttonNames, true);\n}\n\nfunction ditherButtonByName(buttonName) {\n  var undither = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var $button = $('.controls .' + buttonName);\n  // console.log($button);\n  if ($button.length > 0) {\n    if (undither !== true) {\n      $button.addClass(ditheredClass);\n    } else {\n      $button.removeClass(ditheredClass);\n    }\n  }\n}\n\nfunction unditherButtonByName(buttonName) {\n  ditherButtonByName(buttonName, true);\n}\n\nfunction unditherButtonsByName(buttonNames) {\n  ditherButtonsByName(buttonNames, true);\n}\n\nfunction newPressed() {\n  // console.log('new pressed');\n  window.kan.composition = [];\n  paper.project.activeLayer.removeChildren();\n  tutorial.hideContextualTuts();\n  ditherButtonsByName(['undo', 'new', 'play-stop', 'share']);\n  sound.stopPlaying();\n  // window.kan.userHasDrawnFirstShape = false;\n  // tutorial.resetContextualTuts();\n}\n\nfunction undoPressed() {\n  sound.stopPlaying();\n  tutorial.hideContextualTuts();\n\n  var transparent = new Color(0, 0);\n  // console.log('undo pressed');\n  if (!(window.kan.moves.length > 0)) {\n    // console.log('no moves yet');\n    window.kan.userHasDrawnFirstShape = false;\n    return;\n  }\n\n  var lastMove = window.kan.moves.pop();\n  var item = project.getItem({\n    id: lastMove.id\n  });\n\n  if (item) {\n    item.visible = true; // make sure\n    switch (lastMove.type) {\n      case 'newGroup':\n        // console.log('removing group');\n        sound.removeShapeFromComposition(item);\n        util.clearGroupPops(item);\n        item.remove();\n\n        var numGroups = util.getNumGroups();\n        // console.log('numGroups', numGroups);\n\n        if (numGroups <= 0) {\n          ditherButtonsByName(['undo', 'new']);\n        }\n\n        if (numGroups < 3) {\n          ditherButtonsByName(['play-stop', 'share']);\n          $body.removeClass(sound.playEnabledClass);\n        } else {\n          unditherButtonsByName(['play-stop', 'share']);\n          $body.addClass(sound.playEnabledClass);\n        }\n        break;\n      case 'fillChange':\n        if (lastMove.transparent) {\n          item.fillColor = lastMove.fill;\n          item.strokeColor = lastMove.fill;\n        } else {\n          item.fillColor = transparent;\n          item.strokeColor = transparent;\n        }\n      case 'transform':\n        item.data.fresh = true;\n        if (!!lastMove.position) {\n          item.position = lastMove.position;\n          if (item.data && item.data.tut && item.data.tut.length > 0) {\n            // item has connected contextual tut, move it to the right place\n            var $tut = $('.tut[data-tut-type=\\'' + tutName + '\\']');\n            tutorial.moveContextualTut($tut, lastMove.position);\n          }\n        }\n        if (!!lastMove.rotation) {\n          item.rotation = lastMove.rotation;\n        }\n        if (!!lastMove.scale) {\n          item.scale(lastMove.scale);\n        }\n        if (config.pop === true) {\n          shape.updatePops();\n        }\n        break;\n      default:\n      // console.log('unknown case');\n    }\n  } else {\n      // console.log('could not find matching item');\n    }\n}\n\nfunction playPressed() {\n  // console.log('play pressed');\n  // sound.stopComposition();\n  // overlays.closeAndResetOverlays();\n  // tutorial.hideContextualTuts();\n  var playing = window.kan.playing;\n  // console.log(playing, util.getNumGroups() > 2, !playing && util.getNumGroups() > 2, $body);\n\n  clearTimeout(window.kan.playPromptTimeout);\n  if (!playing && util.getNumGroups() > 2) {\n    // console.log('starting playing');\n    sound.startPlaying();\n  } else {\n    // console.log('stopping playing');\n    sound.stopPlaying(true);\n  }\n}\n\nfunction tipsPressed() {\n  sound.stopPlaying();\n  overlays.openOverlay('tips');\n  // console.log('tips pressed');\n}\n\nfunction sharePressed() {\n  share.record();\n  // console.log('share pressed');\n  // sound.stopPlaying();\n  // if ($body.hasClass(sound.playEnabledClass)) {\n  //   overlays.openOverlay('share');\n  // }\n}\n\nfunction initLogoRefresh() {\n  $('.main-logo').on(tapEvent, function () {\n    location.reload();\n  });\n}\n\nfunction initColorPalette() {\n  var $paletteWrap = $('ul.palette-colors');\n  var $paletteColors = $paletteWrap.find('li');\n  var paletteColorSize = 20;\n  var paletteSelectedColorSize = 30;\n  var paletteSelectedClass = 'palette-selected';\n\n  // hook up click\n  $paletteColors.on('click tap touch', function () {\n    if (!$body.hasClass(playingClass)) {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n        // console.log('%ccolor', 'color:red', color.getColorName(window.kan.currentColor));\n      }\n    };\n  });\n}\n\nfunction initNewButton() {\n  $('.main-controls .new').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      newPressed();\n    }\n  });\n}\n\nfunction initUndoButton() {\n  $('.main-controls .undo').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      undoPressed();\n    }\n  });\n}\n\nfunction initPlayButton() {\n  $('.main-controls .play-stop .play').on(tapEvent, sound.startPlaying);\n  $('.main-controls .play-stop .stop').on(tapEvent, sound.stopPlaying);\n}\n\nfunction initTipsButton() {\n  $('.controls .tips').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      tipsPressed();\n    }\n  });\n}\n\nfunction initShareButton() {\n  $('.controls .share').on(tapEvent, sharePressed);\n}\n\nfunction initContextualTuts() {\n  var $tuts = $('.contextual-tuts .tut');\n  $tuts.on(tapEvent, function () {\n    $(this).css({ visibility: 'hidden' });\n  });\n}\n\nfunction resetCanvas() {\n  paper.project.clear();\n\n  // add random background\n  paper.project.activeLayer.name = 'background';\n  var numCanvasses = 10;\n  var randomCanvasIndex = Math.round(Math.random() * (numCanvasses - 1)) + 1; // [1, numCanvasses]\n  var canvasBg = new Raster('canvas-' + randomCanvasIndex);\n  canvasBg.name = 'canvasBg';\n  canvasBg.position = paper.view.center;\n\n  // add canvas layer\n  var scaleFactorHorizontal = paper.view.viewSize.width / canvasBg.size.width;\n  var scaleFactorVertical = paper.view.viewSize.height / canvasBg.size.height;\n  canvasBg.scale(Math.max(scaleFactorHorizontal, scaleFactorVertical));\n  var layer = new Layer(); // init new layer that all other shapes will be drawn upon\n  paper.project.activeLayer.name = 'canvas';\n}\n\n},{\"./../../config\":1,\"./color\":5,\"./overlays\":8,\"./shape\":9,\"./share\":10,\"./sound\":11,\"./tutorial\":14,\"./util\":16}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.hypot = hypot;\nexports.angleDelta = angleDelta;\nexports.delta = delta;\nexports.getTime = getTime;\nexports.getAllGroups = getAllGroups;\nexports.anyShapesOnCanvas = anyShapesOnCanvas;\nexports.getNumGroups = getNumGroups;\nexports.getFreshGroups = getFreshGroups;\nexports.getAllPops = getAllPops;\nexports.clearGroupPops = clearGroupPops;\nexports.getGroupPops = getGroupPops;\nexports.getPopCandidates = getPopCandidates;\nexports.setSha = setSha;\nexports.shallowCopy = shallowCopy;\nexports.randomPick = randomPick;\nvar config = require('./../../config');\n\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\nfunction hypot(a, b) {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)); // pythagorean!\n}\n\n// returns absolute value of the delta of two angles in radians\nfunction angleDelta(x, y) {\n  return Math.abs(Math.atan2(Math.sin(y - x), Math.cos(y - x)));;\n}\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\nfunction getTime() {\n  return new Date().toLocaleTimeString();\n}\n\nfunction getAllGroups() {\n  return paper.project.getItems({\n    className: 'Group'\n  });\n}\n\nfunction anyShapesOnCanvas() {\n  var groups = getAllGroups();\n  return groups.length > 0;\n}\n\nfunction getNumGroups() {\n  var groups = getAllGroups();\n  // console.log('numgroups', groups.length);\n  return groups.length;\n}\n\nfunction getFreshGroups() {\n  return paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return el.data && el.data.line === false && el.data.fresh === true;\n    }\n  });\n}\n\nfunction getAllPops() {\n  return paper.project.getItems({\n    match: function match(el) {\n      return el.data && el.data.pop === true;\n    }\n  });\n}\n\nfunction clearGroupPops(group) {\n  var pops = getGroupPops(group);\n  pops.forEach(function (pop) {\n    return pop.remove();\n  });\n}\n\nfunction getGroupPops(group) {\n  // console.log('group pop group', group.id, group);\n  var returnPops = [];\n\n  if (group.children.length > 0) {\n    var groupPops = group.getItems({\n      match: function match(el) {\n        return el.data && el.data.pop === true;\n      }\n    });\n    returnPops = returnPops.concat(groupPops);\n  }\n\n  var intersectingPops = paper.project.getItems({\n    match: function match(el) {\n      return el.data && el.data.pop === true && el.data.intersectingGroup === group.id;\n    }\n  });\n\n  if (intersectingPops.length > 0) {\n    returnPops = returnPops.concat(intersectingPops);\n  }\n\n  return returnPops;\n}\n\nfunction getPopCandidates() {\n  return paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return el.data && el.data.line === false;\n    }\n  });\n}\n\nfunction setSha() {\n  $.get('/hash').done(function (res) {\n    console.log('current hash:', res);\n    window.kan.hash = res;\n  }).fail(function (e) {\n    console.error('error getting hash:', e);\n  });\n}\n\n// http://blog.soulserv.net/understanding-object-cloning-in-javascript-part-i/\nfunction shallowCopy(original) {\n  // First create an empty object with\n  // same prototype of our original source\n  var clone = Object.create(Object.getPrototypeOf(original));\n\n  var i,\n      keys = Object.getOwnPropertyNames(original);\n\n  for (i = 0; i < keys.length; i++) {\n    // copy each property into the clone\n    Object.defineProperty(clone, keys[i], Object.getOwnPropertyDescriptor(original, keys[i]));\n  }\n\n  return clone;\n}\n\nfunction randomPick(array) {\n  if (array.length > 0) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  return null;\n}\n\n},{\"./../../config\":1}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enterTutorialMode = enterTutorialMode;\nexports.exitTutorialMode = exitTutorialMode;\nexports.pauseVideo = pauseVideo;\nexports.playVideo = playVideo;\nvar config = require('./../../config');\n\nvar main = require('./main');\nvar overlays = require('./overlays');\nvar timing = require('./timing');\nvar ui = require('./ui');\nvar sound = require('./sound');\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar videoPlayingClass = exports.videoPlayingClass = 'video-playing';\n\nvar $videoWrapper = $body.find('#video-wrap');\nvar $video = $videoWrapper.find('video');\n\nfunction enterTutorialMode() {\n  console.log('entering tutorial mode');\n  playVideo();\n  $body.addClass(videoPlayingClass);\n  clearTimeout(window.kan.inactivityTimeout);\n  clearInterval(window.kan.continueCountdownInterval);\n  $body.off(tapEvent, timing.preventInactivityTimeout);\n  $body.on(tapEvent, exitTutorialMode);\n  main.resetWindow();\n  ui.resetCanvas();\n  window.kan.refreshCheckInterval = setInterval(function () {\n    $.get('/hash').done(function (res) {\n      if (res !== window.kan.hash) {\n        console.log('different hash, reloading');\n        location.reload();\n      }\n    }).fail(function (e) {\n      console.error('error getting hash:', e);\n    });\n  }, timing.refreshCheckDelay);\n}\n\nfunction exitTutorialMode() {\n  console.log('exiting tutorial mode');\n  sound.reinitShapeSounds().then(function () {\n    clearInterval(window.kan.refreshCheckInterval);\n    Howler.mute(false);\n    pauseVideo();\n    $body.off(tapEvent, exitTutorialMode);\n    $body.on(tapEvent, timing.preventInactivityTimeout);\n    $body.removeClass(videoPlayingClass);\n    clearTimeout(window.kan.inactivityTimeout);\n    clearInterval(window.kan.continueCountdownInterval);\n\n    overlays.openOverlay('intro');\n\n    window.kan.inactivityTimeout = setTimeout(function () {\n      overlays.openOverlay('continue');\n    }, timing.continueInactivityDelay);\n  }).fail(function (e) {\n    console.error('error initting shape sounds:', e);\n    location.reload();\n  });\n}\n\nfunction pauseVideo() {\n  $video.get(0).pause();\n}\n\nfunction playVideo() {\n  $video.get(0).play();\n}\n\n},{\"./../../config\":1,\"./main\":7,\"./overlays\":8,\"./sound\":11,\"./timing\":12,\"./ui\":15}]},{},[7])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}