{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","util","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","sizes","changedPointers","console","log","pointer","center","point","Point","x","y","bounds","Path","strokeColor","fillColor","name","middle","strokeWidth","add","panMove","preventDefault","overallVelocity","thisDist","parseInt","distance","cumDistance","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","threshold","cumSize","j","avgSize","Math","round","atan2","cos","PI","sin","insert","view","draw","push","panEnd","elasticity","group","Group","flatten","smooth","simplify","closed","intersections","getCrossings","pathCopy","copyContent","visible","dividedPath","resolveCrossings","enclosedLoops","findInteriorCurves","Color","data","interior","transparent","addChild","remove","color","lastChild","selected","runAnimations","animate","properties","scale","settings","duration","easing","doubleTap","hitResult","project","hitTest","hitOptions","item","parent","setup","$canvas","segments","stroke","fill","tolerance","hammerManager","Hammer","Manager","Pan","direction","DIRECTION_ALL","Tap","taps","get","recognizeWith","requireFailure","newPressed","activeLayer","removeChildren","undoPressed","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","deg","radians","p1","p2","sqrt","pow","path","interiorCurves","children","child","trueGroup","_namedChildren","middleCopy","Base","each","truePath","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n// require('paper-animate');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n  var runAnimations = true;\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var middle = void 0,\n        bounds = void 0;\n    var past = void 0;\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      // paper.project.activeLayer.removeChildren(); // REMOVE\n\n      sizes = [];\n\n      if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n      if (event.changedPointers.length > 1) {\n        console.log('event.changedPointers > 1');\n      }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      bounds = new Path({\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor,\n        name: 'bounds'\n      });\n\n      middle = new Path({\n        strokeColor: window.kan.currentColor,\n        name: 'middle',\n        strokeWidth: 1\n      });\n\n      bounds.add(point);\n      middle.add(point);\n    }\n\n    var threshold = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumDistance = 0;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n      console.log(event.overallVelocity);\n      var thisDist = parseInt(event.distance);\n      cumDistance += thisDist;\n\n      if (cumDistance < 100) {\n        console.log('ignoring');\n        return;\n      } else {\n        cumDistance = 0;\n        console.log('not ignoring');\n      }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n        size = threshold - size;\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        bounds.add(top);\n        bounds.insert(0, bottom);\n        // bounds.smooth();\n\n        middle.add(point);\n        // middle.smooth();\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      var group = new Group([bounds, middle]);\n\n      bounds.add(point);\n      bounds.flatten(4);\n      bounds.smooth();\n      bounds.simplify();\n      bounds.closed = true;\n\n      middle.add(point);\n      middle.flatten(4);\n      middle.smooth();\n      middle.simplify();\n\n      // util.trueGroup(group);\n\n      var intersections = middle.getCrossings();\n      if (intersections.length > 0) {\n        // we create a copy of the path because resolveCrossings() splits source path\n        var pathCopy = new Path();\n        pathCopy.copyContent(middle);\n        pathCopy.visible = false;\n\n        var dividedPath = pathCopy.resolveCrossings();\n        dividedPath.visible = false;\n\n        var enclosedLoops = util.findInteriorCurves(dividedPath);\n\n        if (enclosedLoops) {\n          for (var i = 0; i < enclosedLoops.length; i++) {\n            enclosedLoops[i].visible = true;\n            enclosedLoops[i].closed = true;\n            enclosedLoops[i].fillColor = new Color(0, 0); // transparent\n            enclosedLoops[i].data.interior = true;\n            enclosedLoops[i].data.transparent = true;\n            group.addChild(enclosedLoops[i]);\n          }\n        }\n        pathCopy.remove();\n      }\n\n      group.data.color = bounds.fillColor;\n      lastChild = group;\n      group.selected = true;\n\n      if (runAnimations) {\n        group.animate([{\n          properties: {\n            scale: 0.9\n          },\n          settings: {\n            duration: 100,\n            easing: \"easeOut\"\n          }\n        }, {\n          properties: {\n            scale: 1.11\n          },\n          settings: {\n            duration: 100,\n            easing: \"easeIn\"\n          }\n        }]);\n      }\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function doubleTap(event) {\n      var pointer = event.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions),\n          transparent = new Color(0, 0);\n\n      if (hitResult) {\n        var item = hitResult.item;\n        var parent = item.parent;\n\n        if (item.data.interior) {\n          console.log('interior');\n          item.data.transparent = !item.data.transparent;\n\n          if (item.data.transparent) {\n            item.fillColor = transparent;\n            item.strokeColor = transparent;\n          } else {\n            item.fillColor = parent.data.color;\n            item.strokeColor = parent.data.color;\n          }\n        } else {\n          console.log('not interior');\n        }\n      } else {\n        console.log('hit no item');\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function bounce(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    var hammerManager = new Hammer.Manager($canvas[0]);\n\n    hammerManager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n    hammerManager.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\n    hammerManager.add(new Hammer.Tap({ event: 'singletap' }));\n\n    hammerManager.on('panstart', panStart);\n    hammerManager.on('panmove', panMove);\n    hammerManager.on('panend', panEnd);\n\n    hammerManager.get('doubletap').recognizeWith('singletap');\n    hammerManager.get('singletap').requireFailure('doubletap');\n\n    hammerManager.on('singletap', function () {\n      console.log('singleTap');\n    });\n\n    hammerManager.on('doubletap', doubleTap);\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\nexports.findInteriorCurves = findInteriorCurves;\nexports.trueGroup = trueGroup;\nexports.truePath = truePath;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n// returns an array of the interior curves of a given compound path\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n\n  for (var i = 0; i < path.children.length; i++) {\n    var child = path.children[i];\n\n    if (child.closed) {\n      interiorCurves.push(new Path(child.segments));\n    }\n  }\n\n  path.remove();\n  return interiorCurves;\n}\n\nfunction trueGroup(group) {\n  var bounds = group._namedChildren.bounds[0],\n      middle = group._namedChildren.middle[0];\n\n  var middleCopy = new Path();\n  middleCopy.copyContent(middle);\n  middleCopy.visible = false;\n  var dividedPath = middleCopy.resolveCrossings();\n  dividedPath.visible = false;\n  Base.each(dividedPath.children, function (child, i) {\n    if (child.closed) {\n      child.selected = false;\n    } else {\n      child.selected = true;\n    }\n    console.log(child, i);\n  });\n}\n\nfunction truePath(path) {\n  console.log(group);\n  // if (path && path.children && path.children.length > 0 && path._namedChildren['middle']) {\n  //   let pathCopy = new Path();\n  //   console.log(path._namedChildren['middle']);\n  //   pathCopy.copyContent(path._namedChildren['middle']);\n  //   console.log(pathCopy);\n  // }\n}\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}