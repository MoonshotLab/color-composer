{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","util","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","sizes","pinching","changedPointers","console","log","pointer","center","point","Point","x","y","bounds","Path","strokeColor","fillColor","name","middle","strokeWidth","add","panMove","preventDefault","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","max","cumSize","j","avgSize","Math","round","atan2","cos","PI","sin","insert","min","view","draw","push","panEnd","elasticity","group","Group","flatten","smooth","simplify","closed","intersections","getCrossings","pathCopy","copyContent","visible","dividedPath","resolveCrossings","enclosedLoops","findInteriorCurves","Color","data","interior","transparent","addChild","sendToBack","remove","color","rotation","lastChild","MOVES","type","id","runAnimations","animate","properties","scale","settings","duration","easing","pinchStart","hammerManager","get","set","enable","hitResult","project","hitTest","hitOptions","pinchedGroup","item","parent","lastScale","lastRotation","pinchMove","currentScale","scaleDelta","currentRotation","rotationDelta","rotate","pinchEnd","setTimeout","doubleTap","fill","setup","$canvas","segments","stroke","tolerance","Hammer","Manager","Tap","taps","Pan","direction","DIRECTION_ALL","Pinch","recognizeWith","requireFailure","newPressed","activeLayer","removeChildren","undoPressed","lastMove","pop","getItem","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","deg","radians","p1","p2","sqrt","pow","path","interiorCurves","children","child","trueGroup","_namedChildren","middleCopy","Base","each","selected","truePath","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n// require('paper-animate');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n  var runAnimations = true;\n  var transparent = new Color(0, 0);\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var middle = void 0,\n        bounds = void 0;\n    var past = void 0;\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      // paper.project.activeLayer.removeChildren(); // REMOVE\n\n      sizes = [];\n\n      if (pinching) return;\n      if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n      if (event.changedPointers.length > 1) {\n        console.log('event.changedPointers > 1');\n      }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      bounds = new Path({\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor,\n        name: 'bounds'\n      });\n\n      middle = new Path({\n        strokeColor: window.kan.currentColor,\n        name: 'middle',\n        strokeWidth: 1\n      });\n\n      bounds.add(point);\n      middle.add(point);\n    }\n\n    var min = 0;\n    var max = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumDistance = 0;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n      if (pinching) return;\n      // console.log(event.overallVelocity);\n      // let thisDist = parseInt(event.distance);\n      // cumDistance += thisDist;\n      //\n      // if (cumDistance < 100) {\n      //   console.log('ignoring');\n      //   return;\n      // } else {\n      //   cumDistance = 0;\n      //   console.log('not ignoring');\n      // }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        if (size >= max) size = max;\n        // size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n        // size = max - size;\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        bounds.add(top);\n        bounds.insert(0, bottom);\n        // bounds.smooth();\n\n        middle.add(point);\n        // middle.smooth();\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n      if (pinching) return;\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      var group = new Group([bounds, middle]);\n\n      bounds.add(point);\n      bounds.flatten(4);\n      bounds.smooth();\n      bounds.simplify();\n      bounds.closed = true;\n\n      middle.add(point);\n      middle.flatten(4);\n      middle.smooth();\n      middle.simplify();\n\n      // util.trueGroup(group);\n\n      var intersections = middle.getCrossings();\n      if (intersections.length > 0) {\n        // we create a copy of the path because resolveCrossings() splits source path\n        var pathCopy = new Path();\n        pathCopy.copyContent(middle);\n        pathCopy.visible = false;\n\n        var dividedPath = pathCopy.resolveCrossings();\n        dividedPath.visible = false;\n\n        var enclosedLoops = util.findInteriorCurves(dividedPath);\n\n        if (enclosedLoops) {\n          for (var i = 0; i < enclosedLoops.length; i++) {\n            enclosedLoops[i].visible = true;\n            enclosedLoops[i].closed = true;\n            enclosedLoops[i].fillColor = new Color(0, 0); // transparent\n            enclosedLoops[i].data.interior = true;\n            enclosedLoops[i].data.transparent = true;\n            // enclosedLoops[i].blendMode = 'multiply';\n            group.addChild(enclosedLoops[i]);\n            enclosedLoops[i].sendToBack();\n          }\n        }\n        pathCopy.remove();\n      } else {\n        console.log('no intersections');\n      }\n\n      group.data.color = bounds.fillColor;\n      console.log(group.rotation);\n      lastChild = group;\n      // group.selected = true;\n\n      MOVES.push({\n        type: 'newGroup',\n        id: group.id\n      });\n\n      if (runAnimations) {\n        group.animate([{\n          properties: {\n            scale: 0.9\n          },\n          settings: {\n            duration: 100,\n            easing: \"easeOut\"\n          }\n        }, {\n          properties: {\n            scale: 1.11\n          },\n          settings: {\n            duration: 100,\n            easing: \"easeIn\"\n          }\n        }]);\n      }\n    }\n\n    var pinching = void 0;\n    var pinchedGroup = void 0,\n        lastScale = void 0,\n        lastRotation = void 0;\n    function pinchStart(event) {\n      console.log('pinchstart', event);\n      hammerManager.get('pan').set({ enable: false });\n      var pointer = event.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions);\n\n      if (hitResult) {\n        pinching = true;\n        pinchedGroup = hitResult.item.parent;\n        lastScale = pinchedGroup.scale;\n        lastRotation = pinchedGroup.rotation;\n        if (runAnimations) {\n          pinchedGroup.animate({\n            properties: {\n              scale: 1.25\n            },\n            settings: {\n              duration: 100,\n              easing: \"easeOut\"\n            }\n          });\n        }\n      } else {\n        console.log('hit no item');\n      }\n    }\n\n    function pinchMove(event) {\n      if (pinchedGroup) {\n        console.log('pinchmove', event);\n        console.log(pinchedGroup);\n        var currentScale = event.scale;\n        var scaleDelta = currentScale / lastScale;\n        lastScale = currentScale;\n        console.log(lastScale, currentScale, scaleDelta);\n\n        var currentRotation = event.rotation;\n        var rotationDelta = currentRotation - lastRotation;\n        lastRotation = currentRotation;\n        console.log(lastRotation, currentRotation, rotationDelta);\n        // pinchedGroup.scale(scaleDelta);\n        pinchedGroup.rotate(rotationDelta);\n      }\n    }\n\n    function pinchEnd(event) {\n      console.log('pinchend', event);\n      // wait 250 ms to prevent mistaken pan readings\n      if (pinchedGroup) {\n        if (runAnimations) {\n          pinchedGroup.animate({\n            properties: {\n              scale: 0.8\n            },\n            settings: {\n              duration: 100,\n              easing: \"easeOut\"\n            }\n          });\n        }\n      }\n      pinching = false;\n      setTimeout(function () {\n        hammerManager.get('pan').set({ enable: true });\n      }, 250);\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function doubleTap(event) {\n      var pointer = event.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions);\n\n      if (hitResult) {\n        var item = hitResult.item;\n        var parent = item.parent;\n\n        if (item.data.interior) {\n          console.log('interior');\n          item.data.transparent = !item.data.transparent;\n\n          if (item.data.transparent) {\n            item.fillColor = transparent;\n            item.strokeColor = transparent;\n          } else {\n            item.fillColor = parent.data.color;\n            item.strokeColor = parent.data.color;\n          }\n\n          MOVES.push({\n            type: 'fillChanged',\n            id: item.id,\n            fill: parent.data.color,\n            transparent: item.data.transparent\n          });\n        } else {\n          console.log('not interior');\n        }\n      } else {\n        console.log('hit no item');\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function bounce(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    var hammerManager = new Hammer.Manager($canvas[0]);\n\n    hammerManager.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\n    hammerManager.add(new Hammer.Tap({ event: 'singletap' }));\n    hammerManager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n    hammerManager.add(new Hammer.Pinch());\n\n    hammerManager.get('doubletap').recognizeWith('singletap');\n    hammerManager.get('singletap').requireFailure('doubletap');\n    hammerManager.get('pan').requireFailure('pinch');\n\n    hammerManager.on('singletap', function () {\n      console.log('singleTap');\n    });\n    hammerManager.on('doubletap', doubleTap);\n\n    hammerManager.on('panstart', panStart);\n    hammerManager.on('panmove', panMove);\n    hammerManager.on('panend', panEnd);\n\n    hammerManager.on('pinchstart', pinchStart);\n    hammerManager.on('pinchmove', pinchMove);\n    hammerManager.on('pinchend', pinchEnd);\n    hammerManager.on('pinchcancel', function () {\n      hammerManager.get('pan').set({ enable: true });\n    }); // make sure it's reenabled\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    if (!(MOVES.length > 0)) {\n      console.log('no moves yet');\n      return;\n    }\n\n    var lastMove = MOVES.pop();\n\n    switch (lastMove.type) {\n      case 'newGroup':\n        var group = project.getItem({\n          id: lastMove.id\n        });\n        if (group) {\n          console.log('removing group');\n          group.remove();\n        } else {\n          console.log('could not find matching group');\n        }\n        break;\n      case 'fillChanged':\n        var item = project.getItem({\n          id: lastMove.id\n        });\n\n        if (lastMove.transparent) {\n          item.fillColor = lastMove.fill;\n          item.strokeColor = lastMove.fill;\n        } else {\n          item.fillColor = transparent;\n          item.strokeColor = transparent;\n        }\n\n        break;\n      default:\n        console.log('unknown case');\n    }\n    console.log(lastMove);\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\nexports.findInteriorCurves = findInteriorCurves;\nexports.trueGroup = trueGroup;\nexports.truePath = truePath;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n// returns an array of the interior curves of a given compound path\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n  if (!path || !path.children || !path.children.length) return;\n\n  for (var i = 0; i < path.children.length; i++) {\n    var child = path.children[i];\n\n    if (child.closed) {\n      interiorCurves.push(new Path(child.segments));\n    }\n  }\n\n  path.remove();\n  return interiorCurves;\n}\n\nfunction trueGroup(group) {\n  var bounds = group._namedChildren.bounds[0],\n      middle = group._namedChildren.middle[0];\n\n  var middleCopy = new Path();\n  middleCopy.copyContent(middle);\n  middleCopy.visible = false;\n  var dividedPath = middleCopy.resolveCrossings();\n  dividedPath.visible = false;\n  Base.each(dividedPath.children, function (child, i) {\n    if (child.closed) {\n      child.selected = false;\n    } else {\n      child.selected = true;\n    }\n    console.log(child, i);\n  });\n}\n\nfunction truePath(path) {\n  console.log(group);\n  // if (path && path.children && path.children.length > 0 && path._namedChildren['middle']) {\n  //   let pathCopy = new Path();\n  //   console.log(path._namedChildren['middle']);\n  //   pathCopy.copyContent(path._namedChildren['middle']);\n  //   console.log(pathCopy);\n  // }\n}\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}