{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","doubleTap","event","pointer","center","point","Point","x","y","hitResult","project","hitTest","hitOptions","transparent","Color","item","parent","data","interior","console","log","fillColor","strokeColor","color","setup","$canvas","segments","stroke","fill","tolerance","hammerManager","Hammer","Manager","add","Tap","taps","Pan","direction","DIRECTION_ALL","Pinch","get","recognizeWith","requireFailure","ev","newPressed","activeLayer","removeChildren","undoPressed","playPressed","tipsPressed","sharePressed","main","./util","2","rad","degrees","Math","PI","deg","radians","delta","p1","p2","sqrt","pow","findInteriorCurves","path","interiorCurves","children","child","closed","strokeBounds","j","isInside","push","Path","id","remove","Object","defineProperty","value"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\nvar util = require('./util');\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var path = void 0;\n    var past = void 0;\n    var pasts = [];\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      paper.project.activeLayer.removeChildren(); // REMOVE\n\n      sizes = [];\n\n      if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n      if (event.changedPointers.length > 1) {\n        console.log('event.changedPointers > 1');\n      }\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      // the first path is what is actually drawn, the second path keeps track of center points\n      path = new Path({\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor,\n        name: 'bounds'\n      });\n\n      path.add(point);\n    }\n\n    var min = 0;\n    var max = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = util.delta(point, p0);\n        size = dist * alpha;\n        size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        path.add(top);\n        path.insert(0, bottom);\n        path.smooth();\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        size = Math.max(Math.min(size, max), min); // clamp size to [min, max]\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      var group = new Group(path);\n\n      path.add(point);\n      path.flatten(4);\n      path.smooth();\n      path.simplify();\n      path.closed = true;\n\n      var intersections = path.getCrossings();\n      if (intersections.length > 0) {\n        // we create a copy of the path because resolveCrossings() splits source path\n        var pathCopy = new Path();\n        pathCopy.copyContent(path);\n        pathCopy.visible = false;\n\n        var dividedPath = pathCopy.resolveCrossings();\n        dividedPath.visible = false;\n\n        var enclosedLoops = util.findInteriorCurves(dividedPath);\n\n        if (enclosedLoops) {\n          for (var i = 0; i < enclosedLoops.length; i++) {\n            enclosedLoops[i].visible = true;\n            enclosedLoops[i].closed = true;\n            enclosedLoops[i].fillColor = new Color(0, 0); // transparent\n            enclosedLoops[i].data.interior = true;\n            enclosedLoops[i].data.transparent = true;\n            group.addChild(enclosedLoops[i]);\n          }\n        }\n        pathCopy.remove();\n      } else {\n        console.log('no intersections');\n      }\n\n      path.selected = true;\n\n      group.data.color = path.fillColor;\n      lastChild = group;\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function doubleTap(event) {\n      var pointer = event.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions),\n          transparent = new Color(0, 0);\n\n      if (hitResult) {\n        var item = hitResult.item;\n        var parent = item.parent;\n\n        if (item.data.interior) {\n          console.log('interior');\n          item.data.transparent = !item.data.transparent;\n\n          if (item.data.transparent) {\n            item.fillColor = transparent;\n            item.strokeColor = transparent;\n          } else {\n            item.fillColor = parent.data.color;\n            item.strokeColor = parent.data.color;\n          }\n        } else {\n          console.log('not interior');\n        }\n      } else {\n        console.log('hit no item');\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function jiggle(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    var hammerManager = new Hammer.Manager($canvas[0]);\n\n    hammerManager.add(new Hammer.Tap({ event: 'singletap' }));\n    hammerManager.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\n    hammerManager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n    hammerManager.add(new Hammer.Pinch());\n\n    hammerManager.get('doubletap').recognizeWith('singletap');\n    hammerManager.get('singletap').requireFailure('doubletap');\n\n    hammerManager.on('singletap', function () {\n      console.log('singleTap');\n    });\n    hammerManager.on('doubletap', doubleTap);\n\n    // hammerManager.on('panstart', panStart);\n    // hammerManager.on('panmove', panMove);\n    // hammerManager.on('panend', panEnd);\n    hammerManager.on('panstart', function (ev) {\n      console.log(ev);\n    });\n    hammerManager.on('panmove', function (ev) {\n      console.log(ev);\n    });\n    hammerManager.on('panend', function (ev) {\n      console.log(ev);\n    });\n\n    hammerManager.on('pinch', function (ev) {\n      console.log(ev);\n    });\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{\"./util\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.delta = delta;\nexports.findInteriorCurves = findInteriorCurves;\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n// returns an array of the interior curves of a given compound path\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n\n  for (var i = 0; i < path.children.length; i++) {\n    var child = path.children[i];\n\n    if (!child.closed) {\n      child.remove();\n    } else {\n      var bounds = child.strokeBounds;\n      var interior = false;\n\n      // iterate through all other children to see if this child is entirely within another. if so, it is an interior path\n      for (var j = 0; j < path.children.length; j++) {\n        // don't test against itself\n        if (j !== i) {\n          if (child.isInside(path.children[j].strokeBounds)) {\n            interior = true;\n          }\n        }\n      }\n\n      if (interior) {\n        interiorCurves.push(new Path(child.segments));\n        console.log(\"child \" + child.id + \" is interior\");\n      } else {\n        console.log(\"child \" + child.id + \" is exterior\");\n      }\n    }\n  }\n\n  path.remove();\n\n  return interiorCurves;\n}\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}