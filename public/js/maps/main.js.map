{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","kan","palette","currentColor","numPaths","paths","paper","install","Math","rad","degrees","PI","deg","radians","$","document","ready","initControlPanel","initColorPalette","initCanvasDraw","initNew","initUndo","initPlay","initTips","initShare","$paletteWrap","$paletteColors","find","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","on","$svg","this","hasClass","removeClass","attr","addClass","panStart","event","sizes","gesture","changedPointers","console","log","pointer","center","point","Point","x","y","path","Path","strokeColor","fillColor","add","panMove","preventDefault","memory","shift","bottomX","bottomY","bottom","topX","topY","top","p0","angle","dist","size","past","delta","alpha","threshold","cumSize","j","avgSize","round","atan2","cos","sin","insert","smooth","view","draw","push","panEnd","elasticity","simplify","closed","lastChild","intersections","getCrossings","intersection","Circle","radius","tap","hitResult","project","hitTest","hitOptions","item","selected","setup","$canvas","segments","stroke","fill","tolerance","hammer","data","get","set","direction","Hammer","DIRECTION_ALL","p1","p2","sqrt","pow","newPressed","activeLayer","removeChildren","undoPressed","playPressed","tipsPressed","sharePressed","main"],"mappings":"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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.kan = window.kan || {\n  palette: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#F285A5\", \"#CA2E26\", \"#B84526\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#EEB641\", \"#F6EB16\", \"#7F7D31\", \"#6EAD79\", \"#2A4621\", \"#F4EAE0\"],\n  currentColor: '#20171C',\n  numPaths: 10,\n  paths: []\n};\n\npaper.install(window);\n\n// Converts from degrees to radians.\nMath.rad = function (degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nMath.deg = function (radians) {\n  return radians * 180 / Math.PI;\n};\n\n$(document).ready(function () {\n  var MOVES = []; // store global moves list\n  // moves = [\n  //   {\n  //     'type': 'colorChange',\n  //     'old': '#20171C',\n  //     'new': '#F285A5'\n  //   },\n  //   {\n  //     'type': 'newPath',\n  //     'ref': '???' // uuid? dom reference?\n  //   },\n  //   {\n  //     'type': 'pathTransform',\n  //     'ref': '???', // uuid? dom reference?\n  //     'old': 'rotate(90deg)scale(1.5)', // ???\n  //     'new': 'rotate(120deg)scale(-0.5)' // ???\n  //   },\n  //   // others?\n  // ]\n\n  var $window = $(window);\n  var $body = $('body');\n  var $canvas = $('canvas#mainCanvas');\n\n  function initControlPanel() {\n    initColorPalette();\n    initCanvasDraw();\n    initNew();\n    initUndo();\n    initPlay();\n    initTips();\n    initShare();\n  }\n\n  function initColorPalette() {\n    var $paletteWrap = $('ul.palette-colors');\n    var $paletteColors = $paletteWrap.find('li');\n    var paletteColorSize = 20;\n    var paletteSelectedColorSize = 30;\n    var paletteSelectedClass = 'palette-selected';\n\n    // hook up click\n    $paletteColors.on('click tap touch', function () {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    });\n  }\n\n  function initCanvasDraw() {\n\n    paper.setup($canvas[0]);\n\n    var path = void 0;\n    var past = void 0;\n    var pasts = [];\n    var sizes = void 0;\n    // let paths = getFreshPaths(window.kan.numPaths);\n    var touch = false;\n    var lastChild = void 0;\n\n    function panStart(event) {\n      sizes = [];\n\n      if (!(event.gesture.changedPointers && event.gesture.changedPointers.length > 0)) return;\n      if (event.gesture.changedPointers.length > 1) {\n        console.log('event.gesture.changedPointers > 1');\n      }\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      path = new Path({\n        strokeColor: window.kan.currentColor,\n        fillColor: window.kan.currentColor\n      });\n\n      path.add(point);\n    }\n\n    var threshold = 20;\n    var alpha = 0.3;\n    var memory = 10;\n    var cumSize = void 0,\n        avgSize = void 0;\n    function panMove(event) {\n      event.preventDefault();\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      while (sizes.length > memory) {\n        sizes.shift();\n      }\n\n      var bottomX = void 0,\n          bottomY = void 0,\n          bottom = void 0,\n          topX = void 0,\n          topY = void 0,\n          top = void 0,\n          p0 = void 0,\n          p1 = void 0,\n          step = void 0,\n          angle = void 0,\n          dist = void 0,\n          size = void 0;\n\n      if (sizes.length > 0) {\n        // not the first point, so we have others to compare to\n        p0 = past;\n        dist = delta(point, p0);\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n\n        cumSize = 0;\n        for (var j = 0; j < sizes.length; j++) {\n          cumSize += sizes[j];\n        }\n        avgSize = Math.round((cumSize / sizes.length + size) / 2);\n        // console.log(avgSize);\n\n        angle = Math.atan2(point.y - p0.y, point.x - p0.x); // rad\n        // angle = Math.rad(event.gesture.angle);\n\n        // Point(bottomX, bottomY) is bottom, Point(topX, topY) is top\n        bottomX = point.x + Math.cos(angle + Math.PI / 2) * avgSize;\n        bottomY = point.y + Math.sin(angle + Math.PI / 2) * avgSize;\n        bottom = new Point(bottomX, bottomY);\n\n        topX = point.x + Math.cos(angle - Math.PI / 2) * avgSize;\n        topY = point.y + Math.sin(angle - Math.PI / 2) * avgSize;\n        top = new Point(topX, topY);\n\n        path.add(top);\n        path.insert(0, bottom);\n        // paths[i].add(point);\n\n        path.smooth();\n      } else {\n        // don't have anything to compare to\n        dist = 1;\n        angle = 0;\n\n        size = dist * alpha;\n        if (size >= threshold) size = threshold;\n      }\n\n      paper.view.draw();\n\n      past = point;\n      sizes.push(size);\n    }\n\n    function panEnd(event) {\n      elasticity = 1;\n\n      var pointer = event.gesture.center;\n      var point = new Point(pointer.x, pointer.y);\n\n      path.add(point);\n      path.smooth();\n      path.simplify(0);\n      path.closed = true;\n      lastChild = path;\n\n      var intersections = path.getCrossings();\n      if (intersections && intersections.length > 0) {\n        for (var i = 0; i < intersections.length; i++) {\n          // console.log('----------------');\n          var intersection = intersections[i];\n          // console.log(intersection);\n          var circle = new Path.Circle({\n            center: intersection.point,\n            radius: 3,\n            fillColor: 'pink'\n          });\n        }\n      }\n    }\n\n    var hitOptions = {\n      segments: false,\n      stroke: true,\n      fill: true,\n      tolerance: 5\n    };\n\n    function tap(event) {\n      var pointer = event.gesture.center,\n          point = new Point(pointer.x, pointer.y),\n          hitResult = paper.project.hitTest(point, hitOptions);\n\n      if (hitResult) {\n        hitResult.item.selected = !hitResult.item.selected;\n      }\n    }\n\n    // var animationId;\n    var elasticity = 0;\n\n    function jiggle(event) {\n\n      // console.log(paper.project.activeLayer.firstChild);\n      // paper.project.activeLayer.firstChild.rotate(3);\n      if (!!lastChild) {\n        if (elasticity > 0) {\n          // console.log(lastChild);\n          for (var i = 0; i < lastChild.segments.length; i++) {\n            var segment = lastChild.segments[i];\n            var timeConst = 16;\n            var divConst = 2;\n            var cos = Math.cos(event.time * timeConst + i);\n            var sin = Math.sin(event.time * timeConst + i);\n            segment.point.x += cos / divConst * elasticity;\n            segment.point.y += sin / divConst * elasticity;\n            // console.log(cos, sin, elasticity);\n            elasticity -= 0.001;\n          }\n        }\n      } else {\n        // console.log('no children yet');\n      }\n    }\n\n    // paper.view.onFrame = jiggle;\n\n    $canvas.hammer().on('panstart', panStart).on('panmove', panMove).on('panend', panEnd).on('tap', tap);\n\n    $canvas.data('hammer').get('pan').set({ direction: Hammer.DIRECTION_ALL });\n  }\n\n  function delta(p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n  }\n\n  function newPressed() {\n    console.log('new pressed');\n\n    paper.project.activeLayer.removeChildren();\n  }\n\n  function undoPressed() {\n    console.log('undo pressed');\n    // d3.selectAll('svg.main path:last-child').remove();\n  }\n\n  function playPressed() {\n    console.log('play pressed');\n  }\n\n  function tipsPressed() {\n    console.log('tips pressed');\n  }\n\n  function sharePressed() {\n    console.log('share pressed');\n  }\n\n  function initNew() {\n    $('.main-controls .new').on('click tap touch', newPressed);\n  }\n\n  function initUndo() {\n    $('.main-controls .undo').on('click', undoPressed);\n  }\n  function initPlay() {\n    $('.main-controls .play').on('click', playPressed);\n  }\n  function initTips() {\n    $('.aux-controls .tips').on('click', tipsPressed);\n  }\n  function initShare() {\n    $('.aux-controls .share').on('click', sharePressed);\n  }\n\n  function main() {\n    initControlPanel();\n  }\n\n  main();\n});\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsT0FBTyxHQUFQLEdBQWEsT0FBTyxHQUFQLElBQWM7QUFDekIsV0FBUyxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQXdELFNBQXhELEVBQW1FLFNBQW5FLEVBQThFLFNBQTlFLEVBQXlGLFNBQXpGLEVBQW9HLFNBQXBHLEVBQStHLFNBQS9HLEVBQTBILFNBQTFILEVBQXFJLFNBQXJJLEVBQWdKLFNBQWhKLEVBQTJKLFNBQTNKLEVBQXNLLFNBQXRLLENBRGdCO0FBRXpCLGdCQUFjLFNBRlc7QUFHekIsWUFBVSxFQUhlO0FBSXpCLFNBQU87QUFKa0IsQ0FBM0I7O0FBT0EsTUFBTSxPQUFOLENBQWMsTUFBZDs7QUFFQTtBQUNBLEtBQUssR0FBTCxHQUFXLFVBQVMsT0FBVCxFQUFrQjtBQUMzQixTQUFPLFVBQVUsS0FBSyxFQUFmLEdBQW9CLEdBQTNCO0FBQ0QsQ0FGRDs7QUFJQTtBQUNBLEtBQUssR0FBTCxHQUFXLFVBQVMsT0FBVCxFQUFrQjtBQUMzQixTQUFPLFVBQVUsR0FBVixHQUFnQixLQUFLLEVBQTVCO0FBQ0QsQ0FGRDs7QUFJQSxFQUFFLFFBQUYsRUFBWSxLQUFaLENBQWtCLFlBQVc7QUFDM0IsTUFBSSxRQUFRLEVBQVosQ0FEMkIsQ0FDWDtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxVQUFVLEVBQUUsTUFBRixDQUFoQjtBQUNBLE1BQU0sUUFBUSxFQUFFLE1BQUYsQ0FBZDtBQUNBLE1BQU0sVUFBVSxFQUFFLG1CQUFGLENBQWhCOztBQUVBLFdBQVMsZ0JBQVQsR0FBNEI7QUFDMUI7QUFD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QUFaO0FBQ0Q7O0FBRUQsV0FBUyxPQUFULEdBQW1CO0FBQ2pCLE1BQUUscUJBQUYsRUFBeUIsRUFBekIsQ0FBNEIsaUJBQTVCLEVBQStDLFVBQS9DO0FBQ0Q7O0FBRUQsV0FBUyxRQUFULEdBQW9CO0FBQ2xCLE1BQUUsc0JBQUYsRUFBMEIsRUFBMUIsQ0FBNkIsT0FBN0IsRUFBc0MsV0FBdEM7QUFDRDtBQUNELFdBQVMsUUFBVCxHQUFvQjtBQUNsQixNQUFFLHNCQUFGLEVBQTBCLEVBQTFCLENBQTZCLE9BQTdCLEVBQXNDLFdBQXRDO0FBQ0Q7QUFDRCxXQUFTLFFBQVQsR0FBb0I7QUFDbEIsTUFBRSxxQkFBRixFQUF5QixFQUF6QixDQUE0QixPQUE1QixFQUFxQyxXQUFyQztBQUNEO0FBQ0QsV0FBUyxTQUFULEdBQXFCO0FBQ25CLE1BQUUsc0JBQUYsRUFBMEIsRUFBMUIsQ0FBNkIsT0FBN0IsRUFBc0MsWUFBdEM7QUFDRDs7QUFFRCxXQUFTLElBQVQsR0FBZ0I7QUFDZDtBQUNEOztBQUVEO0FBQ0QsQ0F0U0QiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwid2luZG93LmthbiA9IHdpbmRvdy5rYW4gfHwge1xuICBwYWxldHRlOiBbXCIjMjAxNzFDXCIsIFwiIzFFMkE0M1wiLCBcIiMyODM3N0RcIiwgXCIjMzUyNzQ3XCIsIFwiI0YyODVBNVwiLCBcIiNDQTJFMjZcIiwgXCIjQjg0NTI2XCIsIFwiI0RBNkMyNlwiLCBcIiM0NTMxMjFcIiwgXCIjOTE2QTQ3XCIsIFwiI0VFQjY0MVwiLCBcIiNGNkVCMTZcIiwgXCIjN0Y3RDMxXCIsIFwiIzZFQUQ3OVwiLCBcIiMyQTQ2MjFcIiwgXCIjRjRFQUUwXCJdLFxuICBjdXJyZW50Q29sb3I6ICcjMjAxNzFDJyxcbiAgbnVtUGF0aHM6IDEwLFxuICBwYXRoczogW10sXG59O1xuXG5wYXBlci5pbnN0YWxsKHdpbmRvdyk7XG5cbi8vIENvbnZlcnRzIGZyb20gZGVncmVlcyB0byByYWRpYW5zLlxuTWF0aC5yYWQgPSBmdW5jdGlvbihkZWdyZWVzKSB7XG4gIHJldHVybiBkZWdyZWVzICogTWF0aC5QSSAvIDE4MDtcbn07XG5cbi8vIENvbnZlcnRzIGZyb20gcmFkaWFucyB0byBkZWdyZWVzLlxuTWF0aC5kZWcgPSBmdW5jdGlvbihyYWRpYW5zKSB7XG4gIHJldHVybiByYWRpYW5zICogMTgwIC8gTWF0aC5QSTtcbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICBsZXQgTU9WRVMgPSBbXTsgLy8gc3RvcmUgZ2xvYmFsIG1vdmVzIGxpc3RcbiAgLy8gbW92ZXMgPSBbXG4gIC8vICAge1xuICAvLyAgICAgJ3R5cGUnOiAnY29sb3JDaGFuZ2UnLFxuICAvLyAgICAgJ29sZCc6ICcjMjAxNzFDJyxcbiAgLy8gICAgICduZXcnOiAnI0YyODVBNSdcbiAgLy8gICB9LFxuICAvLyAgIHtcbiAgLy8gICAgICd0eXBlJzogJ25ld1BhdGgnLFxuICAvLyAgICAgJ3JlZic6ICc/Pz8nIC8vIHV1aWQ/IGRvbSByZWZlcmVuY2U/XG4gIC8vICAgfSxcbiAgLy8gICB7XG4gIC8vICAgICAndHlwZSc6ICdwYXRoVHJhbnNmb3JtJyxcbiAgLy8gICAgICdyZWYnOiAnPz8/JywgLy8gdXVpZD8gZG9tIHJlZmVyZW5jZT9cbiAgLy8gICAgICdvbGQnOiAncm90YXRlKDkwZGVnKXNjYWxlKDEuNSknLCAvLyA/Pz9cbiAgLy8gICAgICduZXcnOiAncm90YXRlKDEyMGRlZylzY2FsZSgtMC41KScgLy8gPz8/XG4gIC8vICAgfSxcbiAgLy8gICAvLyBvdGhlcnM/XG4gIC8vIF1cblxuICBjb25zdCAkd2luZG93ID0gJCh3aW5kb3cpO1xuICBjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcbiAgY29uc3QgJGNhbnZhcyA9ICQoJ2NhbnZhcyNtYWluQ2FudmFzJyk7XG5cbiAgZnVuY3Rpb24gaW5pdENvbnRyb2xQYW5lbCgpIHtcbiAgICBpbml0Q29sb3JQYWxldHRlKCk7XG4gICAgaW5pdENhbnZhc0RyYXcoKTtcbiAgICBpbml0TmV3KCk7XG4gICAgaW5pdFVuZG8oKTtcbiAgICBpbml0UGxheSgpO1xuICAgIGluaXRUaXBzKCk7XG4gICAgaW5pdFNoYXJlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29sb3JQYWxldHRlKCkge1xuICAgIGNvbnN0ICRwYWxldHRlV3JhcCA9ICQoJ3VsLnBhbGV0dGUtY29sb3JzJyk7XG4gICAgY29uc3QgJHBhbGV0dGVDb2xvcnMgPSAkcGFsZXR0ZVdyYXAuZmluZCgnbGknKTtcbiAgICBjb25zdCBwYWxldHRlQ29sb3JTaXplID0gMjA7XG4gICAgY29uc3QgcGFsZXR0ZVNlbGVjdGVkQ29sb3JTaXplID0gMzA7XG4gICAgY29uc3QgcGFsZXR0ZVNlbGVjdGVkQ2xhc3MgPSAncGFsZXR0ZS1zZWxlY3RlZCc7XG5cbiAgICAvLyBob29rIHVwIGNsaWNrXG4gICAgICAkcGFsZXR0ZUNvbG9ycy5vbignY2xpY2sgdGFwIHRvdWNoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0ICRzdmcgPSAkKHRoaXMpLmZpbmQoJ3N2Zy5wYWxldHRlLWNvbG9yJyk7XG5cbiAgICAgICAgICBpZiAoISRzdmcuaGFzQ2xhc3MocGFsZXR0ZVNlbGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgICAgICAkKCcuJyArIHBhbGV0dGVTZWxlY3RlZENsYXNzKVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MocGFsZXR0ZVNlbGVjdGVkQ2xhc3MpXG4gICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhbGV0dGVDb2xvclNpemUpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYWxldHRlQ29sb3JTaXplKVxuICAgICAgICAgICAgICAuZmluZCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRyKCdyeCcsIDApXG4gICAgICAgICAgICAgIC5hdHRyKCdyeScsIDApO1xuXG4gICAgICAgICAgICAkc3ZnLmFkZENsYXNzKHBhbGV0dGVTZWxlY3RlZENsYXNzKVxuICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBwYWxldHRlU2VsZWN0ZWRDb2xvclNpemUpXG4gICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYWxldHRlU2VsZWN0ZWRDb2xvclNpemUpXG4gICAgICAgICAgICAgIC5maW5kKCdyZWN0JylcbiAgICAgICAgICAgICAgLmF0dHIoJ3J4JywgcGFsZXR0ZVNlbGVjdGVkQ29sb3JTaXplIC8gMilcbiAgICAgICAgICAgICAgLmF0dHIoJ3J5JywgcGFsZXR0ZVNlbGVjdGVkQ29sb3JTaXplIC8gMilcblxuICAgICAgICAgICAgd2luZG93Lmthbi5jdXJyZW50Q29sb3IgPSAkc3ZnLmZpbmQoJ3JlY3QnKS5hdHRyKCdmaWxsJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDYW52YXNEcmF3KCkge1xuXG4gICAgcGFwZXIuc2V0dXAoJGNhbnZhc1swXSk7XG5cbiAgICBsZXQgcGF0aDtcbiAgICBsZXQgcGFzdDtcbiAgICBsZXQgcGFzdHMgPSBbXTtcbiAgICBsZXQgc2l6ZXM7XG4gICAgLy8gbGV0IHBhdGhzID0gZ2V0RnJlc2hQYXRocyh3aW5kb3cua2FuLm51bVBhdGhzKTtcbiAgICBsZXQgdG91Y2ggPSBmYWxzZTtcbiAgICBsZXQgbGFzdENoaWxkO1xuXG4gICAgZnVuY3Rpb24gcGFuU3RhcnQoZXZlbnQpIHtcbiAgICAgIHNpemVzID0gW107XG5cbiAgICAgIGlmICghKGV2ZW50Lmdlc3R1cmUuY2hhbmdlZFBvaW50ZXJzICYmIGV2ZW50Lmdlc3R1cmUuY2hhbmdlZFBvaW50ZXJzLmxlbmd0aCA+IDApKSByZXR1cm47XG4gICAgICBpZiAoZXZlbnQuZ2VzdHVyZS5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZXZlbnQuZ2VzdHVyZS5jaGFuZ2VkUG9pbnRlcnMgPiAxJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBvaW50ZXIgPSBldmVudC5nZXN0dXJlLmNlbnRlcjtcbiAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcblxuICAgICAgcGF0aCA9IG5ldyBQYXRoKHtcbiAgICAgICAgc3Ryb2tlQ29sb3I6IHdpbmRvdy5rYW4uY3VycmVudENvbG9yLFxuICAgICAgICBmaWxsQ29sb3I6IHdpbmRvdy5rYW4uY3VycmVudENvbG9yXG4gICAgICB9KTtcblxuICAgICAgcGF0aC5hZGQocG9pbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IHRocmVzaG9sZCA9IDIwO1xuICAgIGNvbnN0IGFscGhhID0gMC4zO1xuICAgIGNvbnN0IG1lbW9yeSA9IDEwO1xuICAgIGxldCBjdW1TaXplLCBhdmdTaXplO1xuICAgIGZ1bmN0aW9uIHBhbk1vdmUoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGNvbnN0IHBvaW50ZXIgPSBldmVudC5nZXN0dXJlLmNlbnRlcjtcbiAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcblxuICAgICAgd2hpbGUgKHNpemVzLmxlbmd0aCA+IG1lbW9yeSkge1xuICAgICAgICBzaXplcy5zaGlmdCgpO1xuICAgICAgfVxuXG4gICAgICBsZXQgYm90dG9tWCwgYm90dG9tWSwgYm90dG9tLFxuICAgICAgICB0b3BYLCB0b3BZLCB0b3AsXG4gICAgICAgIHAwLCBwMSxcbiAgICAgICAgc3RlcCwgYW5nbGUsIGRpc3QsIHNpemU7XG5cbiAgICAgIGlmIChzaXplcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIG5vdCB0aGUgZmlyc3QgcG9pbnQsIHNvIHdlIGhhdmUgb3RoZXJzIHRvIGNvbXBhcmUgdG9cbiAgICAgICAgcDAgPSBwYXN0O1xuICAgICAgICBkaXN0ID0gZGVsdGEocG9pbnQsIHAwKTtcbiAgICAgICAgc2l6ZSA9IGRpc3QgKiBhbHBoYTtcbiAgICAgICAgaWYgKHNpemUgPj0gdGhyZXNob2xkKSBzaXplID0gdGhyZXNob2xkO1xuXG4gICAgICAgIGN1bVNpemUgPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNpemVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY3VtU2l6ZSArPSBzaXplc1tqXTtcbiAgICAgICAgfVxuICAgICAgICBhdmdTaXplID0gTWF0aC5yb3VuZCgoKGN1bVNpemUgLyBzaXplcy5sZW5ndGgpICsgc2l6ZSkgLyAyKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYXZnU2l6ZSk7XG5cbiAgICAgICAgYW5nbGUgPSBNYXRoLmF0YW4yKHBvaW50LnkgLSBwMC55LCBwb2ludC54IC0gcDAueCk7IC8vIHJhZFxuICAgICAgICAvLyBhbmdsZSA9IE1hdGgucmFkKGV2ZW50Lmdlc3R1cmUuYW5nbGUpO1xuXG4gICAgICAgIC8vIFBvaW50KGJvdHRvbVgsIGJvdHRvbVkpIGlzIGJvdHRvbSwgUG9pbnQodG9wWCwgdG9wWSkgaXMgdG9wXG4gICAgICAgIGJvdHRvbVggPSBwb2ludC54ICsgTWF0aC5jb3MoYW5nbGUgKyBNYXRoLlBJLzIpICogYXZnU2l6ZTtcbiAgICAgICAgYm90dG9tWSA9IHBvaW50LnkgKyBNYXRoLnNpbihhbmdsZSArIE1hdGguUEkvMikgKiBhdmdTaXplO1xuICAgICAgICBib3R0b20gPSBuZXcgUG9pbnQoYm90dG9tWCwgYm90dG9tWSk7XG5cbiAgICAgICAgdG9wWCA9IHBvaW50LnggKyBNYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkvMikgKiBhdmdTaXplO1xuICAgICAgICB0b3BZID0gcG9pbnQueSArIE1hdGguc2luKGFuZ2xlIC0gTWF0aC5QSS8yKSAqIGF2Z1NpemU7XG4gICAgICAgIHRvcCA9IG5ldyBQb2ludCh0b3BYLCB0b3BZKTtcblxuICAgICAgICBwYXRoLmFkZCh0b3ApO1xuICAgICAgICBwYXRoLmluc2VydCgwLCBib3R0b20pO1xuICAgICAgICAvLyBwYXRoc1tpXS5hZGQocG9pbnQpO1xuXG4gICAgICAgIHBhdGguc21vb3RoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb24ndCBoYXZlIGFueXRoaW5nIHRvIGNvbXBhcmUgdG9cbiAgICAgICAgZGlzdCA9IDE7XG4gICAgICAgIGFuZ2xlID0gMDtcblxuICAgICAgICBzaXplID0gZGlzdCAqIGFscGhhO1xuICAgICAgICBpZiAoc2l6ZSA+PSB0aHJlc2hvbGQpIHNpemUgPSB0aHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHBhcGVyLnZpZXcuZHJhdygpO1xuXG4gICAgICBwYXN0ID0gcG9pbnQ7XG4gICAgICBzaXplcy5wdXNoKHNpemUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhbkVuZChldmVudCkge1xuICAgICAgZWxhc3RpY2l0eSA9IDE7XG5cbiAgICAgIGNvbnN0IHBvaW50ZXIgPSBldmVudC5nZXN0dXJlLmNlbnRlcjtcbiAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcblxuICAgICAgcGF0aC5hZGQocG9pbnQpO1xuICAgICAgcGF0aC5zbW9vdGgoKTtcbiAgICAgIHBhdGguc2ltcGxpZnkoMCk7XG4gICAgICBwYXRoLmNsb3NlZCA9IHRydWU7XG4gICAgICBsYXN0Q2hpbGQgPSBwYXRoO1xuXG4gICAgICBsZXQgaW50ZXJzZWN0aW9ucyA9IHBhdGguZ2V0Q3Jvc3NpbmdzKCk7XG4gICAgICBpZiAoaW50ZXJzZWN0aW9ucyAmJiBpbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRlcnNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICBsZXQgaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uc1tpXTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbnRlcnNlY3Rpb24pO1xuICAgICAgICAgIGNvbnN0IGNpcmNsZSA9IG5ldyBQYXRoLkNpcmNsZSh7XG4gICAgICAgICAgICAgIGNlbnRlcjogaW50ZXJzZWN0aW9uLnBvaW50LFxuICAgICAgICAgICAgICByYWRpdXM6IDMsXG4gICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3BpbmsnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoaXRPcHRpb25zID0ge1xuICAgICAgc2VnbWVudHM6IGZhbHNlLFxuICAgICAgc3Ryb2tlOiB0cnVlLFxuICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgIHRvbGVyYW5jZTogNVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0YXAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHBvaW50ZXIgPSBldmVudC5nZXN0dXJlLmNlbnRlcixcbiAgICAgICAgICBwb2ludCA9IG5ldyBQb2ludChwb2ludGVyLngsIHBvaW50ZXIueSksXG4gICAgICAgICAgaGl0UmVzdWx0ID0gcGFwZXIucHJvamVjdC5oaXRUZXN0KHBvaW50LCBoaXRPcHRpb25zKTtcblxuICAgICAgaWYgKGhpdFJlc3VsdCkge1xuICAgICAgICBoaXRSZXN1bHQuaXRlbS5zZWxlY3RlZCA9ICFoaXRSZXN1bHQuaXRlbS5zZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB2YXIgYW5pbWF0aW9uSWQ7XG4gICAgbGV0IGVsYXN0aWNpdHkgPSAwO1xuXG4gICAgZnVuY3Rpb24gamlnZ2xlKGV2ZW50KSB7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKHBhcGVyLnByb2plY3QuYWN0aXZlTGF5ZXIuZmlyc3RDaGlsZCk7XG4gICAgICAvLyBwYXBlci5wcm9qZWN0LmFjdGl2ZUxheWVyLmZpcnN0Q2hpbGQucm90YXRlKDMpO1xuICAgICAgaWYgKCEhbGFzdENoaWxkKSB7XG4gICAgICAgIGlmIChlbGFzdGljaXR5ID4gMCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGxhc3RDaGlsZCk7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0Q2hpbGQuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBsYXN0Q2hpbGQuc2VnbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCB0aW1lQ29uc3QgPSAxNjtcbiAgICAgICAgICAgIGNvbnN0IGRpdkNvbnN0ID0gMjtcbiAgICAgICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGV2ZW50LnRpbWUgKiB0aW1lQ29uc3QgKyBpKTtcbiAgICAgICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKGV2ZW50LnRpbWUgKiB0aW1lQ29uc3QgKyBpKTtcbiAgICAgICAgICAgIHNlZ21lbnQucG9pbnQueCArPSAoY29zIC8gZGl2Q29uc3QpICogZWxhc3RpY2l0eTtcbiAgICAgICAgICAgIHNlZ21lbnQucG9pbnQueSArPSAoc2luIC8gZGl2Q29uc3QpICogZWxhc3RpY2l0eTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvcywgc2luLCBlbGFzdGljaXR5KTtcbiAgICAgICAgICAgIGVsYXN0aWNpdHkgLT0gMC4wMDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbm8gY2hpbGRyZW4geWV0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFwZXIudmlldy5vbkZyYW1lID0gamlnZ2xlO1xuXG4gICAgJGNhbnZhcy5oYW1tZXIoKVxuICAgICAgLm9uKCdwYW5zdGFydCcsIHBhblN0YXJ0KVxuICAgICAgLm9uKCdwYW5tb3ZlJywgcGFuTW92ZSlcbiAgICAgIC5vbigncGFuZW5kJywgcGFuRW5kKVxuICAgICAgLm9uKCd0YXAnLCB0YXApO1xuXG4gICAgJGNhbnZhcy5kYXRhKCdoYW1tZXInKS5nZXQoJ3BhbicpLnNldCh7IGRpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9BTEwgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWx0YShwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAxLnggLSBwMi54LCAyKSArIE1hdGgucG93KHAxLnkgLSBwMi55LCAyKSk7IC8vIHB5dGhhZ29yZWFuIVxuICB9XG5cbiAgZnVuY3Rpb24gbmV3UHJlc3NlZCgpIHtcbiAgICBjb25zb2xlLmxvZygnbmV3IHByZXNzZWQnKTtcblxuICAgIHBhcGVyLnByb2plY3QuYWN0aXZlTGF5ZXIucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZG9QcmVzc2VkKCkge1xuICAgIGNvbnNvbGUubG9nKCd1bmRvIHByZXNzZWQnKTtcbiAgICAvLyBkMy5zZWxlY3RBbGwoJ3N2Zy5tYWluIHBhdGg6bGFzdC1jaGlsZCcpLnJlbW92ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheVByZXNzZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ3BsYXkgcHJlc3NlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlwc1ByZXNzZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ3RpcHMgcHJlc3NlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hhcmVQcmVzc2VkKCkge1xuICAgIGNvbnNvbGUubG9nKCdzaGFyZSBwcmVzc2VkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TmV3KCkge1xuICAgICQoJy5tYWluLWNvbnRyb2xzIC5uZXcnKS5vbignY2xpY2sgdGFwIHRvdWNoJywgbmV3UHJlc3NlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0VW5kbygpIHtcbiAgICAkKCcubWFpbi1jb250cm9scyAudW5kbycpLm9uKCdjbGljaycsIHVuZG9QcmVzc2VkKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0UGxheSgpIHtcbiAgICAkKCcubWFpbi1jb250cm9scyAucGxheScpLm9uKCdjbGljaycsIHBsYXlQcmVzc2VkKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0VGlwcygpIHtcbiAgICAkKCcuYXV4LWNvbnRyb2xzIC50aXBzJykub24oJ2NsaWNrJywgdGlwc1ByZXNzZWQpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXRTaGFyZSgpIHtcbiAgICAkKCcuYXV4LWNvbnRyb2xzIC5zaGFyZScpLm9uKCdjbGljaycsIHNoYXJlUHJlc3NlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWluKCkge1xuICAgIGluaXRDb250cm9sUGFuZWwoKTtcbiAgfVxuXG4gIG1haW4oKTtcbn0pO1xuIl19\n"]}