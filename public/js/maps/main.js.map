{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","runAnimations","canvasId","palette","colors","colorNames","#20171C","#1E2A43","#28377D","#352747","#CA2E26","#9A2A1F","#DA6C26","#453121","#916A47","#DAAD27","#7F7D31","#2B5E2E","pops","colorSize","selectedColorSize","2","window","document","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","hasOwnProperty","deprecate","method","name","message","deprecationMessage","stack","replace","log","console","warn","apply","this","arguments","inherit","child","base","properties","childP","baseP","prototype","Object","create","constructor","_super","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","value","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","defaults","id","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","item","add","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","define","amd","global","HowlerGlobal","Howler","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","match","isOldOpera","parseInt","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","createBufferSource","buffer","connect","destination","noteOn","onended","disconnect","suspend","_sounds","_paused","_suspendTimer","then","_resumeAfterSuspend","_autoResume","resume","_emit","Howl","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_duration","_state","_endTimers","_queue","_onend","onend","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","action","play","load","url","exec","location","protocol","Sound","loadBuffer","internal","num","_ended","_id","_inactiveSound","seek","max","_seek","duration","_start","_stop","playWebAudio","_refreshBuffer","setValueAtTime","currentTime","_playStart","bufferSource","noteGrainOn","Infinity","bind","isRunning","once","_clearTimer","playHtml5","playbackRate","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","fade","from","to","len","diff","dir","steps","stepLen","ceil","linearRampToValueAtTime","_interval","setInterval","soundId","min","clearInterval","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","sounds","_errorFn","_loadFn","remCache","cache","msg","_loadQueue","task","shift","_drain","limit","cnt","_panner","howl","_parent","random","createGain","createGainNode","paused","_errorListener","_loadListener","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_pos","_orientation","stereo","pan","pos","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_panningModel","_refDistance","_rolloffFactor","pa","panner","createPanner","getPathColorName","path","getColorName","strokeColor","color","config","defineProperty","transparent","Color","./../../config","root","factory","ShapeDetector","deg2Rad","d","Stroke","points","processStroke","patterns","_nbSamplePoints","nbSamplePoints","learn","_squareSize","_phi","_angleRange","_anglePrecision","_halfDiagonal","_origin","resample","setCentroid","rotateBy","indicativeAngle","scaleToSquare","translateToOrigin","localDistance","q","strokeLength","newPoints","point","cos","sin","c","box","minX","maxX","minY","maxY","width","height","distanceAtBestAngle","pattern","x1","f1","distanceAtAngle","x2","f2","strokePoints","patternPoints","defaultShapes","spot","patternName","score","stroke","bestDistance","bestPattern","bestScore","6","ui","overlays","kan","currentColor","composition","compositionInterval","lastEvent","moves","pinching","pinchedGroup","pathData","shapePath","prevAngle","sides","side","corners","lastScale","lastRotation","originalPosition","$","ready","run","./overlays","./touch","./ui","7","cardNavNext","$card","addClass","removeClass","setupOverlays","$cards","$body","tapEvent","toggleClass","className","closest","8","getShapePrediction","prediction","shapeJSON","exportJSON","shapeData","processShapeData","shapePrediction","detector","getStrokes","pathClone","clone","minSize","Path","maxSize","prev","cumSpeed","totalPoints","Base","segments","segment","pointStr","stringifyPoint","pointData","nearestPoint","getClosestPointFromPathData","speed","avgSpeed","size","bigClone","smallClone","overlap","subtract","oldgetStrokes","strokes","firstPoint","lastPoint","first","_bottomX","_bottomY","_bottom","Point","_topX","_topY","_top","insert","closed","fillColor","selected","reduce","getIdealGeometry","simplifiedPath","thresholdDist","returnPath","strokeWidth","truedPath","Circle","firstSegment","radius","lastSegment","angleDelta","util","integerPoint","getIntegerPoint","getNearestPoint","OldgetIdealGeometry","thresholdAngle","angleDifference","pow","floor","parsePoint","map","leastDistance","closestPoint","datum","getComputedCorners","rad","cornerThresholdDeg","thresholdDistance","_ret","_angle","lastSegmentPoint","returnCorners","_point","dist","closestPoints","sumX","sumY","pointObj","avgX","avgY","_typeof","json","returnShape","jsonObj","JSON","parse","positionInfo","findInteriorCurves","interiorCurves","dividedPath","resolveCrossings","children","trueGroup","group","_namedChildren","intersections","getIntersections","trueNecessary","pathCopy","visible","_trimPath","trimPath","_trimPath2","_slicedToArray","extendPath","_intersections","_trimPath3","_trimPath4","removePathExtensions","replaceWith","trimmingThreshold","lengthTolerance","nextSegment","next","startAngle","inverseStartAngle","extendedStartPoint","penSegment","previous","endAngle","extendedEndPoint","original","_ret2","extendingThreshold","totalLength","unitedDividedPath","unite","firstIntersection","getNearestLocation","rest","splitAt","lastIntersection","reverse","largestChild","largestChildArea","area","removeSegment","checkPops","paper","project","getItems","el","hitTestBounds","strokeBounds","isInside","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","done","shapeNames","line","circle","square","triangle","other","./lib/shape-detector","./util","9","getShapeSoundObj","viewWidth","view","viewSize","shape","colorName","quantizedSoundStartTime","quantizeLength","bounds","compositionLength","quantizedSoundDuration","soundObj","startTime","groupId","spriteName","startPlaying","activeLayer","playingClass","startComposition","stopPlaying","stopComposition","initShapeSounds","returnSounds","shapeName","shapeSoundJSONPath","getJSON","resp","shapeSoundData","formatShapeSoundData","returnData","urls","smallestDuration","bpm","returnDuration","quantizePosition","position","smallestInterval","measures","returnPosition","animateNote","animate","translate","rotate","settings","easing","playCompositionOnce","beatLength","measureLength","./color","./shape","howler","10","hammerManager","canvas","singleTap","doubleTap","panStart","panMove","panEnd","pinchStart","pinchMove","pinchEnd","pointer","hitResult","hitTest","hitOptions","interior","fill","strokeCap","thresholdAngleRad","cornerPoint","draw","Group","_shape$trueGroup","_shape$trueGroup2","truedGroup","trueWasNecessary","computedCorners","computedCornersPath","computedCornersPathLength","removeSegments","getCrossings","copyContent","enclosedLoops","addChild","sendToBack","enclosedLoop","shapeSoundObj","hitTestGroupBounds","groups","originalRotation","originalScale","currentScale","scaleDelta","currentRotation","rotationDelta","move","throwPinchedGroup","velocityMultiplier","viewHeight","offScreen","requestAnimationFrame","getElementById","tolerance","./sound","hammerjs","11","initColorPalette","initNewButton","initUndoButton","initPlayButton","initTipsButton","initShareButton","setupCanvas","newPressed","removeChildren","undoPressed","lastMove","pop","getItem","playPressed","tipsPressed","sharePressed","$paletteWrap","$paletteColors","paletteColorSize","paletteSelectedColorSize","paletteSelectedClass","hasClass","$svg","attr","canvasBg","Raster","scaleFactorHorizontal","scaleFactorVertical","Layer","12","degrees","deg","radians","delta"],"mappings":"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F,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBACpyCzI,KAAM,aAEN4tB,SAAWrlB,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBACpyCzI,KAAM,aAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG;GAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAC3uDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAC/wDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAC9wDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAChxDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBACjxDzI,KAAM,WAEN4tB,SAAWrlB,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,oBAAuBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,kBAAmBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,qBAAwBF,EAAG,mBAAoBE,EAAG,oBAAuBF,EAAG,mB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","file":"../main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nexports.runAnimations = false;\nexports.canvasId = 'canvas';\n\nexports.palette = {\n  colors: [\"#20171C\", \"#1E2A43\", \"#28377D\", \"#352747\", \"#CA2E26\", \"#9A2A1F\", \"#DA6C26\", \"#453121\", \"#916A47\", \"#DAAD27\", \"#7F7D31\", \"#2B5E2E\"],\n  colorNames: {\n    \"#20171C\": \"black\",\n    \"#1E2A43\": \"blue\",\n    \"#28377D\": \"blue\",\n    \"#352747\": \"blue\",\n    \"#CA2E26\": \"red\",\n    \"#9A2A1F\": \"red\",\n    \"#DA6C26\": \"orange\",\n    \"#453121\": \"brown\",\n    \"#916A47\": \"brown\",\n    \"#DAAD27\": \"orange\",\n    \"#7F7D31\": \"green\",\n    \"#2B5E2E\": \"green\"\n  },\n  pops: [\"#00ADEF\", \"#F285A5\", \"#7DC57F\", \"#F6EB16\", \"#F4EAE0\"],\n  colorSize: 20,\n  selectedColorSize: 30\n};\n\n},{}],2:[function(require,module,exports){\n/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.value = vol;\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.value = muted ? 0 : self._volume;\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.state = 'resuming';\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Check if this extension is available.\n        if (Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If we have no sprite and the sound hasn't loaded, we must wait\n      // for the sound to load to get our audio's duration.\n      if (self._state !== 'loaded' && !self._sprite[sprite]) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(self._soundById(sound._id) ? sound._id : undefined);\n          }\n        });\n\n        return sound._id;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        var isRunning = (Howler.state === 'running');\n        if (self._state === 'loaded' && isRunning) {\n          playWebAudio();\n        } else {\n          // Wait for the audio to load and then begin playback.\n          self.once(isRunning ? 'load' : 'resume', playWebAudio, isRunning ? sound._id : null);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          setTimeout(function() {\n            node.play();\n\n            // Setup the new end timer.\n            if (timeout !== Infinity) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            if (!internal) {\n              self._emit('play', sound._id);\n            }\n          }, 0);\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                if (!internal) {\n                  self._emit('stop', sound._id);\n                }\n\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n        }\n\n        if (sound && !internal) {\n          self._emit('stop', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n      var diff = Math.abs(from - to);\n      var dir = from > to ? 'out' : 'in';\n      var steps = diff / 0.01;\n      var stepLen = (steps > 0) ? len / steps : len;\n\n      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.\n      if (stepLen < 4) {\n        steps = Math.ceil(steps / (4 / stepLen));\n        stepLen = 4;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          var vol = from;\n          sound._interval = setInterval(function(soundId, sound) {\n            // Update the volume amount, but only if the volume should change.\n            if (steps > 0) {\n              vol += (dir === 'in' ? 0.01 : -0.01);\n            }\n\n            // Make sure the volume is in the right bounds.\n            vol = Math.max(0, vol);\n            vol = Math.min(1, vol);\n\n            // Round to within 2 decimal points.\n            vol = Math.round(vol * 100) / 100;\n\n            // Change the volume.\n            if (self._webAudio) {\n              if (typeof id === 'undefined') {\n                self._volume = vol;\n              }\n\n              sound._volume = vol;\n            } else {\n              self.volume(vol, soundId, true);\n            }\n\n            // When the fade is complete, stop it and fire event.\n            if (vol === to) {\n              clearInterval(sound._interval);\n              sound._interval = null;\n              self.volume(vol, soundId);\n              self._emit('fade', soundId);\n            }\n          }.bind(self, ids[i], sound), stepLen);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.value = rate;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n          self._emit('end', sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading.\n          sounds[i]._node.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=';\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      if (fn) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          if (fn === events[i].fn && id === events[i].id) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.value = sound._rate;\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (self._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = Math.round(Date.now() * Math.random());\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorListener, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.value = 1;\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.2\n *  howlerjs.com\n *\n *  (c) 2013-2016, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.value = pan;\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or\n   * all in the group. The most common usage is to set the 'x' position for\n   * left/right panning. Setting any value higher than 1.0 will begin to\n   * decrease the volume of the sound as it moves further away.\n   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.\n   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of\n   *                      `coneOuterGain` outside this angle.\n   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.\n   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves\n   *                      away from listener. Can be `linear`, `inverse` or `exponential`.\n   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *     refDistance - (1 by default) A reference distance for reducing volume as the source\n   *                    moves away from the listener.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,\n            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,\n            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,\n            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,\n            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.panningModel = pa.panningModel;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.value = sound._stereo;\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id);\n    }\n  };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathColorName = getPathColorName;\nexports.getColorName = getColorName;\nvar config = require('./../../config');\n\nvar transparent = exports.transparent = new Color(0, 0);\n\nfunction getPathColorName(path) {\n  return getColorName(path.strokeColor);\n}\n\nfunction getColorName(color) {\n  if (color in config.palette.colorNames) {\n    return config.palette.colorNames[color];\n  } else {\n    return null;\n  }\n}\n\n},{\"./../../config\":1}],5:[function(require,module,exports){\n\"use strict\";\n\n(function (root, factory) {\n\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module !== \"undefined\" && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.ShapeDetector = factory();\n\t}\n})(undefined, function () {\n\n\tvar _nbSamplePoints;\n\tvar _squareSize = 250;\n\tvar _phi = 0.5 * (-1.0 + Math.sqrt(5.0));\n\tvar _angleRange = deg2Rad(45.0);\n\tvar _anglePrecision = deg2Rad(2.0);\n\tvar _halfDiagonal = Math.sqrt(_squareSize * _squareSize + _squareSize * _squareSize) * 0.5;\n\tvar _origin = { x: 0, y: 0 };\n\n\tfunction deg2Rad(d) {\n\n\t\treturn d * Math.PI / 180.0;\n\t};\n\n\tfunction getDistance(a, b) {\n\n\t\tvar dx = b.x - a.x;\n\t\tvar dy = b.y - a.y;\n\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t};\n\n\tfunction Stroke(points, name) {\n\n\t\tthis.points = points;\n\t\tthis.name = name;\n\t\tthis.processStroke();\n\t};\n\n\tStroke.prototype.processStroke = function () {\n\n\t\tthis.points = this.resample();\n\t\tthis.setCentroid();\n\t\tthis.points = this.rotateBy(-this.indicativeAngle());\n\t\tthis.points = this.scaleToSquare();\n\t\tthis.setCentroid();\n\t\tthis.points = this.translateToOrigin();\n\n\t\treturn this;\n\t};\n\n\tStroke.prototype.resample = function () {\n\n\t\tvar localDistance, q;\n\t\tvar interval = this.strokeLength() / (_nbSamplePoints - 1);\n\t\tvar distance = 0.0;\n\t\tvar newPoints = [this.points[0]];\n\n\t\tfor (var i = 1; i < this.points.length; i++) {\n\t\t\tlocalDistance = getDistance(this.points[i - 1], this.points[i]);\n\n\t\t\tif (distance + localDistance >= interval) {\n\t\t\t\tq = {\n\t\t\t\t\tx: this.points[i - 1].x + (interval - distance) / localDistance * (this.points[i].x - this.points[i - 1].x),\n\t\t\t\t\ty: this.points[i - 1].y + (interval - distance) / localDistance * (this.points[i].y - this.points[i - 1].y)\n\t\t\t\t};\n\n\t\t\t\tnewPoints.push(q);\n\t\t\t\tthis.points.splice(i, 0, q);\n\t\t\t\tdistance = 0.0;\n\t\t\t} else {\n\t\t\t\tdistance += localDistance;\n\t\t\t}\n\t\t}\n\n\t\tif (newPoints.length === _nbSamplePoints - 1) {\n\t\t\tnewPoints.push(this.points[this.points.length - 1]);\n\t\t}\n\n\t\treturn newPoints;\n\t};\n\n\tStroke.prototype.rotateBy = function (angle) {\n\n\t\tvar point;\n\t\tvar cos = Math.cos(angle);\n\t\tvar sin = Math.sin(angle);\n\t\tvar newPoints = [];\n\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\n\t\t\tnewPoints.push({\n\t\t\t\tx: (point.x - this.c.x) * cos - (point.y - this.c.y) * sin + this.c.x,\n\t\t\t\ty: (point.x - this.c.x) * sin + (point.y - this.c.y) * cos + this.c.y\n\t\t\t});\n\t\t}\n\n\t\treturn newPoints;\n\t};\n\n\tStroke.prototype.scaleToSquare = function () {\n\n\t\tvar point;\n\t\tvar newPoints = [];\n\t\tvar box = {\n\t\t\tminX: +Infinity,\n\t\t\tmaxX: -Infinity,\n\t\t\tminY: +Infinity,\n\t\t\tmaxY: -Infinity\n\t\t};\n\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\n\t\t\tbox.minX = Math.min(box.minX, point.x);\n\t\t\tbox.minY = Math.min(box.minY, point.y);\n\t\t\tbox.maxX = Math.max(box.maxX, point.x);\n\t\t\tbox.maxY = Math.max(box.maxY, point.y);\n\t\t}\n\n\t\tbox.width = box.maxX - box.minX;\n\t\tbox.height = box.maxY - box.minY;\n\n\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\n\t\t\tnewPoints.push({\n\t\t\t\tx: point.x * (_squareSize / box.width),\n\t\t\t\ty: point.y * (_squareSize / box.height)\n\t\t\t});\n\t\t}\n\n\t\treturn newPoints;\n\t};\n\n\tStroke.prototype.translateToOrigin = function (points) {\n\n\t\tvar point;\n\t\tvar newPoints = [];\n\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\n\t\t\tnewPoints.push({\n\t\t\t\tx: point.x + _origin.x - this.c.x,\n\t\t\t\ty: point.y + _origin.y - this.c.y\n\t\t\t});\n\t\t}\n\n\t\treturn newPoints;\n\t};\n\n\tStroke.prototype.setCentroid = function () {\n\n\t\tvar point;\n\t\tthis.c = {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0\n\t\t};\n\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tpoint = this.points[i];\n\n\t\t\tthis.c.x += point.x;\n\t\t\tthis.c.y += point.y;\n\t\t}\n\n\t\tthis.c.x /= this.points.length;\n\t\tthis.c.y /= this.points.length;\n\n\t\treturn this;\n\t};\n\n\tStroke.prototype.indicativeAngle = function () {\n\n\t\treturn Math.atan2(this.c.y - this.points[0].y, this.c.x - this.points[0].x);\n\t};\n\n\tStroke.prototype.strokeLength = function () {\n\n\t\tvar d = 0.0;\n\n\t\tfor (var i = 1; i < this.points.length; i++) {\n\t\t\td += getDistance(this.points[i - 1], this.points[i]);\n\t\t}\n\n\t\treturn d;\n\t};\n\n\tStroke.prototype.distanceAtBestAngle = function (pattern) {\n\n\t\tvar a = -_angleRange;\n\t\tvar b = _angleRange;\n\t\tvar x1 = _phi * a + (1.0 - _phi) * b;\n\t\tvar f1 = this.distanceAtAngle(pattern, x1);\n\t\tvar x2 = (1.0 - _phi) * a + _phi * b;\n\t\tvar f2 = this.distanceAtAngle(pattern, x2);\n\n\t\twhile (Math.abs(b - a) > _anglePrecision) {\n\n\t\t\tif (f1 < f2) {\n\t\t\t\tb = x2;\n\t\t\t\tx2 = x1;\n\t\t\t\tf2 = f1;\n\t\t\t\tx1 = _phi * a + (1.0 - _phi) * b;\n\t\t\t\tf1 = this.distanceAtAngle(pattern, x1);\n\t\t\t} else {\n\t\t\t\ta = x1;\n\t\t\t\tx1 = x2;\n\t\t\t\tf1 = f2;\n\t\t\t\tx2 = (1.0 - _phi) * a + _phi * b;\n\t\t\t\tf2 = this.distanceAtAngle(pattern, x2);\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(f1, f2);\n\t};\n\n\tStroke.prototype.distanceAtAngle = function (pattern, angle) {\n\n\t\tvar strokePoints = this.rotateBy(angle);\n\t\tvar patternPoints = pattern.points;\n\t\tvar d = 0.0;\n\n\t\tfor (var i = 0; i < strokePoints.length; i++) {\n\t\t\td += getDistance(strokePoints[i], patternPoints[i]);\n\t\t}\n\n\t\treturn d / strokePoints.length;\n\t};\n\n\tfunction ShapeDetector(patterns, options) {\n\n\t\toptions = options || {};\n\t\tthis.threshold = options.threshold || 0;\n\t\t_nbSamplePoints = options.nbSamplePoints || 64;\n\n\t\tthis.patterns = [];\n\n\t\tfor (var i = 0; i < patterns.length; i++) {\n\t\t\tthis.learn(patterns[i].name, patterns[i].points);\n\t\t}\n\t}\n\n\tShapeDetector.defaultShapes = [{\n\t\tpoints: [{ x: 47, y: 55 }, { x: 156, y: 55 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 57, y: 158 }, { x: 148, y: 75 }, { x: 207, y: 29 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 22, y: 38 }, { x: 60, y: 55 }, { x: 119, y: 87 }, { x: 186, y: 125 }, { x: 259, y: 158 }, { x: 271, y: 161 }, { x: 277, y: 166 }, { x: 295, y: 172 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 154, y: 42 }, { x: 157, y: 150 }, { x: 160, y: 240 }, { x: 168, y: 325 }, { x: 171, y: 339 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 9, y: 95 }, { x: 23, y: 66 }, { x: 57, y: 41 }, { x: 83, y: 48 }, { x: 116, y: 81 }, { x: 174, y: 102 }, { x: 256, y: 45 }, { x: 312, y: 18 }, { x: 371, y: 74 }, { x: 382, y: 98 }, { x: 388, y: 108 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 151, y: 7 }, { x: 141, y: 17 }, { x: 121, y: 50 }, { x: 149, y: 69 }, { x: 170, y: 92 }, { x: 198, y: 172 }, { x: 191, y: 237 }, { x: 170, y: 287 }, { x: 173, y: 306 }, { x: 229, y: 363 }, { x: 259, y: 388 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 71, y: 279 }, { x: 220, y: 279 }, { x: 290, y: 273 }, { x: 424, y: 269 }, { x: 593, y: 269 }, { x: 689, y: 264 }, { x: 763, y: 240 }, { x: 873, y: 228 }, { x: 901, y: 231 }, { x: 912, y: 233 }, { x: 918, y: 227 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 565, y: 91 }, { x: 565, y: 501 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 131, y: 79 }, { x: 131, y: 383 }],\n\t\tname: \"line\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 420.52500915527327 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 367.95938301086414, y: 315.39375686645496 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 140.17500305175776 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 367.95938301086414, y: 315.39375686645496 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 367.95938301086414, y: 315.39375686645496 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 367.9593830108641, y: 315.39375686645496 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 420.52500915527327 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 367.9593830108641, y: 315.39375686645496 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 140.17500305175776 }, { x: 262.8281307220458, y: 175.2187538146972 }, { x: 245.30625534057606, y: 210.26250457763663 }, { x: 227.78437995910636, y: 245.30625534057606 }, { x: 210.26250457763663, y: 280.3500061035155 }, { x: 192.7406291961669, y: 315.39375686645496 }, { x: 175.2187538146972, y: 350.4375076293944 }, { x: 157.69687843322748, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 403.00313377380354, y: 385.4812583923338 }, { x: 385.4812583923338, y: 350.4375076293944 }, { x: 367.9593830108641, y: 315.39375686645496 }, { x: 350.4375076293944, y: 280.3500061035155 }, { x: 332.9156322479247, y: 245.30625534057606 }, { x: 315.39375686645496, y: 210.26250457763663 }, { x: 297.87188148498524, y: 175.2187538146972 }, { x: 280.3500061035155, y: 140.17500305175776 }],\n\t\tname: \"triangle\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 140.17500305175776 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 140.17500305175776 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 140.17500305175776 }, { x: 140.17500305175776, y: 175.2187538146972 }, { x: 140.17500305175776, y: 210.26250457763663 }, { x: 140.17500305175776, y: 245.30625534057606 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 140.17500305175776, y: 315.39375686645496 }, { x: 140.17500305175776, y: 350.4375076293944 }, { x: 140.17500305175776, y: 385.4812583923338 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 140.17500305175776, y: 420.52500915527327 }, { x: 175.2187538146972, y: 420.52500915527327 }, { x: 210.26250457763663, y: 420.52500915527327 }, { x: 245.30625534057606, y: 420.52500915527327 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 315.39375686645496, y: 420.52500915527327 }, { x: 350.4375076293944, y: 420.52500915527327 }, { x: 385.4812583923338, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 420.52500915527327 }, { x: 420.52500915527327, y: 385.4812583923338 }, { x: 420.52500915527327, y: 350.4375076293944 }, { x: 420.52500915527327, y: 315.39375686645496 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 420.52500915527327, y: 245.30625534057606 }, { x: 420.52500915527327, y: 210.26250457763663 }, { x: 420.52500915527327, y: 175.2187538146972 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 420.52500915527327, y: 140.17500305175776 }, { x: 385.4812583923338, y: 140.17500305175776 }, { x: 350.4375076293944, y: 140.17500305175776 }, { x: 315.39375686645496, y: 140.17500305175776 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 245.30625534057606, y: 140.17500305175776 }, { x: 210.26250457763663, y: 140.17500305175776 }, { x: 175.2187538146972, y: 140.17500305175776 }, { x: 140.17500305175776, y: 140.17500305175776 }],\n\t\tname: \"square\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 304.69113993790967 }, { x: 412.07142208989444, y: 328.29268073795373 }, { x: 401.74511972189896, y: 350.43750762939436 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 350.4375076293944, y: 401.74511972189896 }, { x: 328.2926807379538, y: 412.07142208989444 }, { x: 304.69113993790967, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 256.0088722691214, y: 418.3954358873965 }, { x: 232.4073314690773, y: 412.07142208989444 }, { x: 210.26250457763666, y: 401.74511972189896 }, { x: 190.2472509540728, y: 387.73028825550034 }, { x: 172.9697239515307, y: 370.4527612529582 }, { x: 158.95489248513206, y: 350.43750762939436 }, { x: 148.62859011713658, y: 328.2926807379538 }, { x: 142.30457631963455, y: 304.6911399379096 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 256.00887226912135 }, { x: 148.62859011713655, y: 232.4073314690773 }, { x: 158.9548924851321, y: 210.2625045776366 }, { x: 172.96972395153068, y: 190.2472509540728 }, { x: 190.24725095407277, y: 172.9697239515307 }, { x: 210.26250457763658, y: 158.95489248513212 }, { x: 232.40733146907718, y: 148.62859011713658 }, { x: 256.00887226912135, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 304.6911399379096, y: 142.30457631963455 }, { x: 328.2926807379537, y: 148.62859011713653 }, { x: 350.4375076293944, y: 158.9548924851321 }, { x: 370.4527612529582, y: 172.96972395153068 }, { x: 387.73028825550034, y: 190.24725095407274 }, { x: 401.7451197218989, y: 210.26250457763658 }, { x: 412.07142208989444, y: 232.4073314690773 }, { x: 418.39543588739645, y: 256.00887226912124 }, { x: 420.52500915527327, y: 280.35000610351545 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 256.00887226912135 }, { x: 412.07142208989444, y: 232.4073314690773 }, { x: 401.74511972189896, y: 210.26250457763666 }, { x: 387.73028825550034, y: 190.2472509540728 }, { x: 370.4527612529582, y: 172.96972395153068 }, { x: 350.4375076293944, y: 158.9548924851321 }, { x: 328.2926807379538, y: 148.62859011713658 }, { x: 304.69113993790967, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 256.0088722691214, y: 142.30457631963455 }, { x: 232.4073314690773, y: 148.62859011713655 }, { x: 210.26250457763666, y: 158.95489248513206 }, { x: 190.2472509540728, y: 172.96972395153068 }, { x: 172.9697239515307, y: 190.24725095407277 }, { x: 158.95489248513206, y: 210.26250457763666 }, { x: 148.62859011713658, y: 232.40733146907723 }, { x: 142.30457631963455, y: 256.0088722691214 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 304.69113993790967 }, { x: 148.62859011713655, y: 328.29268073795373 }, { x: 158.9548924851321, y: 350.4375076293944 }, { x: 172.96972395153068, y: 370.4527612529582 }, { x: 190.24725095407277, y: 387.73028825550034 }, { x: 210.26250457763658, y: 401.7451197218989 }, { x: 232.40733146907718, y: 412.07142208989444 }, { x: 256.00887226912135, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 304.6911399379096, y: 418.3954358873965 }, { x: 328.2926807379537, y: 412.0714220898945 }, { x: 350.4375076293944, y: 401.74511972189896 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 387.73028825550034, y: 370.4527612529583 }, { x: 401.7451197218989, y: 350.4375076293944 }, { x: 412.07142208989444, y: 328.29268073795373 }, { x: 418.39543588739645, y: 304.6911399379098 }, { x: 420.52500915527327, y: 280.35000610351557 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 256.00887226912135 }, { x: 148.62859011713655, y: 232.4073314690773 }, { x: 158.95489248513206, y: 210.26250457763666 }, { x: 172.96972395153068, y: 190.2472509540728 }, { x: 190.2472509540728, y: 172.96972395153068 }, { x: 210.2625045776366, y: 158.9548924851321 }, { x: 232.40733146907726, y: 148.62859011713658 }, { x: 256.00887226912135, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 304.6911399379096, y: 142.30457631963455 }, { x: 328.29268073795373, y: 148.62859011713655 }, { x: 350.43750762939436, y: 158.95489248513206 }, { x: 370.4527612529582, y: 172.96972395153068 }, { x: 387.73028825550034, y: 190.24725095407277 }, { x: 401.74511972189896, y: 210.26250457763666 }, { x: 412.07142208989444, y: 232.40733146907723 }, { x: 418.3954358873965, y: 256.0088722691214 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 304.69113993790967 }, { x: 412.07142208989444, y: 328.29268073795373 }, { x: 401.74511972189896, y: 350.4375076293944 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 350.4375076293944, y: 401.7451197218989 }, { x: 328.29268073795384, y: 412.07142208989444 }, { x: 304.69113993790967, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 256.0088722691214, y: 418.3954358873965 }, { x: 232.40733146907735, y: 412.0714220898945 }, { x: 210.2625045776366, y: 401.74511972189896 }, { x: 190.2472509540728, y: 387.73028825550034 }, { x: 172.9697239515307, y: 370.4527612529583 }, { x: 158.95489248513212, y: 350.4375076293944 }, { x: 148.62859011713655, y: 328.29268073795373 }, { x: 142.30457631963458, y: 304.6911399379098 }, { x: 140.17500305175776, y: 280.35000610351557 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 304.69113993790967 }, { x: 148.62859011713655, y: 328.29268073795373 }, { x: 158.95489248513206, y: 350.43750762939436 }, { x: 172.96972395153068, y: 370.4527612529582 }, { x: 190.2472509540728, y: 387.73028825550034 }, { x: 210.2625045776366, y: 401.74511972189896 }, { x: 232.40733146907726, y: 412.07142208989444 }, { x: 256.00887226912135, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 304.6911399379096, y: 418.3954358873965 }, { x: 328.29268073795373, y: 412.07142208989444 }, { x: 350.43750762939436, y: 401.74511972189896 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 401.74511972189896, y: 350.43750762939436 }, { x: 412.07142208989444, y: 328.2926807379538 }, { x: 418.3954358873965, y: 304.6911399379096 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 256.00887226912135 }, { x: 412.07142208989444, y: 232.4073314690773 }, { x: 401.74511972189896, y: 210.2625045776366 }, { x: 387.73028825550034, y: 190.2472509540728 }, { x: 370.4527612529582, y: 172.9697239515307 }, { x: 350.4375076293944, y: 158.95489248513212 }, { x: 328.29268073795384, y: 148.62859011713658 }, { x: 304.69113993790967, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 256.0088722691214, y: 142.30457631963455 }, { x: 232.40733146907735, y: 148.62859011713653 }, { x: 210.2625045776366, y: 158.9548924851321 }, { x: 190.2472509540728, y: 172.96972395153068 }, { x: 172.9697239515307, y: 190.24725095407274 }, { x: 158.95489248513212, y: 210.26250457763658 }, { x: 148.62859011713655, y: 232.4073314690773 }, { x: 142.30457631963458, y: 256.00887226912124 }, { x: 140.17500305175776, y: 280.35000610351545 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 420.52500915527327 }, { x: 304.6911399379096, y: 418.3954358873965 }, { x: 328.29268073795373, y: 412.07142208989444 }, { x: 350.43750762939436, y: 401.74511972189896 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 401.74511972189896, y: 350.43750762939436 }, { x: 412.07142208989444, y: 328.2926807379538 }, { x: 418.3954358873965, y: 304.6911399379096 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 256.00887226912135 }, { x: 412.07142208989444, y: 232.4073314690773 }, { x: 401.74511972189896, y: 210.2625045776366 }, { x: 387.73028825550034, y: 190.2472509540728 }, { x: 370.4527612529582, y: 172.9697239515307 }, { x: 350.4375076293944, y: 158.95489248513212 }, { x: 328.29268073795384, y: 148.62859011713658 }, { x: 304.69113993790967, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 256.0088722691214, y: 142.30457631963455 }, { x: 232.40733146907735, y: 148.62859011713653 }, { x: 210.2625045776366, y: 158.9548924851321 }, { x: 190.2472509540728, y: 172.96972395153068 }, { x: 172.9697239515307, y: 190.24725095407274 }, { x: 158.95489248513212, y: 210.26250457763658 }, { x: 148.62859011713655, y: 232.4073314690773 }, { x: 142.30457631963458, y: 256.00887226912124 }, { x: 140.17500305175776, y: 280.35000610351545 }, { x: 142.30457631963455, y: 304.6911399379096 }, { x: 148.62859011713658, y: 328.2926807379538 }, { x: 158.954892485132, y: 350.4375076293943 }, { x: 172.96972395153068, y: 370.4527612529582 }, { x: 190.24725095407274, y: 387.7302882555003 }, { x: 210.26250457763666, y: 401.74511972189896 }, { x: 232.40733146907718, y: 412.07142208989444 }, { x: 256.00887226912135, y: 418.3954358873965 }, { x: 280.35000610351545, y: 420.52500915527327 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 140.17500305175776 }, { x: 304.6911399379096, y: 142.30457631963455 }, { x: 328.29268073795373, y: 148.62859011713655 }, { x: 350.43750762939436, y: 158.95489248513206 }, { x: 370.4527612529582, y: 172.96972395153068 }, { x: 387.73028825550034, y: 190.24725095407277 }, { x: 401.74511972189896, y: 210.26250457763666 }, { x: 412.07142208989444, y: 232.40733146907723 }, { x: 418.3954358873965, y: 256.0088722691214 }, { x: 420.52500915527327, y: 280.3500061035155 }, { x: 418.3954358873965, y: 304.69113993790967 }, { x: 412.07142208989444, y: 328.29268073795373 }, { x: 401.74511972189896, y: 350.4375076293944 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 350.4375076293944, y: 401.7451197218989 }, { x: 328.29268073795384, y: 412.07142208989444 }, { x: 304.69113993790967, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 256.0088722691214, y: 418.3954358873965 }, { x: 232.40733146907735, y: 412.0714220898945 }, { x: 210.2625045776366, y: 401.74511972189896 }, { x: 190.2472509540728, y: 387.73028825550034 }, { x: 172.9697239515307, y: 370.4527612529583 }, { x: 158.95489248513212, y: 350.4375076293944 }, { x: 148.62859011713655, y: 328.29268073795373 }, { x: 142.30457631963458, y: 304.6911399379098 }, { x: 140.17500305175776, y: 280.35000610351557 }, { x: 142.30457631963455, y: 256.0088722691214 }, { x: 148.62859011713658, y: 232.40733146907723 }, { x: 158.954892485132, y: 210.26250457763672 }, { x: 172.96972395153068, y: 190.2472509540728 }, { x: 190.24725095407274, y: 172.96972395153074 }, { x: 210.26250457763666, y: 158.95489248513206 }, { x: 232.40733146907718, y: 148.6285901171366 }, { x: 256.00887226912135, y: 142.30457631963455 }, { x: 280.35000610351545, y: 140.17500305175776 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 140.17500305175776 }, { x: 256.0088722691214, y: 142.30457631963455 }, { x: 232.4073314690773, y: 148.62859011713655 }, { x: 210.26250457763666, y: 158.95489248513206 }, { x: 190.2472509540728, y: 172.96972395153068 }, { x: 172.9697239515307, y: 190.24725095407277 }, { x: 158.95489248513206, y: 210.26250457763666 }, { x: 148.62859011713658, y: 232.40733146907723 }, { x: 142.30457631963455, y: 256.0088722691214 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 304.69113993790967 }, { x: 148.62859011713655, y: 328.29268073795373 }, { x: 158.9548924851321, y: 350.4375076293944 }, { x: 172.96972395153068, y: 370.4527612529582 }, { x: 190.24725095407277, y: 387.73028825550034 }, { x: 210.26250457763658, y: 401.7451197218989 }, { x: 232.40733146907718, y: 412.07142208989444 }, { x: 256.00887226912135, y: 418.3954358873965 }, { x: 280.3500061035155, y: 420.52500915527327 }, { x: 304.6911399379096, y: 418.3954358873965 }, { x: 328.2926807379537, y: 412.0714220898945 }, { x: 350.4375076293944, y: 401.74511972189896 }, { x: 370.4527612529582, y: 387.73028825550034 }, { x: 387.73028825550034, y: 370.4527612529583 }, { x: 401.7451197218989, y: 350.4375076293944 }, { x: 412.07142208989444, y: 328.29268073795373 }, { x: 418.39543588739645, y: 304.6911399379098 }, { x: 420.52500915527327, y: 280.35000610351557 }, { x: 418.3954358873965, y: 256.0088722691214 }, { x: 412.07142208989444, y: 232.40733146907723 }, { x: 401.745119721899, y: 210.26250457763672 }, { x: 387.73028825550034, y: 190.2472509540728 }, { x: 370.4527612529583, y: 172.96972395153074 }, { x: 350.43750762939436, y: 158.95489248513206 }, { x: 328.29268073795384, y: 148.6285901171366 }, { x: 304.69113993790967, y: 142.30457631963455 }, { x: 280.35000610351557, y: 140.17500305175776 }],\n\t\tname: \"circle\"\n\t}, {\n\t\tpoints: [{ x: 280.3500061035155, y: 420.52500915527327 }, { x: 256.0088722691214, y: 418.3954358873965 }, { x: 232.4073314690773, y: 412.07142208989444 }, { x: 210.26250457763666, y: 401.74511972189896 }, { x: 190.2472509540728, y: 387.73028825550034 }, { x: 172.9697239515307, y: 370.4527612529582 }, { x: 158.95489248513206, y: 350.43750762939436 }, { x: 148.62859011713658, y: 328.2926807379538 }, { x: 142.30457631963455, y: 304.6911399379096 }, { x: 140.17500305175776, y: 280.3500061035155 }, { x: 142.30457631963455, y: 256.00887226912135 }, { x: 148.62859011713655, y: 232.4073314690773 }, { x: 158.9548924851321, y: 210.2625045776366 }, { x: 172.96972395153068, y: 190.2472509540728 }, { x: 190.24725095407277, y: 172.9697239515307 }, { x: 210.26250457763658, y: 158.95489248513212 }, { x: 232.40733146907718, y: 148.62859011713658 }, { x: 256.00887226912135, y: 142.30457631963455 }, { x: 280.3500061035155, y: 140.17500305175776 }, { x: 304.6911399379096, y: 142.30457631963455 }, { x: 328.2926807379537, y: 148.62859011713653 }, { x: 350.4375076293944, y: 158.9548924851321 }, { x: 370.4527612529582, y: 172.96972395153068 }, { x: 387.73028825550034, y: 190.24725095407274 }, { x: 401.7451197218989, y: 210.26250457763658 }, { x: 412.07142208989444, y: 232.4073314690773 }, { x: 418.39543588739645, y: 256.00887226912124 }, { x: 420.52500915527327, y: 280.35000610351545 }, { x: 418.3954358873965, y: 304.6911399379096 }, { x: 412.07142208989444, y: 328.2926807379538 }, { x: 401.745119721899, y: 350.4375076293943 }, { x: 387.73028825550034, y: 370.4527612529582 }, { x: 370.4527612529583, y: 387.7302882555003 }, { x: 350.43750762939436, y: 401.74511972189896 }, { x: 328.29268073795384, y: 412.07142208989444 }, { x: 304.69113993790967, y: 418.3954358873965 }, { x: 280.35000610351557, y: 420.52500915527327 }],\n\t\tname: \"circle\"\n\t},\n\t// {\n\t// \tpoints: [{\"x\":290,\"y\":256},{\"x\":285,\"y\":291},{\"x\":301,\"y\":347},{\"x\":359,\"y\":367},{\"x\":402,\"y\":367},{\"x\":511,\"y\":308},{\"x\":559,\"y\":246},{\"x\":560,\"y\":225},{\"x\":513,\"y\":194},{\"x\":477,\"y\":186},{\"x\":410.44786,\"y\":185.58245}],\n\t// \tname: \"circle\"\n\t// },\n\t// {\n\t// \tpoints: [{\"x\":342,\"y\":187},{\"x\":270,\"y\":267},{\"x\":234,\"y\":380},{\"x\":234,\"y\":398},{\"x\":278,\"y\":445},{\"x\":386,\"y\":467},{\"x\":452,\"y\":450},{\"x\":479,\"y\":425},{\"x\":489,\"y\":272},{\"x\":445,\"y\":178},{\"x\":356,\"y\":170}],\n\t// \tname: \"circle\"\n\t// },\n\t// {\n\t// \tpoints: [{\"x\":597,\"y\":58},{\"x\":590,\"y\":111},{\"x\":642,\"y\":78},{\"x\":636,\"y\":67},{\"x\":600,\"y\":52},{\"x\":597,\"y\":52}],\n\t// \tname: \"circle\"\n\t// },\n\t// {\n\t// \tpoints: [{\"x\":228,\"y\":464},{\"x\":191,\"y\":467},{\"x\":190,\"y\":519},{\"x\":224,\"y\":524},{\"x\":248,\"y\":523},{\"x\":314,\"y\":477},{\"x\":291,\"y\":460},{\"x\":229,\"y\":452},{\"x\":206,\"y\":452}],\n\t// \tname: \"circle\"\n\t// },\n\t{\n\t\tpoints: [{ x: 380, y: 202 }, { x: 529, y: 265 }, { x: 580, y: 313 }, { x: 571, y: 367 }, { x: 492, y: 401 }, { x: 472, y: 334 }, { x: 478, y: 313 }, { x: 521, y: 248 }, { x: 611, y: 174 }],\n\t\tname: \"other\"\n\t}, {\n\t\tpoints: [{ x: 553, y: 292 }, { x: 579, y: 297 }, { x: 608, y: 297 }, { x: 609, y: 286 }, { x: 585, y: 267 }, { x: 540, y: 282 }, { x: 521, y: 311 }, { x: 540, y: 321 }, { x: 611, y: 319 }, { x: 626, y: 290 }, { x: 625, y: 257 }, { x: 548, y: 227 }, { x: 516, y: 228 }, { x: 495, y: 236 }, { x: 451, y: 276 }, { x: 447, y: 324 }, { x: 506, y: 400 }, { x: 593, y: 416 }, { x: 680, y: 385 }],\n\t\tname: \"other\"\n\t}, {\n\t\tpoints: [{ x: 42, y: 83 }, { x: 74, y: 84 }, { x: 82, y: 85 }, { x: 86, y: 86 }, { x: 44, y: 74 }, { x: 63, y: 82 }, { x: 56, y: 88 }, { x: 48, y: 95 }, { x: 57, y: 63 }, { x: 65, y: 53 }, { x: 64, y: 69 }, { x: 58, y: 106 }],\n\t\tname: \"other\"\n\t}, {\n\t\tpoints: [{ x: 135, y: 491 }, { x: 124, y: 424 }, { x: 96, y: 418 }, { x: 88, y: 434 }, { x: 88, y: 437 }, { x: 113, y: 413 }, { x: 114, y: 395 }, { x: 102, y: 391 }, { x: 90, y: 390 }, { x: 78, y: 405 }, { x: 70, y: 480 }, { x: 85, y: 502 }, { x: 93, y: 510 }],\n\t\tname: \"other\"\n\t}, {\n\t\tpoints: [{ x: 81, y: 219 }, { x: 84, y: 218 }, { x: 86, y: 220 }, { x: 88, y: 220 }, { x: 90, y: 220 }, { x: 92, y: 219 }, { x: 95, y: 220 }, { x: 97, y: 219 }, { x: 99, y: 220 }, { x: 102, y: 218 }, { x: 105, y: 217 }, { x: 107, y: 216 }, { x: 110, y: 216 }, { x: 113, y: 214 }, { x: 116, y: 212 }, { x: 118, y: 210 }, { x: 121, y: 208 }, { x: 124, y: 205 }, { x: 126, y: 202 }, { x: 129, y: 199 }, { x: 132, y: 196 }, { x: 136, y: 191 }, { x: 139, y: 187 }, { x: 142, y: 182 }, { x: 144, y: 179 }, { x: 146, y: 174 }, { x: 148, y: 170 }, { x: 149, y: 168 }, { x: 151, y: 162 }, { x: 152, y: 160 }, { x: 152, y: 157 }, { x: 152, y: 155 }, { x: 152, y: 151 }, { x: 152, y: 149 }, { x: 152, y: 146 }, { x: 149, y: 142 }, { x: 148, y: 139 }, { x: 145, y: 137 }, { x: 141, y: 135 }, { x: 139, y: 135 }, { x: 134, y: 136 }, { x: 130, y: 140 }, { x: 128, y: 142 }, { x: 126, y: 145 }, { x: 122, y: 150 }, { x: 119, y: 158 }, { x: 117, y: 163 }, { x: 115, y: 170 }, { x: 114, y: 175 }, { x: 117, y: 184 }, { x: 120, y: 190 }, { x: 125, y: 199 }, { x: 129, y: 203 }, { x: 133, y: 208 }, { x: 138, y: 213 }, { x: 145, y: 215 }, { x: 155, y: 218 }, { x: 164, y: 219 }, { x: 166, y: 219 }, { x: 177, y: 219 }, { x: 182, y: 218 }, { x: 192, y: 216 }, { x: 196, y: 213 }, { x: 199, y: 212 }, { x: 201, y: 211 }],\n\t\tname: \"other\"\n\t}];\n\n\tShapeDetector.prototype.spot = function (points, patternName) {\n\n\t\tif (patternName == null) {\n\t\t\tpatternName = '';\n\t\t}\n\n\t\tvar distance, pattern, score;\n\t\tvar stroke = new Stroke(points);\n\t\tvar bestDistance = +Infinity;\n\t\tvar bestPattern = null;\n\t\tvar bestScore = 0;\n\n\t\tfor (var i = 0; i < this.patterns.length; i++) {\n\t\t\tpattern = this.patterns[i];\n\n\t\t\tif (pattern.name.indexOf(patternName) > -1) {\n\t\t\t\tdistance = stroke.distanceAtBestAngle(pattern);\n\t\t\t\tscore = 1.0 - distance / _halfDiagonal;\n\n\t\t\t\tif (distance < bestDistance && score > this.threshold) {\n\t\t\t\t\tbestDistance = distance;\n\t\t\t\t\tbestPattern = pattern.name;\n\t\t\t\t\tbestScore = score;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { pattern: bestPattern, score: bestScore };\n\t};\n\n\tShapeDetector.prototype.learn = function (name, points) {\n\n\t\treturn this.patterns.push(new Stroke(points, name));\n\t};\n\n\treturn ShapeDetector;\n});\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nvar touch = require('./touch');\nvar ui = require('./ui');\nvar overlays = require('./overlays');\n\nwindow.kan = {\n  currentColor: '#20171C',\n  composition: [],\n  compositionInterval: null,\n  lastEvent: null,\n  moves: [],\n  playing: false,\n  pinching: false,\n  pinchedGroup: null,\n  pathData: {},\n  shapePath: null,\n  prevAngle: null,\n  sides: [],\n  side: [],\n  corners: [],\n  lastScale: 1,\n  lastRotation: 0,\n  originalPosition: null\n};\n\n$(document).ready(function () {\n  function run() {\n    ui.init();\n    touch.init();\n    overlays.init();\n  }\n\n  run();\n});\n\n},{\"./overlays\":7,\"./touch\":10,\"./ui\":11}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nvar config = require('./../../config');\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\n// next card\nfunction cardNavNext($card) {\n  // animate out of view\n  $card.addClass('leave-left');\n  // reset\n  setTimeout(function () {\n    $card.addClass('hidden').removeClass('leave-left');\n  }, 400);\n};\n\nfunction setupOverlays() {\n  var $cards = $body.find('.overlay .card');\n  var cardCount = $cards.length;\n\n  // open\n  $body.find('li.tips').on(tapEvent, function (e) {\n    $body.toggleClass('overlay-active');\n  });\n\n  // card interactions\n  $body.find('.overlay').on(tapEvent, function (e) {\n    if (e.target.className == 'overlay' || e.target.className == 'contents') {\n      // outside elements, close everything and reset\n      $body.removeClass('overlay-active');\n      $cards.removeClass('hidden');\n    } else {\n      // directly on a card, navigate to the next one\n      cardNavNext($(e.target).closest('.card'));\n    }\n  });\n}\n\nfunction init() {\n  setupOverlays();\n}\n\n},{\"./../../config\":1}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getShapePrediction = getShapePrediction;\nexports.getStrokes = getStrokes;\nexports.oldgetStrokes = oldgetStrokes;\nexports.getIdealGeometry = getIdealGeometry;\nexports.OldgetIdealGeometry = OldgetIdealGeometry;\nexports.getIntegerPoint = getIntegerPoint;\nexports.stringifyPoint = stringifyPoint;\nexports.parsePoint = parsePoint;\nexports.getClosestPointFromPathData = getClosestPointFromPathData;\nexports.getComputedCorners = getComputedCorners;\nexports.processShapeData = processShapeData;\nexports.findInteriorCurves = findInteriorCurves;\nexports.trueGroup = trueGroup;\nexports.extendPath = extendPath;\nexports.trimPath = trimPath;\nexports.removePathExtensions = removePathExtensions;\nexports.checkPops = checkPops;\nexports.hitTestBounds = hitTestBounds;\nvar ShapeDetector = require('./lib/shape-detector');\n\nvar util = require('./util');\n\nvar cornerThresholdDeg = exports.cornerThresholdDeg = 30;\n\nvar detector = exports.detector = new ShapeDetector(ShapeDetector.defaultShapes);\n\nvar shapeNames = exports.shapeNames = {\n  \"line\": {\n    sprite: true\n  },\n  \"circle\": {\n    sprite: true\n  },\n  \"square\": {\n    sprite: true\n  },\n  \"triangle\": {\n    sprite: true\n  },\n  \"other\": {\n    sprite: true\n  }\n};\n\nfunction getShapePrediction(path) {\n  var prediction = {};\n\n  var shapeJSON = path.exportJSON();\n  var shapeData = processShapeData(shapeJSON);\n  var shapePrediction = detector.spot(shapeData);\n\n  if (shapePrediction.score > 0.5) {\n    prediction.pattern = shapePrediction.pattern;\n  } else {\n    prediction.pattern = \"other\";\n  }\n  prediction.score = shapePrediction.score;\n\n  return prediction;\n}\n\nfunction getStrokes(path, pathData) {\n  var pathClone = path.clone();\n  var strokes = new Path();\n\n  var minSize = 1;\n  var maxSize = 5;\n\n  var prev = void 0;\n  var firstPoint = void 0,\n      lastPoint = void 0;\n\n  var cumSpeed = 0;\n  var totalPoints = 0;\n\n  Base.each(pathClone.segments, function (segment, i) {\n    var point = segment.point;\n    var pointStr = stringifyPoint(point);\n    var pointData = void 0;\n    if (pointStr in pathData) {\n      pointData = pathData[pointStr];\n    } else {\n      var nearestPoint = getClosestPointFromPathData(point, pathData);\n      pointStr = stringifyPoint(nearestPoint);\n      if (pointStr in pathData) {\n        pointData = pathData[pointStr];\n      } else {\n        console.log('could not find close point');\n      }\n    }\n\n    if (pointData) {\n      console.log(pointData);\n      var top = void 0,\n          bottom = void 0;\n      var bottomX = void 0,\n          bottomY = void 0,\n          topX = void 0,\n          topY = void 0;\n      if (pointData.speed) {\n        cumSpeed += parseInt(pointData.speed * 10);\n        totalPoints++;\n      }\n    }\n\n    prev = point;\n  });\n\n  var avgSpeed = cumSpeed / totalPoints;\n  console.log(avgSpeed);\n\n  var size = avgSpeed;\n  size = maxSize - size;\n  size = Math.max(Math.min(size, maxSize), minSize); // clamp size to [min, max)\n\n  var bigClone = path.clone();\n  var smallClone = path.clone();\n  bigClone.scale(1.5);\n  smallClone.scale(0.5);\n\n  var overlap = bigClone.subtract(smallClone);\n  overlap.strokeColor = 'pink';\n\n  console.log(size);\n\n  // strokes.closed = true;\n  // strokes.fillColor = 'pink';\n  // strokes.selected = true;\n  // strokes.reduce();\n\n  return pathClone;\n}\n\nfunction oldgetStrokes(path, pathData) {\n  var pathClone = path.clone();\n  var strokes = new Path();\n\n  var minSize = 2;\n  var maxSize = 8;\n\n  var prev = void 0;\n  var firstPoint = void 0,\n      lastPoint = void 0;\n  Base.each(pathClone.segments, function (segment, i) {\n    var point = segment.point;\n    var pointStr = stringifyPoint(point);\n    var pointData = void 0;\n    if (pointStr in pathData) {\n      pointData = pathData[pointStr];\n    } else {\n      var nearestPoint = getClosestPointFromPathData(point, pathData);\n      pointStr = stringifyPoint(nearestPoint);\n      if (pointStr in pathData) {\n        pointData = pathData[pointStr];\n      } else {\n        console.log('could not find close point');\n      }\n    }\n\n    if (pointData) {\n      console.log(pointData);\n      var top = void 0,\n          bottom = void 0;\n      var bottomX = void 0,\n          bottomY = void 0,\n          topX = void 0,\n          topY = void 0;\n      if (pointData.first) {\n        firstPoint = pointData.point;\n        strokes.add(point);\n      } else if (pointData.last) {\n        lastPoint = pointData.point;\n        strokes.add(point);\n      } else {\n        var angle = pointData.angle;\n        var size = pointData.speed * 10;\n        size = maxSize - size;\n        size = Math.max(Math.min(size, maxSize), minSize); // clamp size to [min, max)\n        console.log(size);\n\n        var _bottomX = point.x + Math.cos(angle + Math.PI / 2) * size;\n        var _bottomY = point.y + Math.sin(angle + Math.PI / 2) * size;\n        var _bottom = new Point(_bottomX, _bottomY);\n\n        var _topX = point.x + Math.cos(angle - Math.PI / 2) * size;\n        var _topY = point.y + Math.sin(angle - Math.PI / 2) * size;\n        var _top = new Point(_topX, _topY);\n\n        strokes.add(_top);\n        strokes.insert(0, _bottom);\n      }\n    }\n\n    prev = point;\n  });\n\n  strokes.closed = true;\n  strokes.fillColor = 'pink';\n  strokes.selected = true;\n  strokes.reduce();\n\n  return pathClone;\n}\n\nfunction getIdealGeometry(pathData, sides, simplifiedPath) {\n  var thresholdDist = 0.05 * simplifiedPath.length;\n\n  var returnPath = new Path({\n    strokeWidth: 5,\n    strokeColor: 'pink'\n  });\n\n  var truedPath = new Path({\n    strokeWidth: 5,\n    strokeColor: 'green'\n  });\n\n  // new Path.Circle({\n  //   center: simplifiedPath.firstSegment.point,\n  //   radius: 3,\n  //   fillColor: 'black'\n  // });\n\n  var firstPoint = new Path.Circle({\n    center: simplifiedPath.firstSegment.point,\n    radius: 10,\n    strokeColor: 'blue'\n  });\n\n  var lastPoint = new Path.Circle({\n    center: simplifiedPath.lastSegment.point,\n    radius: 10,\n    strokeColor: 'red'\n  });\n\n  var angle = void 0,\n      prevAngle = void 0,\n      angleDelta = void 0;\n  Base.each(sides, function (side, i) {\n    var firstPoint = side[0];\n    var lastPoint = side[side.length - 1];\n\n    angle = Math.atan2(lastPoint.y - firstPoint.y, lastPoint.x - firstPoint.x);\n\n    if (!!prevAngle) {\n      angleDelta = util.angleDelta(angle, prevAngle);\n      console.log(angleDelta);\n      returnPath.add(firstPoint);\n      returnPath.add(lastPoint);\n    }\n\n    prevAngle = angle;\n  });\n\n  Base.each(simplifiedPath.segments, function (segment, i) {\n    var integerPoint = getIntegerPoint(segment.point);\n    var nearestPoint = returnPath.getNearestPoint(integerPoint);\n    // console.log(integerPoint.getDistance(nearestPoint), thresholdDist);\n    if (integerPoint.getDistance(nearestPoint) <= thresholdDist) {\n      truedPath.add(nearestPoint);\n      new Path.Circle({\n        center: nearestPoint,\n        radius: 3,\n        fillColor: 'black'\n      });\n    } else {\n      console.log('off path');\n      truedPath.add(integerPoint);\n      new Path.Circle({\n        center: integerPoint,\n        radius: 3,\n        fillColor: 'green'\n      });\n    }\n  });\n\n  // truedPath.add(simplifiedPath.lastSegment.point);\n  // new Path.Circle({\n  //   center: simplifiedPath.lastSegment.point,\n  //   radius: 3,\n  //   fillColor: 'black'\n  // });\n\n  if (simplifiedPath.closed) {\n    truedPath.closed = true;\n  }\n\n  // Base.each(truedPath, (point, i) => {\n  //   truedPath.removeSegment(i);\n  // });\n\n  return truedPath;\n}\n\nfunction OldgetIdealGeometry(pathData, path) {\n  var thresholdAngle = Math.PI / 2;\n  var thresholdDist = 0.1 * path.length;\n  // console.log(path);\n\n  var count = 0;\n\n  var sides = [];\n  var side = [];\n  var prev = void 0;\n  var prevAngle = void 0;\n\n  // console.log('thresholdAngle', thresholdAngle);\n\n  var returnPath = new Path();\n\n  Base.each(path.segments, function (segment, i) {\n    var integerPoint = getIntegerPoint(segment.point);\n    var pointStr = stringifyPoint(integerPoint);\n    var pointData = void 0;\n    if (pointStr in pathData) {\n      pointData = pathData[pointStr];\n    } else {\n      var nearestPoint = getClosestPointFromPathData(pathData, integerPoint);\n      pointStr = stringifyPoint(nearestPoint);\n\n      if (pointStr in pathData) {\n        pointData = pathData[pointStr];\n      } else {\n        console.log('could not find close point');\n      }\n    }\n\n    if (pointData) {\n      returnPath.add(integerPoint);\n      new Path.Circle({\n        center: integerPoint,\n        radius: 5,\n        strokeColor: new Color(i / path.segments.length, i / path.segments.length, i / path.segments.length)\n      });\n      console.log(pointData.point);\n      if (!prev) {\n        // first point\n        // console.log('pushing first point to side');\n        side.push(pointData);\n      } else {\n        // let angleFoo = integerPoint.getDirectedAngle(prev);\n        var angle = Math.atan2(integerPoint.y, integerPoint.x) - Math.atan2(prev.y, prev.x);\n        if (angle < 0) angle += 2 * Math.PI; // normalize to [0, 2π)\n        // console.log(angleFoo, angleBar);\n        // let angle = Math.atan2(integerPoint.y - prev.y, integerPoint.x - prev.x);\n        // let line = new Path.Line(prev, integerPoint);\n        // line.strokeWidth = 5;\n        // line.strokeColor = 'pink';\n        // line.rotate(util.deg(Math.cos(angle) * Math.PI * 2));\n        // console.log('angle', angle);\n        if (typeof prevAngle === 'undefined') {\n          // second point\n          side.push(pointData);\n        } else {\n          var angleDifference = Math.pow(angle - prevAngle, 2);\n          console.log('angleDifference', angleDifference);\n          if (angleDifference <= thresholdAngle) {\n            // same side\n            // console.log('pushing point to same side');\n            side.push(pointData);\n          } else {\n            // new side\n            // console.log('new side');\n            sides.push(side);\n            side = [pointData];\n          }\n        }\n\n        prevAngle = angle;\n      }\n\n      prev = integerPoint;\n      count++;\n    } else {\n      console.log('no data');\n    }\n  });\n\n  // console.log(count);\n\n  sides.push(side);\n\n  return sides;\n}\n\n// floors the coordinates of a point\nfunction getIntegerPoint(point) {\n  return new Point(Math.floor(point.x), Math.floor(point.y));\n}\n\nfunction stringifyPoint(point) {\n  return Math.floor(point.x) + ',' + Math.floor(point.y);\n}\n\nfunction parsePoint(pointStr) {\n  var split = pointStr.split(',').map(function (num) {\n    return Math.floor(num);\n  });\n\n  if (split.length >= 2) {\n    return new Point(split[0], split[1]);\n  }\n\n  return null;\n}\n\nfunction getClosestPointFromPathData(point, pathData) {\n  var leastDistance = void 0,\n      closestPoint = void 0;\n\n  Base.each(pathData, function (datum, i) {\n    var distance = point.getDistance(datum.point);\n    if (!leastDistance || distance < leastDistance) {\n      leastDistance = distance;\n      closestPoint = datum.point;\n    }\n  });\n\n  return closestPoint || point;\n}\n\nfunction getComputedCorners(path) {\n  var thresholdAngle = util.rad(cornerThresholdDeg);\n  var thresholdDistance = 0.1 * path.length;\n\n  var corners = [];\n\n  if (path.length > 0) {\n    var _ret = function () {\n      var point = void 0,\n          prev = void 0;\n      var angle = void 0,\n          prevAngle = void 0,\n          angleDelta = void 0;\n\n      Base.each(path.segments, function (segment, i) {\n        var point = getIntegerPoint(segment.point);\n        if (!!prev) {\n          var _angle = Math.atan2(point.y - prev.y, point.x - prev.x);\n          if (_angle < 0) _angle += 2 * Math.PI; // normalize to [0, 2π)\n          if (!!prevAngle) {\n            angleDelta = util.angleDelta(_angle, prevAngle);\n            if (angleDelta >= thresholdAngle) {\n              // console.log('corner');\n              // new Path.Circle({\n              //   center: prev,\n              //   radius: 10,\n              //   fillColor: 'pink'\n              // });\n              corners.push(prev);\n            } else {\n              // console.log(angleDelta);\n            }\n          }\n\n          prevAngle = _angle;\n        } else {\n          // first point\n          corners.push(point);\n          // new Path.Circle({\n          //   center: point,\n          //   radius: 10,\n          //   fillColor: 'pink'\n          // })\n        }\n        prev = point;\n      });\n\n      var lastSegmentPoint = getIntegerPoint(path.lastSegment.point);\n      corners.push(lastSegmentPoint);\n\n      var returnCorners = [];\n      var skippedIds = [];\n      for (var i = 0; i < corners.length; i++) {\n        var _point = corners[i];\n\n        if (i !== 0) {\n          var dist = _point.getDistance(prev);\n          var closestPoints = [];\n          while (dist < thresholdDistance) {\n            closestPoints.push({\n              point: _point,\n              index: i\n            });\n\n            if (i < corners.length - 1) {\n              i++;\n              prev = _point;\n              _point = corners[i];\n              dist = _point.getDistance(prev);\n            } else {\n              break;\n            }\n          }\n          if (closestPoints.length > 0) {\n            var sumX = 0,\n                sumY = 0;\n\n\n            Base.each(closestPoints, function (pointObj) {\n              sumX += pointObj.point.x;\n              sumY += pointObj.point.y;\n            });\n\n            var avgX = sumX / closestPoints.length,\n                avgY = sumY / closestPoints.length;\n\n            returnCorners.push(new Point(avgX, avgY));\n          }\n        } else {\n          returnCorners.push(_point);\n        }\n\n        prev = _point;\n      }\n\n      return {\n        v: returnCorners\n      };\n    }();\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  return corners;\n}\n\nfunction processShapeData(json) {\n  var returnShape = [];\n  var jsonObj = JSON.parse(json)[1]; // zero index is stringified type (e.g. \"Path\")\n\n  if ('segments' in jsonObj) {\n    var segments = jsonObj.segments;\n    Base.each(segments, function (segment, i) {\n      if (segment.length === 3) {\n        var positionInfo = segment[0]; // indexes 1 and 2 are superfluous matrix details\n        returnShape.push({\n          x: positionInfo[0],\n          y: positionInfo[1]\n        });\n      } else {\n        returnShape.push({\n          x: segment[0],\n          y: segment[1]\n        });\n      };\n    });\n  }\n  return returnShape;\n}\n\n// returns an array of the interior curves of a given compound path\nfunction findInteriorCurves(path) {\n  var interiorCurves = [];\n  var pathClone = path.clone();\n  var dividedPath = pathClone.resolveCrossings();\n  console.log(dividedPath);\n\n  if (dividedPath.children.length > 0) {\n    for (var i = 0; i < dividedPath.children.length; i++) {\n      var child = dividedPath.children[i];\n\n      if (child.closed) {\n        interiorCurves.push(child);\n      }\n    }\n  }\n\n  console.log('interior', interiorCurves);\n\n  return interiorCurves;\n}\n\nfunction trueGroup(group, corners) {\n  var shapePath = group._namedChildren.shapePath[0];\n  console.log('num corners', corners.length);\n\n  var intersections = shapePath.getIntersections();\n  var trueNecessary = false;\n\n  var pathCopy = shapePath.clone();\n  pathCopy.visible = false;\n  // debugger;\n\n  if (intersections.length > 0) {\n    // pathCopy.strokeColor = 'orange';\n    var _trimPath = trimPath(pathCopy, shapePath);\n    // see if we can trim the path while maintaining intersections\n    // console.log('intersections!');\n    // pathCopy.strokeColor = 'yellow';\n\n\n    var _trimPath2 = _slicedToArray(_trimPath, 2);\n\n    pathCopy = _trimPath2[0];\n    trueNecessary = _trimPath2[1];\n  } else {\n    // extend first and last segment by threshold, see if intersection\n    // console.log('no intersections, extending first!');\n    // pathCopy.strokeColor = 'yellow';\n    pathCopy = extendPath(pathCopy);\n    // pathCopy.strokeColor = 'orange';\n    var _intersections = pathCopy.getIntersections();\n    if (_intersections.length > 0) {\n      // pathCopy.strokeColor = 'green';\n      var _trimPath3 = trimPath(pathCopy, shapePath);\n      // pathCopy.strokeColor = 'pink';\n\n\n      var _trimPath4 = _slicedToArray(_trimPath3, 2);\n\n      pathCopy = _trimPath4[0];\n      trueNecessary = _trimPath4[1];\n    } else {\n      // pathCopy.strokeColor = 'red';\n      pathCopy = removePathExtensions(pathCopy);\n      // pathCopy.strokeColor = 'blue';\n    }\n  }\n\n  console.log('original length:', shapePath.length);\n  console.log('trued length:', pathCopy.length);\n\n  pathCopy.name = 'shapePath'; // make sure\n  pathCopy.visible = true;\n\n  // group.addChild(pathCopy);\n  // group._namedChildren.shapePath[0] = pathCopy;\n  group._namedChildren.shapePath[0].replaceWith(pathCopy);\n\n  return [group, trueNecessary];\n}\n\nfunction extendPath(path) {\n  if (path.length > 0) {\n    var trimmingThreshold = 0.075;\n    var lengthTolerance = trimmingThreshold * path.length;\n\n    var firstSegment = path.firstSegment;\n    var nextSegment = firstSegment.next;\n    var startAngle = Math.atan2(nextSegment.point.y - firstSegment.point.y, nextSegment.point.x - firstSegment.point.x); // rad\n    var inverseStartAngle = startAngle + Math.PI;\n    var extendedStartPoint = new Point(firstSegment.point.x + Math.cos(inverseStartAngle) * lengthTolerance, firstSegment.point.y + Math.sin(inverseStartAngle) * lengthTolerance);\n    path.insert(0, extendedStartPoint);\n\n    var lastSegment = path.lastSegment;\n    var penSegment = lastSegment.previous; // penultimate\n    var endAngle = Math.atan2(lastSegment.point.y - penSegment.point.y, lastSegment.point.x - penSegment.point.x); // rad\n    var extendedEndPoint = new Point(lastSegment.point.x + Math.cos(endAngle) * lengthTolerance, lastSegment.point.y + Math.sin(endAngle) * lengthTolerance);\n    path.add(extendedEndPoint);\n  }\n  return path;\n}\n\nfunction trimPath(path, original) {\n  // originalPath.strokeColor = 'pink';\n  try {\n    var _ret2 = function () {\n      var intersections = path.getIntersections();\n      var dividedPath = path.resolveCrossings();\n\n      if (intersections.length > 1) {\n        return {\n          v: [original, false]\n        }; // more than one intersection, don't worry about trimming\n      }\n\n      var extendingThreshold = 0.1;\n      var totalLength = path.length;\n\n      // we want to remove all closed loops from the path, since these are necessarily interior and not first or last\n      Base.each(dividedPath.children, function (child, i) {\n        if (child.closed) {\n          // console.log('subtracting closed child');\n          dividedPath = dividedPath.subtract(child);\n        } else {\n          // dividedPath = dividedPath.unite(child);\n        }\n      });\n\n      // console.log(dividedPath);\n\n      if (!!dividedPath.children && dividedPath.children.length > 1) {\n        (function () {\n          // divided path is a compound path\n          var unitedDividedPath = new Path();\n          // unitedDividedPath.copyAttributes(dividedPath);\n          // console.log('before', unitedDividedPath);\n          Base.each(dividedPath.children, function (child, i) {\n            if (!child.closed) {\n              unitedDividedPath = unitedDividedPath.unite(child);\n            }\n          });\n          dividedPath = unitedDividedPath;\n          // console.log('after', unitedDividedPath);\n          // return;\n        })();\n      } else {\n          // console.log('dividedPath has one child');\n        }\n\n      if (intersections.length > 0) {\n        // we have to get the nearest location because the exact intersection point has already been removed as a part of resolveCrossings()\n        var firstIntersection = dividedPath.getNearestLocation(intersections[0].point);\n        // console.log(dividedPath);\n        var rest = dividedPath.splitAt(firstIntersection); // dividedPath is now the first segment\n        var firstSegment = dividedPath;\n        var lastSegment = void 0;\n\n        // firstSegment.strokeColor = 'pink';\n\n        // let circleOne = new Path.Circle({\n        //   center: firstIntersection.point,\n        //   radius: 5,\n        //   strokeColor: 'red'\n        // });\n\n        // console.log(intersections);\n        if (intersections.length > 1) {\n          // console.log('foo');\n          // rest.reverse(); // start from end\n          var lastIntersection = rest.getNearestLocation(intersections[intersections.length - 1].point);\n          // let circleTwo = new Path.Circle({\n          //   center: lastIntersection.point,\n          //   radius: 5,\n          //   strokeColor: 'green'\n          // });\n          lastSegment = rest.splitAt(lastIntersection); // rest is now everything BUT the first and last segments\n          if (!lastSegment || !lastSegment.length) lastSegment = rest;\n          rest.reverse();\n        } else {\n          lastSegment = rest;\n        }\n\n        if (!!firstSegment && firstSegment.length <= extendingThreshold * totalLength) {\n          path = path.subtract(firstSegment);\n          if (path.className === 'CompoundPath') {\n            Base.each(path.children, function (child, i) {\n              if (!child.closed) {\n                child.remove();\n              }\n            });\n          }\n        }\n\n        if (!!lastSegment && lastSegment.length <= extendingThreshold * totalLength) {\n          path = path.subtract(lastSegment);\n          if (path.className === 'CompoundPath') {\n            Base.each(path.children, function (child, i) {\n              if (!child.closed) {\n                child.remove();\n              }\n            });\n          }\n        }\n      }\n\n      // this is hacky but I'm not sure how to get around it\n      // sometimes path.subtract() returns a compound path, with children consisting of the closed path I want and another extraneous closed path\n      // it appears that the correct path always has a higher version, though I'm not 100% sure that this is always the case\n\n      if (path.className === 'CompoundPath' && path.children.length > 0) {\n        if (path.children.length > 1) {\n          (function () {\n            var largestChild = void 0;\n            var largestChildArea = 0;\n\n            Base.each(path.children, function (child, i) {\n              if (child.area > largestChildArea) {\n                largestChildArea = child.area;\n                largestChild = child;\n              }\n            });\n\n            if (largestChild) {\n              path = largestChild;\n            } else {\n              path = path.children[0];\n            }\n          })();\n        } else {\n          path = path.children[0];\n        }\n        // console.log(path);\n        // console.log(path.lastChild);\n        // path.firstChild.strokeColor = 'pink';\n        // path.lastChild.strokeColor = 'green';\n        // path = path.lastChild; // return last child?\n        // find highest version\n        //\n        // console.log(realPathVersion);\n        //\n        // Base.each(path.children, (child, i) => {\n        //   if (child.version == realPathVersion) {\n        //     console.log('returning child');\n        //     return child;\n        //   }\n        // })\n      }\n      console.log('original length:', totalLength);\n      console.log('edited length:', path.length);\n      if (path.length > 0) {\n        if (Math.abs(path.length - totalLength) / totalLength <= 0.01) {\n          console.log('returning original');\n          return {\n            v: [original, false]\n          };\n        } else {\n          return {\n            v: [path, true]\n          };\n        }\n      } else {\n        return {\n          v: [original, false]\n        };\n      }\n    }();\n\n    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n  } catch (e) {\n    console.error(e);\n    return [original, false];\n  }\n}\n\nfunction removePathExtensions(path) {\n  path.removeSegment(0);\n  path.removeSegment(path.segments.length - 1);\n  return path;\n}\n\nfunction checkPops() {\n  var groups = paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return !!el.data && el.data.update;\n    }\n  });\n}\n\nfunction hitTestBounds(point, children) {\n  if (!point) return null;\n\n  for (var i = children.length - 1; i >= 0; i--) {\n    var child = children[i];\n    var bounds = child.strokeBounds;\n    if (point.isInside(child.strokeBounds)) {\n      return child;\n    }\n  }\n\n  return null;\n}\n\n},{\"./lib/shape-detector\":5,\"./util\":12}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getShapeSoundObj = getShapeSoundObj;\nexports.startPlaying = startPlaying;\nexports.stopPlaying = stopPlaying;\nexports.initShapeSounds = initShapeSounds;\nexports.formatShapeSoundData = formatShapeSoundData;\nexports.quantizeLength = quantizeLength;\nexports.quantizePosition = quantizePosition;\nexports.startComposition = startComposition;\nexports.stopComposition = stopComposition;\nrequire('howler');\n\nvar ui = require('./ui');\nvar shape = require('./shape');\nvar color = require('./color');\n\nvar sounds = initShapeSounds();\n\nvar measures = 4;\nvar bpm = 120;\nvar beatLength = 60 / bpm * 1000; // ms\nvar measureLength = beatLength * 4;\nvar compositionLength = exports.compositionLength = measureLength * measures;\n\nfunction getShapeSoundObj(path) {\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n\n  var shapePrediction = shape.getShapePrediction(path);\n  var group = path.parent;\n  var colorName = color.getPathColorName(path);\n\n  var quantizedSoundStartTime = quantizeLength(group.bounds.x / viewWidth * compositionLength); // ms\n  var quantizedSoundDuration = quantizeLength(group.bounds.width / viewWidth * compositionLength); // ms\n\n  var soundObj = {};\n  soundObj.sound = sounds[shapePrediction.pattern];\n  soundObj.startTime = quantizedSoundStartTime;\n  soundObj.duration = quantizedSoundDuration;\n  soundObj.groupId = group.id;\n\n  if (shape.shapeNames[shapePrediction.pattern].sprite) {\n    soundObj.sprite = true;\n    soundObj.spriteName = colorName;\n  } else {\n    soundObj.sprite = false;\n  }\n\n  return soundObj;\n}\n\nfunction startPlaying() {\n  if (paper.project.activeLayer.children.length > 0) {\n    $('body').addClass(ui.playingClass);\n\n    Howler.mute(false);\n\n    window.kan.playing = true;\n    window.kan.compositionInterval = startComposition(window.kan.composition);\n  }\n}\n\nfunction stopPlaying() {\n  var mute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!!mute) {\n    Howler.mute(true);\n  }\n\n  $('body').removeClass(ui.playingClass);\n\n  window.kan.playing = false;\n  stopComposition(window.kan.compositionInterval);\n}\n\nfunction initShapeSounds() {\n  var returnSounds = {};\n  var extensions = ['ogg', 'm4a', 'mp3', 'ac3'];\n\n  var shapeNames = shape.shapeNames;\n  Base.each(shapeNames, function (shape, shapeName) {\n    // console.log(shape, shapeName);\n    if (shape.sprite) {\n      var shapeSoundJSONPath = './audio/shapes/' + shapeName + '/' + shapeName + '.json';\n      $.getJSON(shapeSoundJSONPath, function (resp) {\n        var shapeSoundData = formatShapeSoundData(shapeName, resp);\n        var sound = new Howl(shapeSoundData);\n        returnSounds[shapeName] = sound;\n      });\n    } else {\n      // let sound = new Howl({\n      //   src: extensions.map((extension) => `./audio/shapes/${shape.name}/${shape.name}.${extension}`),\n      // });\n      // console.log({\n      //   src: extensions.map((extension) => `./audio/shapes/${shape.name}/${shape.name}.${extension}`),\n      // }) Math.\n      var sound = new Howl({\n        src: './audio/shapes/' + shapeName + '/' + shapeName + '.mp3'\n      });\n      returnSounds[shapeName] = sound;\n    }\n  });\n\n  return returnSounds;\n}\n\nfunction formatShapeSoundData(shapeName, data) {\n  var returnData = {};\n\n  returnData.src = data.urls.map(function (url) {\n    return './audio/shapes/' + shapeName + '/' + url;\n  });\n  returnData.sprite = data.sprite;\n  returnData.loop = false;\n\n  return returnData;\n}\n\nfunction quantizeLength(duration) {\n  var smallestDuration = 60 / bpm;\n  var returnDuration = Math.floor(duration / smallestDuration) * smallestDuration;\n\n  if (returnDuration > 0) {\n    return returnDuration;\n  } else {\n    // always return something greater than zero\n    return smallestDuration;\n  }\n}\n\nfunction quantizePosition(position, viewWidth) {\n  var smallestInterval = viewWidth / (4 * measures);\n  return returnPosition = Math.floor(position / smallestInterval) * smallestInterval;\n}\n\nfunction animateNote(shape) {\n  var item = paper.project.getItems({\n    className: 'Group',\n    match: function match(el) {\n      return el.id === shape.groupId;\n    }\n  });\n  item[0].animate([{\n    properties: {\n      scale: 1.15,\n      translate: new paper.Point(20, 0),\n      rotate: -10\n    },\n    settings: {\n      duration: 100,\n      easing: \"easeInOut\"\n    }\n  }, {\n    properties: {\n      scale: 1.25,\n      translate: new paper.Point(10, 0),\n      rotate: 10\n    },\n    settings: {\n      duration: 100,\n      easing: \"easeInOut\"\n    }\n  }, {\n    properties: {\n      scale: 1,\n      translate: new paper.Point(0, 0),\n      rotate: 0\n    },\n    settings: {\n      duration: 100,\n      easing: \"easeInOut\"\n    }\n  }]);\n}\n\nfunction startComposition(composition) {\n  function playCompositionOnce() {\n    console.log('repeat');\n    Base.each(composition, function (shape, i) {\n      console.log(shape);\n      if (shape.sprite) {\n        setTimeout(function () {\n          if (!window.kan.playing) {\n            return;\n          }\n          console.log('1 playing shape ' + shape.groupId);\n          shape.sound.play(shape.spriteName);\n          animateNote(shape);\n        }, shape.startTime);\n      } else {\n        setTimeout(function () {\n          if (!window.kan.playing) {\n            return;\n          }\n          console.log('2 playing shape ' + shape.groupId);\n          shape.sound.play();\n          animateNote(shape);\n        }, shape.startTime);\n      }\n    });\n  }\n\n  playCompositionOnce();\n  return setInterval(playCompositionOnce, compositionLength);\n}\n\nfunction stopComposition(interval) {\n  clearInterval(interval);\n}\n\n},{\"./color\":4,\"./shape\":8,\"./ui\":11,\"howler\":3}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.init = init;\nrequire('hammerjs');\n\nvar config = require('./../../config');\nvar sound = require('./sound');\nvar color = require('./color');\nvar shape = require('./shape');\nvar util = require('./util');\n\nvar canvas = document.getElementById(config.canvasId);\n\nvar hitOptions = {\n  segments: false,\n  stroke: true,\n  fill: true,\n  tolerance: 5\n};\n\nvar hammerManager = void 0;\n\nfunction init() {\n  hammerManager = new Hammer.Manager(canvas);\n\n  hammerManager.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\n  hammerManager.add(new Hammer.Tap({ event: 'singletap' }));\n  hammerManager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL }));\n  hammerManager.add(new Hammer.Pinch());\n\n  hammerManager.get('doubletap').recognizeWith('singletap');\n  hammerManager.get('singletap').requireFailure('doubletap');\n  hammerManager.get('pan').requireFailure('pinch');\n\n  hammerManager.on('singletap', singleTap);\n  hammerManager.on('doubletap', doubleTap);\n\n  hammerManager.on('panstart', panStart);\n  hammerManager.on('panmove', panMove);\n  hammerManager.on('panend', panEnd);\n\n  hammerManager.on('pinchstart', pinchStart);\n  hammerManager.on('pinchmove', pinchMove);\n  hammerManager.on('pinchend', pinchEnd);\n  hammerManager.on('pinchcancel', function () {\n    hammerManager.get('pan').set({ enable: true });\n  }); // make sure it's reenabled\n}\n\nfunction singleTap(event) {\n  sound.stopPlaying();\n\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  if (hitResult) {\n    var item = hitResult.item;\n    // item.selected = !item.selected;\n    console.log(item);\n  }\n}\n\nfunction doubleTap(event) {\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = paper.project.hitTest(point, hitOptions);\n\n  var transparent = color.transparent;\n\n  if (hitResult) {\n    var item = hitResult.item;\n    var parent = item.parent;\n\n    if (item.data.interior) {\n      item.data.transparent = !item.data.transparent;\n\n      if (item.data.transparent) {\n        item.fillColor = transparent;\n        item.strokeColor = transparent;\n      } else {\n        item.fillColor = parent.data.color;\n        item.strokeColor = parent.data.color;\n      }\n\n      window.kan.moves.push({\n        type: 'fillChange',\n        id: item.id,\n        fill: parent.data.color,\n        transparent: item.data.transparent\n      });\n    } else {\n      console.log('not interior');\n    }\n  } else {\n    window.kan.pinchedGroup = null;\n    console.log('hit no item');\n  }\n}\n\nfunction panStart(event) {\n  // paper.project.activeLayer.removeChildren(); // REMOVE\n\n  // ignore other touch inputs\n  if (window.kan.pinching) return;\n  if (!(event.changedPointers && event.changedPointers.length > 0)) return;\n  if (event.changedPointers.length > 1) {\n    console.log('event.changedPointers > 1');\n  }\n\n  sound.stopPlaying();\n\n  window.kan.prevAngle = Math.atan2(event.velocityY, event.velocityX);\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var shapePath = new Path({\n    strokeColor: window.kan.currentColor,\n    name: 'shapePath',\n    strokeWidth: 5,\n    visible: true,\n    strokeCap: 'round'\n  });\n\n  shapePath.add(point);\n\n  window.kan.corners = [point];\n\n  window.kan.sides = [];\n  window.kan.side = [point];\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    first: true\n  };\n\n  window.kan.shapePath = shapePath;\n}\n\nfunction panMove(event) {\n  event.preventDefault();\n  if (window.kan.pinching) return;\n\n  var thresholdAngleRad = util.rad(shape.cornerThresholdDeg);\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var angle = Math.atan2(event.velocityY, event.velocityX);\n  var prevAngle = window.kan.prevAngle;\n  var angleDelta = util.angleDelta(angle, prevAngle);\n  window.kan.prevAngle = angle;\n\n  var side = window.kan.side;\n  var sides = window.kan.sides;\n\n  if (angleDelta > thresholdAngleRad) {\n    if (side.length > 0) {\n      // console.log('corner');\n      var cornerPoint = point;\n      // new Path.Circle({\n      //   center: cornerPoint,\n      //   radius: 15,\n      //   strokeColor: 'black'\n      // });\n      window.kan.corners.push(cornerPoint);\n      sides.push(side);\n      side = [];\n    }\n  }\n\n  side.push(point);\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    speed: Math.abs(event.overallVelocity),\n    angle: angle\n  };\n\n  window.kan.shapePath.add(point);\n  window.kan.sides = sides;\n  window.kan.side = side;\n\n  paper.view.draw();\n}\n\n// hc svnt dracones :/\nfunction panEnd(event) {\n  if (window.kan.pinching) return;\n\n  var pointer = event.center;\n  var point = new Point(pointer.x, pointer.y);\n\n  var transparent = color.transparent;\n  var colorName = color.getColorName(window.kan.currentColor);\n\n  var shapePath = window.kan.shapePath;\n  var side = window.kan.side;\n  var sides = window.kan.sides;\n  var corners = window.kan.corners;\n\n  var group = new Group([shapePath]);\n  group.data.color = shapePath.strokeColor;\n  group.data.update = true; // used for pops\n  group.data.scale = 1; // init variable to track scale changes\n  group.data.rotation = 0; // init variable to track rotation changes\n\n  shapePath.add(point);\n\n  side.push(point);\n  sides.push(side);\n  corners.push(point);\n\n  window.kan.pathData[shape.stringifyPoint(point)] = {\n    point: point,\n    last: true\n  };\n\n  shapePath.reduce();\n  var preShapePrediction = shape.getShapePrediction(shapePath);\n\n  var _shape$trueGroup = shape.trueGroup(group, corners),\n      _shape$trueGroup2 = _slicedToArray(_shape$trueGroup, 2),\n      truedGroup = _shape$trueGroup2[0],\n      trueWasNecessary = _shape$trueGroup2[1];\n\n  group.replaceWith(truedGroup);\n  shapePath = group._namedChildren.shapePath[0];\n  shapePath.strokeColor = group.strokeColor;\n\n  if (trueWasNecessary) {\n    var computedCorners = shape.getComputedCorners(shapePath);\n    var computedCornersPath = new Path(computedCorners);\n    computedCornersPath.visible = false;\n    var computedCornersPathLength = computedCornersPath.length;\n    if (Math.abs(computedCornersPathLength - shapePath.length) / shapePath.length <= 0.1) {\n      shapePath.removeSegments();\n      // console.log(computedCorners);\n      shapePath.segments = computedCorners;\n      // shapePath.reduce();\n    }\n  }\n\n  var intersections = shapePath.getCrossings();\n  if (intersections.length > 0) {\n    // we create a copy of the path because resolveCrossings() splits source path\n    var pathCopy = new Path();\n    pathCopy.copyContent(shapePath);\n    pathCopy.visible = false;\n\n    var enclosedLoops = shape.findInteriorCurves(pathCopy);\n\n    if (enclosedLoops.length > 0) {\n      for (var i = 0; i < enclosedLoops.length; i++) {\n        if (shapePath.closed) {\n          enclosedLoops[i].fillColor = shapePath.strokeColor;\n          enclosedLoops[i].data.interior = true;\n          enclosedLoops[i].data.transparent = false;\n        } else {\n          enclosedLoops[i].fillColor = transparent;\n          enclosedLoops[i].data.transparent = true;\n        }\n        enclosedLoops[i].data.interior = true;\n        enclosedLoops[i].visible = true;\n        enclosedLoops[i].closed = true;\n        group.addChild(enclosedLoops[i]);\n        enclosedLoops[i].sendToBack();\n      }\n    }\n    // pathCopy.remove();\n  } else {\n    if (shapePath.closed) {\n      var enclosedLoop = shapePath.clone();\n      enclosedLoop.visible = true;\n      enclosedLoop.fillColor = group.strokeColor;\n      enclosedLoop.data.interior = true;\n      enclosedLoop.data.transparent = false;\n      group.addChild(enclosedLoop);\n      enclosedLoop.sendToBack();\n    }\n  }\n\n  var shapeSoundObj = sound.getShapeSoundObj(shapePath);\n  window.kan.composition.push(shapeSoundObj);\n\n  window.kan.shapePath = shapePath;\n  window.kan.side = side;\n  window.kan.sides = sides;\n  window.kan.corners = corners;\n\n  window.kan.moves.push({\n    type: 'newGroup',\n    id: group.id\n  });\n\n  if (config.runAnimations) {\n    group.animate([{\n      properties: {\n        scale: 0.9\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeOut\"\n      }\n    }, {\n      properties: {\n        scale: 1.11\n      },\n      settings: {\n        duration: 100,\n        easing: \"easeIn\"\n      }\n    }]);\n  }\n}\n\nfunction hitTestGroupBounds(point) {\n  var groups = paper.project.getItems({\n    className: 'Group'\n  });\n  return shape.hitTestBounds(point, groups);\n}\n\nfunction pinchStart(event) {\n  console.log('pinchStart', event.center);\n  sound.stopPlaying();\n\n  hammerManager.get('pan').set({ enable: false });\n  var pointer = event.center,\n      point = new Point(pointer.x, pointer.y),\n      hitResult = hitTestGroupBounds(point);\n\n  if (hitResult) {\n    window.kan.pinching = true;\n    window.kan.pinchedGroup = hitResult;\n    window.kan.lastScale = 1;\n    window.kan.lastRotation = event.rotation;\n\n    window.kan.originalPosition = hitResult.position;\n    window.kan.originalRotation = hitResult.data.rotation;\n    window.kan.originalScale = hitResult.data.scale;\n\n    if (config.runAnimations) {\n      hitResult.animate({\n        properties: {\n          scale: 1.25\n        },\n        settings: {\n          duration: 100,\n          easing: \"easeOut\"\n        }\n      });\n    }\n  } else {\n    window.kan.pinchedGroup = null;\n    console.log('hit no item');\n  }\n}\n\nfunction pinchMove(event) {\n  console.log('pinchMove');\n  event.preventDefault();\n  var pinchedGroup = window.kan.pinchedGroup;\n  if (!!pinchedGroup) {\n    // console.log('pinchmove', event);\n    // console.log(pinchedGroup);\n    var currentScale = event.scale;\n    var scaleDelta = currentScale / window.kan.lastScale;\n    // console.log(lastScale, currentScale, scaleDelta);\n    window.kan.lastScale = currentScale;\n\n    var currentRotation = event.rotation;\n    var rotationDelta = currentRotation - window.kan.lastRotation;\n    window.kan.lastRotation = currentRotation;\n\n    // console.log(`scaling by ${scaleDelta}`);\n    // console.log(`rotating by ${rotationDelta}`);\n\n    pinchedGroup.position = event.center;\n    pinchedGroup.scale(scaleDelta);\n    pinchedGroup.rotate(rotationDelta);\n\n    pinchedGroup.data.scale *= scaleDelta;\n    pinchedGroup.data.rotation += rotationDelta;\n  }\n}\n\nfunction pinchEnd(event) {\n  window.kan.lastEvent = event;\n  var pinchedGroup = window.kan.pinchedGroup;\n  var originalPosition = window.kan.originalPosition;\n  var originalRotation = window.kan.originalRotation;\n  var originalScale = window.kan.originalScale;\n\n  if (!!pinchedGroup) {\n    pinchedGroup.data.update = true;\n    var move = {\n      id: pinchedGroup.id,\n      type: 'transform'\n    };\n    if (pinchedGroup.position != originalPosition) {\n      move.position = originalPosition;\n    }\n\n    if (pinchedGroup.data.rotation != originalRotation) {\n      move.rotation = originalRotation - pinchedGroup.data.rotation;\n    }\n\n    if (pinchedGroup.data.scale != originalScale) {\n      move.scale = originalScale / pinchedGroup.data.scale;\n    }\n\n    console.log('final scale', pinchedGroup.data.scale);\n    console.log(move);\n\n    window.kan.moves.push(move);\n\n    if (Math.abs(event.velocity) > 1) {\n      // dispose of group offscreen\n      throwPinchedGroup();\n    }\n\n    // if (config.runAnimations) {\n    //   pinchedGroup.animate({\n    //     properties: {\n    //       scale: 0.8\n    //     },\n    //     settings: {\n    //       duration: 100,\n    //       easing: \"easeOut\",\n    //     }\n    //   });\n    // }\n  }\n  window.kan.pinching = false;\n  setTimeout(function () {\n    hammerManager.get('pan').set({ enable: true });\n  }, 250);\n}\n\nfunction throwPinchedGroup() {\n  var velocityMultiplier = 25;\n  var lastEvent = window.kan.lastEvent;\n  var viewWidth = paper.view.viewSize.width;\n  var viewHeight = paper.view.viewSize.height;\n  var pinchedGroup = window.kan.pinchedGroup;\n\n  if (pinchedGroup.position.x <= 0 - pinchedGroup.bounds.width || pinchedGroup.position.x >= viewWidth + pinchedGroup.bounds.width || pinchedGroup.position.y <= 0 - pinchedGroup.bounds.height || pinchedGroup.position.y >= viewHeight + pinchedGroup.bounds.height) {\n    pinchedGroup.data.offScreen = true;\n    pinchedGroup.visible = false;\n    return;\n  }\n  requestAnimationFrame(throwPinchedGroup);\n  pinchedGroup.position.x += lastEvent.velocityX * velocityMultiplier;\n  pinchedGroup.position.y += lastEvent.velocityY * velocityMultiplier;\n}\n\n},{\"./../../config\":1,\"./color\":4,\"./shape\":8,\"./sound\":9,\"./util\":12,\"hammerjs\":2}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nvar sound = require('./sound');\n\nvar $body = $('body');\nvar tapEvent = 'click tap touch';\n\nvar playingClass = exports.playingClass = 'playing';\n\nfunction init() {\n  initColorPalette();\n  initNewButton();\n  initUndoButton();\n  initPlayButton();\n  initTipsButton();\n  initShareButton();\n  setupCanvas();\n}\n\nfunction newPressed() {\n  console.log('new pressed');\n  window.kan.composition = [];\n  paper.project.activeLayer.removeChildren();\n}\n\nfunction undoPressed() {\n  var transparent = new Color(0, 0);\n  console.log('undo pressed');\n  if (!(window.kan.moves.length > 0)) {\n    console.log('no moves yet');\n    return;\n  }\n\n  var lastMove = window.kan.moves.pop();\n  var item = project.getItem({\n    id: lastMove.id\n  });\n\n  if (item) {\n    item.visible = true; // make sure\n    switch (lastMove.type) {\n      case 'newGroup':\n        console.log('removing group');\n        item.remove();\n        break;\n      case 'fillChange':\n        if (lastMove.transparent) {\n          item.fillColor = lastMove.fill;\n          item.strokeColor = lastMove.fill;\n        } else {\n          item.fillColor = transparent;\n          item.strokeColor = transparent;\n        }\n      case 'transform':\n        if (!!lastMove.position) {\n          item.position = lastMove.position;\n        }\n        if (!!lastMove.rotation) {\n          item.rotation = lastMove.rotation;\n        }\n        if (!!lastMove.scale) {\n          item.scale(lastMove.scale);\n        }\n        break;\n      default:\n        console.log('unknown case');\n    }\n  } else {\n    console.log('could not find matching item');\n  }\n}\n\nfunction playPressed() {\n  console.log('play pressed');\n  if (window.kan.playing) {\n    sound.stopPlaying(true);\n  } else {\n    sound.startPlaying();\n  }\n}\n\nfunction tipsPressed() {\n  console.log('tips pressed');\n}\n\nfunction sharePressed() {\n  console.log('share pressed');\n}\n\nfunction initColorPalette() {\n  var $paletteWrap = $('ul.palette-colors');\n  var $paletteColors = $paletteWrap.find('li');\n  var paletteColorSize = 20;\n  var paletteSelectedColorSize = 30;\n  var paletteSelectedClass = 'palette-selected';\n\n  // hook up click\n  $paletteColors.on('click tap touch', function () {\n    if (!$body.hasClass(playingClass)) {\n      var $svg = $(this).find('svg.palette-color');\n\n      if (!$svg.hasClass(paletteSelectedClass)) {\n        $('.' + paletteSelectedClass).removeClass(paletteSelectedClass).attr('width', paletteColorSize).attr('height', paletteColorSize).find('rect').attr('rx', 0).attr('ry', 0);\n\n        $svg.addClass(paletteSelectedClass).attr('width', paletteSelectedColorSize).attr('height', paletteSelectedColorSize).find('rect').attr('rx', paletteSelectedColorSize / 2).attr('ry', paletteSelectedColorSize / 2);\n\n        window.kan.currentColor = $svg.find('rect').attr('fill');\n      }\n    };\n  });\n}\n\nfunction initNewButton() {\n  $('.main-controls .new').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      newPressed();\n    }\n  });\n}\n\nfunction initUndoButton() {\n  $('.main-controls .undo').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      undoPressed();\n    }\n  });\n}\n\nfunction initPlayButton() {\n  $('.main-controls .play-stop').on(tapEvent, playPressed);\n}\n\nfunction initTipsButton() {\n  $('.aux-controls .tips').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      tipsPressed();\n    }\n  });\n}\n\nfunction initShareButton() {\n  $('.aux-controls .share').on(tapEvent, function () {\n    if (!$body.hasClass(playingClass)) {\n      sharePressed();\n    }\n  });\n}\n\nfunction setupCanvas() {\n  paper.project.activeLayer.name = 'background';\n  var canvasBg = new Raster('canvas-bg');\n  canvasBg.name = 'canvasBg';\n  canvasBg.position = paper.view.center;\n\n  var scaleFactorHorizontal = paper.view.viewSize.width / canvasBg.size.width;\n  var scaleFactorVertical = paper.view.viewSize.height / canvasBg.size.height;\n  canvasBg.scale(Math.max(scaleFactorHorizontal, scaleFactorVertical));\n  var layer = new Layer(); // init new layer that all other shapes will be drawn upon\n  paper.project.activeLayer.name = 'canvas';\n  console.log(paper.project);\n}\n\n},{\"./sound\":9}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rad = rad;\nexports.deg = deg;\nexports.angleDelta = angleDelta;\nexports.delta = delta;\nvar config = require('./../../config');\n\n// Converts from degrees to radians.\nfunction rad(degrees) {\n  return degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nfunction deg(radians) {\n  return radians * 180 / Math.PI;\n};\n\n// returns absolute value of the delta of two angles in radians\nfunction angleDelta(x, y) {\n  return Math.abs(Math.atan2(Math.sin(y - x), Math.cos(y - x)));;\n}\n\n// distance between two points\nfunction delta(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)); // pythagorean!\n}\n\n},{\"./../../config\":1}]},{},[6])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}